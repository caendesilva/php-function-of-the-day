[
    {
        "name": "abs",
        "url": "function.abs.php",
        "description": "Absolute value"
    },
    {
        "name": "acosh",
        "url": "function.acosh.php",
        "description": "Inverse hyperbolic cosine"
    },
    {
        "name": "addslashes",
        "url": "function.addslashes.php",
        "description": "Quote string with slashes"
    },
    {
        "name": "apache_child_terminate",
        "url": "function.apache-child-terminate.php",
        "description": "Terminate apache process after this request"
    },
    {
        "name": "apache_get_modules",
        "url": "function.apache-get-modules.php",
        "description": "Get a list of loaded Apache modules"
    },
    {
        "name": "apache_lookup_uri",
        "url": "function.apache-lookup-uri.php",
        "description": "Perform a partial request for the specified URI and return all info about it"
    },
    {
        "name": "apache_request_headers",
        "url": "function.apache-request-headers.php",
        "description": "Fetch all HTTP request headers"
    },
    {
        "name": "apache_setenv",
        "url": "function.apache-setenv.php",
        "description": "Set an Apache subprocess_env variable"
    },
    {
        "name": "APCUIterator::getTotalCount",
        "url": "apcuiterator.gettotalcount.php",
        "description": "Get total count"
    },
    {
        "name": "APCUIterator::getTotalSize",
        "url": "apcuiterator.gettotalsize.php",
        "description": "Get total cache size"
    },
    {
        "name": "APCUIterator::next",
        "url": "apcuiterator.next.php",
        "description": "Move pointer to next item"
    },
    {
        "name": "APCUIterator::valid",
        "url": "apcuiterator.valid.php",
        "description": "Checks if current position is valid"
    },
    {
        "name": "apcu_add",
        "url": "function.apcu-add.php",
        "description": "Cache a new variable in the data store"
    },
    {
        "name": "apcu_cas",
        "url": "function.apcu-cas.php",
        "description": "Updates an old value with a new value"
    },
    {
        "name": "apcu_dec",
        "url": "function.apcu-dec.php",
        "description": "Decrease a stored number"
    },
    {
        "name": "apcu_enabled",
        "url": "function.apcu-enabled.php",
        "description": "Whether APCu is usable in the current environment"
    },
    {
        "name": "apcu_exists",
        "url": "function.apcu-exists.php",
        "description": "Checks if entry exists"
    },
    {
        "name": "apcu_inc",
        "url": "function.apcu-inc.php",
        "description": "Increase a stored number"
    },
    {
        "name": "apcu_sma_info",
        "url": "function.apcu-sma-info.php",
        "description": "Retrieves APCu Shared Memory Allocation information"
    },
    {
        "name": "AppendIterator::append",
        "url": "appenditerator.append.php",
        "description": "Appends an iterator"
    },
    {
        "name": "AppendIterator::getArrayIterator",
        "url": "appenditerator.getarrayiterator.php",
        "description": "Gets the ArrayIterator"
    },
    {
        "name": "AppendIterator::key",
        "url": "appenditerator.key.php",
        "description": "Gets the current key"
    },
    {
        "name": "AppendIterator::rewind",
        "url": "appenditerator.rewind.php",
        "description": "Rewinds the Iterator"
    },
    {
        "name": "AppendIterator::__construct",
        "url": "appenditerator.construct.php",
        "description": "Constructs an AppendIterator"
    },
    {
        "name": "ArrayAccess::offsetExists",
        "url": "arrayaccess.offsetexists.php",
        "description": "Whether an offset exists"
    },
    {
        "name": "ArrayAccess::offsetSet",
        "url": "arrayaccess.offsetset.php",
        "description": "Assign a value to the specified offset"
    },
    {
        "name": "ArrayIterator::append",
        "url": "arrayiterator.append.php",
        "description": "Append an element"
    },
    {
        "name": "ArrayIterator::count",
        "url": "arrayiterator.count.php",
        "description": "Count elements"
    },
    {
        "name": "ArrayIterator::getArrayCopy",
        "url": "arrayiterator.getarraycopy.php",
        "description": "Get array copy"
    },
    {
        "name": "ArrayIterator::key",
        "url": "arrayiterator.key.php",
        "description": "Return current array key"
    },
    {
        "name": "ArrayIterator::natcasesort",
        "url": "arrayiterator.natcasesort.php",
        "description": "Sort entries naturally, case insensitive"
    },
    {
        "name": "ArrayIterator::next",
        "url": "arrayiterator.next.php",
        "description": "Move to next entry"
    },
    {
        "name": "ArrayIterator::offsetGet",
        "url": "arrayiterator.offsetget.php",
        "description": "Get value for an offset"
    },
    {
        "name": "ArrayIterator::offsetUnset",
        "url": "arrayiterator.offsetunset.php",
        "description": "Unset value for an offset"
    },
    {
        "name": "ArrayIterator::seek",
        "url": "arrayiterator.seek.php",
        "description": "Seek to position"
    },
    {
        "name": "ArrayIterator::setFlags",
        "url": "arrayiterator.setflags.php",
        "description": "Set behaviour flags"
    },
    {
        "name": "ArrayIterator::uksort",
        "url": "arrayiterator.uksort.php",
        "description": "Sort by keys using a user-defined comparison function"
    },
    {
        "name": "ArrayIterator::valid",
        "url": "arrayiterator.valid.php",
        "description": "Check whether array contains more entries"
    },
    {
        "name": "ArrayObject::append",
        "url": "arrayobject.append.php",
        "description": "Appends the value"
    },
    {
        "name": "ArrayObject::count",
        "url": "arrayobject.count.php",
        "description": "Get the number of public properties in the ArrayObject"
    },
    {
        "name": "ArrayObject::getArrayCopy",
        "url": "arrayobject.getarraycopy.php",
        "description": "Creates a copy of the ArrayObject"
    },
    {
        "name": "ArrayObject::getIterator",
        "url": "arrayobject.getiterator.php",
        "description": "Create a new iterator from an ArrayObject instance"
    },
    {
        "name": "ArrayObject::ksort",
        "url": "arrayobject.ksort.php",
        "description": "Sort the entries by key"
    },
    {
        "name": "ArrayObject::natsort",
        "url": "arrayobject.natsort.php",
        "description": "Sort entries using a &quot;natural order&quot; algorithm"
    },
    {
        "name": "ArrayObject::offsetGet",
        "url": "arrayobject.offsetget.php",
        "description": "Returns the value at the specified index"
    },
    {
        "name": "ArrayObject::offsetUnset",
        "url": "arrayobject.offsetunset.php",
        "description": "Unsets the value at the specified index"
    },
    {
        "name": "ArrayObject::setFlags",
        "url": "arrayobject.setflags.php",
        "description": "Sets the behavior flags"
    },
    {
        "name": "ArrayObject::uasort",
        "url": "arrayobject.uasort.php",
        "description": "Sort the entries with a user-defined comparison function and maintain key association"
    },
    {
        "name": "ArrayObject::unserialize",
        "url": "arrayobject.unserialize.php",
        "description": "Unserialize an ArrayObject"
    },
    {
        "name": "array_change_key_case",
        "url": "function.array-change-key-case.php",
        "description": "Changes the case of all keys in an array"
    },
    {
        "name": "array_column",
        "url": "function.array-column.php",
        "description": "Return the values from a single column in the input array"
    },
    {
        "name": "array_count_values",
        "url": "function.array-count-values.php",
        "description": "Counts the occurrences of each distinct value in an array"
    },
    {
        "name": "array_diff_assoc",
        "url": "function.array-diff-assoc.php",
        "description": "Computes the difference of arrays with additional index check"
    },
    {
        "name": "array_diff_uassoc",
        "url": "function.array-diff-uassoc.php",
        "description": "Computes the difference of arrays with additional index check which is performed by a user supplied callback function"
    },
    {
        "name": "array_fill",
        "url": "function.array-fill.php",
        "description": "Fill an array with values"
    },
    {
        "name": "array_filter",
        "url": "function.array-filter.php",
        "description": "Filters elements of an array using a callback function"
    },
    {
        "name": "array_intersect",
        "url": "function.array-intersect.php",
        "description": "Computes the intersection of arrays"
    },
    {
        "name": "array_intersect_key",
        "url": "function.array-intersect-key.php",
        "description": "Computes the intersection of arrays using keys for comparison"
    },
    {
        "name": "array_intersect_ukey",
        "url": "function.array-intersect-ukey.php",
        "description": "Computes the intersection of arrays using a callback function on the keys for comparison"
    },
    {
        "name": "array_keys",
        "url": "function.array-keys.php",
        "description": "Return all the keys or a subset of the keys of an array"
    },
    {
        "name": "array_key_first",
        "url": "function.array-key-first.php",
        "description": "Gets the first key of an array"
    },
    {
        "name": "array_map",
        "url": "function.array-map.php",
        "description": "Applies the callback to the elements of the given arrays"
    },
    {
        "name": "array_merge_recursive",
        "url": "function.array-merge-recursive.php",
        "description": "Merge one or more arrays recursively"
    },
    {
        "name": "array_pad",
        "url": "function.array-pad.php",
        "description": "Pad array to the specified length with a value"
    },
    {
        "name": "array_product",
        "url": "function.array-product.php",
        "description": "Calculate the product of values in an array"
    },
    {
        "name": "array_rand",
        "url": "function.array-rand.php",
        "description": "Pick one or more random keys out of an array"
    },
    {
        "name": "array_replace",
        "url": "function.array-replace.php",
        "description": "Replaces elements from passed arrays into the first array"
    },
    {
        "name": "array_reverse",
        "url": "function.array-reverse.php",
        "description": "Return an array with elements in reverse order"
    },
    {
        "name": "array_shift",
        "url": "function.array-shift.php",
        "description": "Shift an element off the beginning of array"
    },
    {
        "name": "array_splice",
        "url": "function.array-splice.php",
        "description": "Remove a portion of the array and replace it with something else"
    },
    {
        "name": "array_udiff",
        "url": "function.array-udiff.php",
        "description": "Computes the difference of arrays by using a callback function for data comparison"
    },
    {
        "name": "array_udiff_uassoc",
        "url": "function.array-udiff-uassoc.php",
        "description": "Computes the difference of arrays with additional index check, compares data and indexes by a callback function"
    },
    {
        "name": "array_uintersect_assoc",
        "url": "function.array-uintersect-assoc.php",
        "description": "Computes the intersection of arrays with additional index check, compares data by a callback function"
    },
    {
        "name": "array_unique",
        "url": "function.array-unique.php",
        "description": "Removes duplicate values from an array"
    },
    {
        "name": "array_values",
        "url": "function.array-values.php",
        "description": "Return all the values of an array"
    },
    {
        "name": "array_walk_recursive",
        "url": "function.array-walk-recursive.php",
        "description": "Apply a user function recursively to every member of an array"
    },
    {
        "name": "asin",
        "url": "function.asin.php",
        "description": "Arc sine"
    },
    {
        "name": "asort",
        "url": "function.asort.php",
        "description": "Sort an array in ascending order and maintain index association"
    },
    {
        "name": "assert_options",
        "url": "function.assert-options.php",
        "description": "Set\/get the various assert flags"
    },
    {
        "name": "atan2",
        "url": "function.atan2.php",
        "description": "Arc tangent of two variables"
    },
    {
        "name": "Attribute::__construct",
        "url": "attribute.construct.php",
        "description": "Construct a new Attribute instance"
    },
    {
        "name": "BackedEnum::from",
        "url": "backedenum.from.php",
        "description": "Maps a scalar to an enum instance"
    },
    {
        "name": "base64_decode",
        "url": "function.base64-decode.php",
        "description": "Decodes data encoded with MIME base64"
    },
    {
        "name": "basename",
        "url": "function.basename.php",
        "description": "Returns trailing name component of path"
    },
    {
        "name": "BaseResult::getWarningsCount",
        "url": "mysql-xdevapi-baseresult.getwarningscount.php",
        "description": "Fetch warning count from last operation"
    },
    {
        "name": "bcadd",
        "url": "function.bcadd.php",
        "description": "Add two arbitrary precision numbers"
    },
    {
        "name": "bcdiv",
        "url": "function.bcdiv.php",
        "description": "Divide two arbitrary precision numbers"
    },
    {
        "name": "bcmul",
        "url": "function.bcmul.php",
        "description": "Multiply two arbitrary precision numbers"
    },
    {
        "name": "bcpowmod",
        "url": "function.bcpowmod.php",
        "description": "Raise an arbitrary precision number to another, reduced by a specified modulus"
    },
    {
        "name": "bcsqrt",
        "url": "function.bcsqrt.php",
        "description": "Get the square root of an arbitrary precision number"
    },
    {
        "name": "bin2hex",
        "url": "function.bin2hex.php",
        "description": "Convert binary data into hexadecimal representation"
    },
    {
        "name": "bindtextdomain",
        "url": "function.bindtextdomain.php",
        "description": "Sets or gets the path for a domain"
    },
    {
        "name": "boolval",
        "url": "function.boolval.php",
        "description": "Get the boolean value of a variable"
    },
    {
        "name": "bzcompress",
        "url": "function.bzcompress.php",
        "description": "Compress a string into bzip2 encoded data"
    },
    {
        "name": "bzerrno",
        "url": "function.bzerrno.php",
        "description": "Returns a bzip2 error number"
    },
    {
        "name": "bzerrstr",
        "url": "function.bzerrstr.php",
        "description": "Returns a bzip2 error string"
    },
    {
        "name": "bzopen",
        "url": "function.bzopen.php",
        "description": "Opens a bzip2 compressed file"
    },
    {
        "name": "bzwrite",
        "url": "function.bzwrite.php",
        "description": "Binary safe bzip2 file write"
    },
    {
        "name": "CachingIterator::count",
        "url": "cachingiterator.count.php",
        "description": "The number of elements in the iterator"
    },
    {
        "name": "CachingIterator::getCache",
        "url": "cachingiterator.getcache.php",
        "description": "Retrieve the contents of the cache"
    },
    {
        "name": "CachingIterator::hasNext",
        "url": "cachingiterator.hasnext.php",
        "description": "Check whether the inner iterator has a valid next element"
    },
    {
        "name": "CachingIterator::next",
        "url": "cachingiterator.next.php",
        "description": "Move the iterator forward"
    },
    {
        "name": "CachingIterator::offsetGet",
        "url": "cachingiterator.offsetget.php",
        "description": "The offsetGet purpose"
    },
    {
        "name": "CachingIterator::offsetUnset",
        "url": "cachingiterator.offsetunset.php",
        "description": "The offsetUnset purpose"
    },
    {
        "name": "CachingIterator::setFlags",
        "url": "cachingiterator.setflags.php",
        "description": "The setFlags purpose"
    },
    {
        "name": "CachingIterator::__construct",
        "url": "cachingiterator.construct.php",
        "description": "Construct a new CachingIterator object for the iterator"
    },
    {
        "name": "CallbackFilterIterator::accept",
        "url": "callbackfilteriterator.accept.php",
        "description": "Calls the callback with the current value, the current key and the inner iterator as arguments"
    },
    {
        "name": "call_user_func",
        "url": "function.call-user-func.php",
        "description": "Call the callback given by the first parameter"
    },
    {
        "name": "cal_days_in_month",
        "url": "function.cal-days-in-month.php",
        "description": "Return the number of days in a month for a given year and calendar"
    },
    {
        "name": "cal_info",
        "url": "function.cal-info.php",
        "description": "Returns information about a particular calendar"
    },
    {
        "name": "ceil",
        "url": "function.ceil.php",
        "description": "Round fractions up"
    },
    {
        "name": "checkdate",
        "url": "function.checkdate.php",
        "description": "Validate a Gregorian date"
    },
    {
        "name": "chgrp",
        "url": "function.chgrp.php",
        "description": "Changes file group"
    },
    {
        "name": "chop",
        "url": "function.chop.php",
        "description": "Alias of rtrim"
    },
    {
        "name": "chr",
        "url": "function.chr.php",
        "description": "Generate a single-byte string from a number"
    },
    {
        "name": "chunk_split",
        "url": "function.chunk-split.php",
        "description": "Split a string into smaller chunks"
    },
    {
        "name": "class_exists",
        "url": "function.class-exists.php",
        "description": "Checks if the class has been defined"
    },
    {
        "name": "class_parents",
        "url": "function.class-parents.php",
        "description": "Return the parent classes of the given class"
    },
    {
        "name": "clearstatcache",
        "url": "function.clearstatcache.php",
        "description": "Clears file status cache"
    },
    {
        "name": "Client::__construct",
        "url": "mysql-xdevapi-client.construct.php",
        "description": "Client constructor"
    },
    {
        "name": "cli_set_process_title",
        "url": "function.cli-set-process-title.php",
        "description": "Sets the process title"
    },
    {
        "name": "closelog",
        "url": "function.closelog.php",
        "description": "Close connection to system logger"
    },
    {
        "name": "Closure::bindTo",
        "url": "closure.bindto.php",
        "description": "Duplicates the closure with a new bound object and class scope"
    },
    {
        "name": "Closure::fromCallable",
        "url": "closure.fromcallable.php",
        "description": "Converts a callable into a closure"
    },
    {
        "name": "Collator::asort",
        "url": "collator.asort.php",
        "description": "Sort array maintaining index association"
    },
    {
        "name": "Collator::create",
        "url": "collator.create.php",
        "description": "Create a collator"
    },
    {
        "name": "Collator::getErrorCode",
        "url": "collator.geterrorcode.php",
        "description": "Get collator's last error code"
    },
    {
        "name": "Collator::getLocale",
        "url": "collator.getlocale.php",
        "description": "Get the locale name of the collator"
    },
    {
        "name": "Collator::getStrength",
        "url": "collator.getstrength.php",
        "description": "Get current collation strength"
    },
    {
        "name": "Collator::setStrength",
        "url": "collator.setstrength.php",
        "description": "Set collation strength"
    },
    {
        "name": "Collator::sortWithSortKeys",
        "url": "collator.sortwithsortkeys.php",
        "description": "Sort array using specified collator and sort keys"
    },
    {
        "name": "Collectable::isGarbage",
        "url": "collectable.isgarbage.php",
        "description": "Determine whether an object has been marked as garbage"
    },
    {
        "name": "Collection::addOrReplaceOne",
        "url": "mysql-xdevapi-collection.addorreplaceone.php",
        "description": "Add or replace collection document"
    },
    {
        "name": "Collection::createIndex",
        "url": "mysql-xdevapi-collection.createindex.php",
        "description": "Create collection index"
    },
    {
        "name": "Collection::existsInDatabase",
        "url": "mysql-xdevapi-collection.existsindatabase.php",
        "description": "Check if collection exists in database"
    },
    {
        "name": "Collection::getName",
        "url": "mysql-xdevapi-collection.getname.php",
        "description": "Get collection name"
    },
    {
        "name": "Collection::getSchema",
        "url": "mysql-xdevapi-collection.getschema.php",
        "description": "Get schema object"
    },
    {
        "name": "Collection::modify",
        "url": "mysql-xdevapi-collection.modify.php",
        "description": "Modify collection documents"
    },
    {
        "name": "Collection::removeOne",
        "url": "mysql-xdevapi-collection.removeone.php",
        "description": "Remove one collection document"
    },
    {
        "name": "Collection::__construct",
        "url": "mysql-xdevapi-collection.construct.php",
        "description": "Collection constructor"
    },
    {
        "name": "CollectionAdd::__construct",
        "url": "mysql-xdevapi-collectionadd.construct.php",
        "description": "CollectionAdd constructor"
    },
    {
        "name": "CollectionFind::execute",
        "url": "mysql-xdevapi-collectionfind.execute.php",
        "description": "Execute the statement"
    },
    {
        "name": "CollectionFind::groupBy",
        "url": "mysql-xdevapi-collectionfind.groupby.php",
        "description": "Set grouping criteria"
    },
    {
        "name": "CollectionFind::limit",
        "url": "mysql-xdevapi-collectionfind.limit.php",
        "description": "Limit number of returned documents"
    },
    {
        "name": "CollectionFind::lockShared",
        "url": "mysql-xdevapi-collectionfind.lockshared.php",
        "description": "Execute operation with SHARED LOCK"
    },
    {
        "name": "CollectionFind::sort",
        "url": "mysql-xdevapi-collectionfind.sort.php",
        "description": "Set the sorting criteria"
    },
    {
        "name": "CollectionModify::arrayAppend",
        "url": "mysql-xdevapi-collectionmodify.arrayappend.php",
        "description": "Append element to an array field"
    },
    {
        "name": "CollectionModify::bind",
        "url": "mysql-xdevapi-collectionmodify.bind.php",
        "description": "Bind value to query placeholder"
    },
    {
        "name": "CollectionModify::limit",
        "url": "mysql-xdevapi-collectionmodify.limit.php",
        "description": "Limit number of modified documents"
    },
    {
        "name": "CollectionModify::replace",
        "url": "mysql-xdevapi-collectionmodify.replace.php",
        "description": "Replace document field"
    },
    {
        "name": "CollectionModify::skip",
        "url": "mysql-xdevapi-collectionmodify.skip.php",
        "description": "Skip elements"
    },
    {
        "name": "CollectionModify::unset",
        "url": "mysql-xdevapi-collectionmodify.unset.php",
        "description": "Unset the value of document fields"
    },
    {
        "name": "CollectionRemove::bind",
        "url": "mysql-xdevapi-collectionremove.bind.php",
        "description": "Bind value to placeholder"
    },
    {
        "name": "CollectionRemove::limit",
        "url": "mysql-xdevapi-collectionremove.limit.php",
        "description": "Limit number of documents to remove"
    },
    {
        "name": "CollectionRemove::__construct",
        "url": "mysql-xdevapi-collectionremove.construct.php",
        "description": "CollectionRemove constructor"
    },
    {
        "name": "ColumnResult::getCollationName",
        "url": "mysql-xdevapi-columnresult.getcollationname.php",
        "description": "Get collation name"
    },
    {
        "name": "ColumnResult::getColumnName",
        "url": "mysql-xdevapi-columnresult.getcolumnname.php",
        "description": "Get column name"
    },
    {
        "name": "ColumnResult::getLength",
        "url": "mysql-xdevapi-columnresult.getlength.php",
        "description": "Get column field length"
    },
    {
        "name": "ColumnResult::getTableLabel",
        "url": "mysql-xdevapi-columnresult.gettablelabel.php",
        "description": "Get table label"
    },
    {
        "name": "ColumnResult::getType",
        "url": "mysql-xdevapi-columnresult.gettype.php",
        "description": "Get column type"
    },
    {
        "name": "ColumnResult::isPadded",
        "url": "mysql-xdevapi-columnresult.ispadded.php",
        "description": "Check if padded"
    },
    {
        "name": "com::__construct",
        "url": "com.construct.php",
        "description": "com class constructor"
    },
    {
        "name": "CommonMark\\CQL::__invoke",
        "url": "commonmark-cql.invoke.php",
        "description": "CQL Execution"
    },
    {
        "name": "CommonMark\\Interfaces\\IVisitor::enter",
        "url": "commonmark-interfaces-ivisitor.enter.php",
        "description": "Visitation"
    },
    {
        "name": "CommonMark\\Node::accept",
        "url": "commonmark-node.accept.php",
        "description": "Visitation"
    },
    {
        "name": "CommonMark\\Node::insertAfter",
        "url": "commonmark-node.insertafter.php",
        "description": "AST Manipulation"
    },
    {
        "name": "CommonMark\\Node::prependChild",
        "url": "commonmark-node.prependchild.php",
        "description": "AST Manipulation"
    },
    {
        "name": "CommonMark\\Node::unlink",
        "url": "commonmark-node.unlink.php",
        "description": "AST Manipulation"
    },
    {
        "name": "CommonMark\\Node\\CodeBlock::__construct",
        "url": "commonmark-node-codeblock.construct.php",
        "description": "CodeBlock Construction"
    },
    {
        "name": "CommonMark\\Node\\Image::__construct",
        "url": "commonmark-node-image.construct.php",
        "description": "Image Construction"
    },
    {
        "name": "CommonMark\\Node\\OrderedList::__construct",
        "url": "commonmark-node-orderedlist.construct.php",
        "description": "OrderedList Construction"
    },
    {
        "name": "CommonMark\\Parse",
        "url": "function.commonmark-parse.php",
        "description": "Parsing"
    },
    {
        "name": "CommonMark\\Parser::parse",
        "url": "commonmark-parser.parse.php",
        "description": "Parsing"
    },
    {
        "name": "CommonMark\\Render",
        "url": "function.commonmark-render.php",
        "description": "Rendering"
    },
    {
        "name": "CommonMark\\Render\\Latex",
        "url": "function.commonmark-render-latex.php",
        "description": "Rendering"
    },
    {
        "name": "CommonMark\\Render\\XML",
        "url": "function.commonmark-render-xml.php",
        "description": "Rendering"
    },
    {
        "name": "COMPersistHelper::GetCurFileName",
        "url": "compersisthelper.getcurfilename.php",
        "description": "Get current filename"
    },
    {
        "name": "COMPersistHelper::InitNew",
        "url": "compersisthelper.initnew.php",
        "description": "Initialize object to default state"
    },
    {
        "name": "COMPersistHelper::LoadFromStream",
        "url": "compersisthelper.loadfromstream.php",
        "description": "Load object from stream"
    },
    {
        "name": "COMPersistHelper::SaveToStream",
        "url": "compersisthelper.savetostream.php",
        "description": "Save object to stream"
    },
    {
        "name": "Componere\\Abstract\\Definition::addInterface",
        "url": "componere-abstract-definition.addinterface.php",
        "description": "Add Interface"
    },
    {
        "name": "Componere\\Abstract\\Definition::addTrait",
        "url": "componere-abstract-definition.addtrait.php",
        "description": "Add Trait"
    },
    {
        "name": "Componere\\cast",
        "url": "componere.cast.php",
        "description": "Casting"
    },
    {
        "name": "Componere\\Definition::addConstant",
        "url": "componere-definition.addconstant.php",
        "description": "Add Constant"
    },
    {
        "name": "Componere\\Definition::getClosure",
        "url": "componere-definition.getclosure.php",
        "description": "Get Closure"
    },
    {
        "name": "Componere\\Definition::isRegistered",
        "url": "componere-definition.isregistered.php",
        "description": "State Detection"
    },
    {
        "name": "Componere\\Definition::__construct",
        "url": "componere-definition.construct.php",
        "description": "Definition Construction"
    },
    {
        "name": "Componere\\Method::setPrivate",
        "url": "componere-method.setprivate.php",
        "description": "Accessibility Modification"
    },
    {
        "name": "Componere\\Method::setStatic",
        "url": "componere-method.setstatic.php",
        "description": "Accessibility Modification"
    },
    {
        "name": "Componere\\Patch::apply",
        "url": "componere-patch.apply.php",
        "description": "Application"
    },
    {
        "name": "Componere\\Patch::getClosure",
        "url": "componere-patch.getclosure.php",
        "description": "Get Closure"
    },
    {
        "name": "Componere\\Patch::isApplied",
        "url": "componere-patch.isapplied.php",
        "description": "State Detection"
    },
    {
        "name": "Componere\\Patch::__construct",
        "url": "componere-patch.construct.php",
        "description": "Patch Construction"
    },
    {
        "name": "Componere\\Value::isPrivate",
        "url": "componere-value.isprivate.php",
        "description": "Accessibility Detection"
    },
    {
        "name": "Componere\\Value::isStatic",
        "url": "componere-value.isstatic.php",
        "description": "Accessibility Detection"
    },
    {
        "name": "Componere\\Value::setProtected",
        "url": "componere-value.setprotected.php",
        "description": "Accessibility Modification"
    },
    {
        "name": "Componere\\Value::__construct",
        "url": "componere-value.construct.php",
        "description": "Value Construction"
    },
    {
        "name": "com_event_sink",
        "url": "function.com-event-sink.php",
        "description": "Connect events from a COM object to a PHP object"
    },
    {
        "name": "com_load_typelib",
        "url": "function.com-load-typelib.php",
        "description": "Loads a Typelib"
    },
    {
        "name": "com_print_typeinfo",
        "url": "function.com-print-typeinfo.php",
        "description": "Print out a PHP class definition for a dispatchable interface"
    },
    {
        "name": "connection_status",
        "url": "function.connection-status.php",
        "description": "Returns connection status bitfield"
    },
    {
        "name": "Context parameters",
        "url": "context.params.php",
        "description": "Context parameter listing"
    },
    {
        "name": "convert_uudecode",
        "url": "function.convert-uudecode.php",
        "description": "Decode a uuencoded string"
    },
    {
        "name": "copy",
        "url": "function.copy.php",
        "description": "Copies file"
    },
    {
        "name": "cosh",
        "url": "function.cosh.php",
        "description": "Hyperbolic cosine"
    },
    {
        "name": "Countable::count",
        "url": "countable.count.php",
        "description": "Count elements of an object"
    },
    {
        "name": "crc32",
        "url": "function.crc32.php",
        "description": "Calculates the crc32 polynomial of a string"
    },
    {
        "name": "CrudOperationBindable::bind",
        "url": "mysql-xdevapi-crudoperationbindable.bind.php",
        "description": "Bind value to placeholder"
    },
    {
        "name": "CrudOperationSkippable::skip",
        "url": "mysql-xdevapi-crudoperationskippable.skip.php",
        "description": "Number of operations to skip"
    },
    {
        "name": "crypt",
        "url": "function.crypt.php",
        "description": "One-way string hashing"
    },
    {
        "name": "ctype_alpha",
        "url": "function.ctype-alpha.php",
        "description": "Check for alphabetic character(s)"
    },
    {
        "name": "ctype_digit",
        "url": "function.ctype-digit.php",
        "description": "Check for numeric character(s)"
    },
    {
        "name": "ctype_lower",
        "url": "function.ctype-lower.php",
        "description": "Check for lowercase character(s)"
    },
    {
        "name": "ctype_punct",
        "url": "function.ctype-punct.php",
        "description": "Check for any printable character which is not whitespace or an    alphanumeric character"
    },
    {
        "name": "ctype_space",
        "url": "function.ctype-space.php",
        "description": "Check for whitespace character(s)"
    },
    {
        "name": "ctype_xdigit",
        "url": "function.ctype-xdigit.php",
        "description": "Check for character(s) representing a hexadecimal digit"
    },
    {
        "name": "cubrid_bind",
        "url": "function.cubrid-bind.php",
        "description": "Bind variables to a prepared statement as parameters"
    },
    {
        "name": "cubrid_close",
        "url": "function.cubrid-close.php",
        "description": "Close CUBRID connection"
    },
    {
        "name": "cubrid_close_request",
        "url": "function.cubrid-close-request.php",
        "description": "Close the request handle"
    },
    {
        "name": "cubrid_column_types",
        "url": "function.cubrid-column-types.php",
        "description": "Get column types in result"
    },
    {
        "name": "cubrid_col_size",
        "url": "function.cubrid-col-size.php",
        "description": "Get the number of elements in collection type column using OID"
    },
    {
        "name": "cubrid_connect",
        "url": "function.cubrid-connect.php",
        "description": "Open a connection to a CUBRID Server"
    },
    {
        "name": "cubrid_current_oid",
        "url": "function.cubrid-current-oid.php",
        "description": "Get OID of the current cursor location"
    },
    {
        "name": "cubrid_db_name",
        "url": "function.cubrid-db-name.php",
        "description": "Get db name from results of cubrid_list_dbs"
    },
    {
        "name": "cubrid_drop",
        "url": "function.cubrid-drop.php",
        "description": "Delete an instance using OID"
    },
    {
        "name": "cubrid_error",
        "url": "function.cubrid-error.php",
        "description": "Get the error message"
    },
    {
        "name": "cubrid_error_code_facility",
        "url": "function.cubrid-error-code-facility.php",
        "description": "Get the facility code of error"
    },
    {
        "name": "cubrid_execute",
        "url": "function.cubrid-execute.php",
        "description": "Execute a prepared SQL statement"
    },
    {
        "name": "cubrid_fetch_array",
        "url": "function.cubrid-fetch-array.php",
        "description": "Fetch a result row as an associative array, a numeric array, or both"
    },
    {
        "name": "cubrid_fetch_field",
        "url": "function.cubrid-fetch-field.php",
        "description": "Get column information from a result and return as an object"
    },
    {
        "name": "cubrid_fetch_object",
        "url": "function.cubrid-fetch-object.php",
        "description": "Fetch the next row and return it as an object"
    },
    {
        "name": "cubrid_field_flags",
        "url": "function.cubrid-field-flags.php",
        "description": "Return a string with the flags of the given field offset"
    },
    {
        "name": "cubrid_field_name",
        "url": "function.cubrid-field-name.php",
        "description": "Return the name of the specified field index"
    },
    {
        "name": "cubrid_field_table",
        "url": "function.cubrid-field-table.php",
        "description": "Return the name of the table of the specified field"
    },
    {
        "name": "cubrid_free_result",
        "url": "function.cubrid-free-result.php",
        "description": "Free the memory occupied by the result data"
    },
    {
        "name": "cubrid_get_autocommit",
        "url": "function.cubrid-get-autocommit.php",
        "description": "Get auto-commit mode of the connection"
    },
    {
        "name": "cubrid_get_class_name",
        "url": "function.cubrid-get-class-name.php",
        "description": "Get the class name using OID"
    },
    {
        "name": "cubrid_get_db_parameter",
        "url": "function.cubrid-get-db-parameter.php",
        "description": "Returns the CUBRID database parameters"
    },
    {
        "name": "cubrid_get_server_info",
        "url": "function.cubrid-get-server-info.php",
        "description": "Return the CUBRID server version"
    },
    {
        "name": "cubrid_is_instance",
        "url": "function.cubrid-is-instance.php",
        "description": "Check whether the instance pointed by OID exists"
    },
    {
        "name": "cubrid_load_from_glo",
        "url": "function.cubrid-load-from-glo.php",
        "description": "Read data from a GLO instance and save it in a file"
    },
    {
        "name": "cubrid_lob2_close",
        "url": "function.cubrid-lob2-close.php",
        "description": "Close LOB object"
    },
    {
        "name": "cubrid_lob2_import",
        "url": "function.cubrid-lob2-import.php",
        "description": "Import BLOB\/CLOB data from a file"
    },
    {
        "name": "cubrid_lob2_read",
        "url": "function.cubrid-lob2-read.php",
        "description": "Read from BLOB\/CLOB data"
    },
    {
        "name": "cubrid_lob2_seek64",
        "url": "function.cubrid-lob2-seek64.php",
        "description": "Move the cursor of a lob object"
    },
    {
        "name": "cubrid_lob2_size64",
        "url": "function.cubrid-lob2-size64.php",
        "description": "Get a lob object's size"
    },
    {
        "name": "cubrid_lob2_tell64",
        "url": "function.cubrid-lob2-tell64.php",
        "description": "Tell the cursor position of the LOB object"
    },
    {
        "name": "cubrid_lob_close",
        "url": "function.cubrid-lob-close.php",
        "description": "Close BLOB\/CLOB data"
    },
    {
        "name": "cubrid_lob_get",
        "url": "function.cubrid-lob-get.php",
        "description": "Get BLOB\/CLOB data"
    },
    {
        "name": "cubrid_lob_size",
        "url": "function.cubrid-lob-size.php",
        "description": "Get BLOB\/CLOB data size"
    },
    {
        "name": "cubrid_lock_write",
        "url": "function.cubrid-lock-write.php",
        "description": "Set a write lock on the given OID"
    },
    {
        "name": "cubrid_new_glo",
        "url": "function.cubrid-new-glo.php",
        "description": "Create a glo instance"
    },
    {
        "name": "cubrid_num_cols",
        "url": "function.cubrid-num-cols.php",
        "description": "Return the number of columns in the result set"
    },
    {
        "name": "cubrid_num_rows",
        "url": "function.cubrid-num-rows.php",
        "description": "Get the number of rows in the result set"
    },
    {
        "name": "cubrid_pconnect_with_url",
        "url": "function.cubrid-pconnect-with-url.php",
        "description": "Open a persistent connection to CUBRID server"
    },
    {
        "name": "cubrid_prepare",
        "url": "function.cubrid-prepare.php",
        "description": "Prepare a SQL statement for execution"
    },
    {
        "name": "cubrid_query",
        "url": "function.cubrid-query.php",
        "description": "Send a CUBRID query"
    },
    {
        "name": "cubrid_result",
        "url": "function.cubrid-result.php",
        "description": "Return the value of a specific field in a specific row"
    },
    {
        "name": "cubrid_save_to_glo",
        "url": "function.cubrid-save-to-glo.php",
        "description": "Save requested file in a GLO instance"
    },
    {
        "name": "cubrid_send_glo",
        "url": "function.cubrid-send-glo.php",
        "description": "Read data from glo and send it to std output"
    },
    {
        "name": "cubrid_seq_insert",
        "url": "function.cubrid-seq-insert.php",
        "description": "Insert an element to a sequence type column using OID"
    },
    {
        "name": "cubrid_set_add",
        "url": "function.cubrid-set-add.php",
        "description": "Insert a single element to set type column using OID"
    },
    {
        "name": "cubrid_set_db_parameter",
        "url": "function.cubrid-set-db-parameter.php",
        "description": "Sets the CUBRID database parameters"
    },
    {
        "name": "cubrid_set_query_timeout",
        "url": "function.cubrid-set-query-timeout.php",
        "description": "Set the timeout time of query execution"
    },
    {
        "name": "cubrid_version",
        "url": "function.cubrid-version.php",
        "description": "Get the CUBRID PHP module's version"
    },
    {
        "name": "CURLFile::getMimeType",
        "url": "curlfile.getmimetype.php",
        "description": "Get MIME type"
    },
    {
        "name": "CURLFile::setMimeType",
        "url": "curlfile.setmimetype.php",
        "description": "Set MIME type"
    },
    {
        "name": "CURLFile::__construct",
        "url": "curlfile.construct.php",
        "description": "Create a CURLFile object"
    },
    {
        "name": "curl_close",
        "url": "function.curl-close.php",
        "description": "Close a cURL session"
    },
    {
        "name": "curl_errno",
        "url": "function.curl-errno.php",
        "description": "Return the last error number"
    },
    {
        "name": "curl_escape",
        "url": "function.curl-escape.php",
        "description": "URL encodes the given string"
    },
    {
        "name": "curl_getinfo",
        "url": "function.curl-getinfo.php",
        "description": "Get information regarding a specific transfer"
    },
    {
        "name": "curl_multi_add_handle",
        "url": "function.curl-multi-add-handle.php",
        "description": "Add a normal cURL handle to a cURL multi handle"
    },
    {
        "name": "curl_multi_errno",
        "url": "function.curl-multi-errno.php",
        "description": "Return the last multi curl error number"
    },
    {
        "name": "curl_multi_getcontent",
        "url": "function.curl-multi-getcontent.php",
        "description": "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set"
    },
    {
        "name": "curl_multi_init",
        "url": "function.curl-multi-init.php",
        "description": "Returns a new cURL multi handle"
    },
    {
        "name": "curl_multi_select",
        "url": "function.curl-multi-select.php",
        "description": "Wait for activity on any curl_multi connection"
    },
    {
        "name": "curl_multi_strerror",
        "url": "function.curl-multi-strerror.php",
        "description": "Return string describing error code"
    },
    {
        "name": "curl_reset",
        "url": "function.curl-reset.php",
        "description": "Reset all options of a libcurl session handle"
    },
    {
        "name": "curl_setopt_array",
        "url": "function.curl-setopt-array.php",
        "description": "Set multiple options for a cURL transfer"
    },
    {
        "name": "curl_share_errno",
        "url": "function.curl-share-errno.php",
        "description": "Return the last share curl error number"
    },
    {
        "name": "curl_share_setopt",
        "url": "function.curl-share-setopt.php",
        "description": "Set an option for a cURL share handle"
    },
    {
        "name": "curl_strerror",
        "url": "function.curl-strerror.php",
        "description": "Return string describing the given error code"
    },
    {
        "name": "curl_upkeep",
        "url": "function.curl_upkeep.php",
        "description": "Performs any connection upkeep checks"
    },
    {
        "name": "current",
        "url": "function.current.php",
        "description": "Return the current element in an array"
    },
    {
        "name": "data:\/\/",
        "url": "wrappers.data.php",
        "description": "Data (RFC 2397)"
    },
    {
        "name": "DatabaseObject::getName",
        "url": "mysql-xdevapi-databaseobject.getname.php",
        "description": "Get object name"
    },
    {
        "name": "date",
        "url": "function.date.php",
        "description": "Format a Unix timestamp"
    },
    {
        "name": "DateInterval::format",
        "url": "dateinterval.format.php",
        "description": "Formats the interval"
    },
    {
        "name": "DatePeriod::createFromISO8601String",
        "url": "dateperiod.createfromiso8601string.php",
        "description": "Creates a new DatePeriod object from an ISO8601 string"
    },
    {
        "name": "DatePeriod::getEndDate",
        "url": "dateperiod.getenddate.php",
        "description": "Gets the end date"
    },
    {
        "name": "DatePeriod::getStartDate",
        "url": "dateperiod.getstartdate.php",
        "description": "Gets the start date"
    },
    {
        "name": "DateTime::add",
        "url": "datetime.add.php",
        "description": "Modifies a DateTime object, with added amount of days, months, years, hours, minutes and seconds"
    },
    {
        "name": "DateTime::createFromImmutable",
        "url": "datetime.createfromimmutable.php",
        "description": "Returns new DateTime instance encapsulating the given DateTimeImmutable object"
    },
    {
        "name": "DateTime::getLastErrors",
        "url": "datetime.getlasterrors.php",
        "description": "Alias of DateTimeImmutable::getLastErrors"
    },
    {
        "name": "DateTime::setDate",
        "url": "datetime.setdate.php",
        "description": "Sets the date"
    },
    {
        "name": "DateTime::setTime",
        "url": "datetime.settime.php",
        "description": "Sets the time"
    },
    {
        "name": "DateTime::setTimezone",
        "url": "datetime.settimezone.php",
        "description": "Sets the time zone for the DateTime object"
    },
    {
        "name": "DateTime::__construct",
        "url": "datetime.construct.php",
        "description": "Returns new DateTime object"
    },
    {
        "name": "DateTime::__wakeup",
        "url": "datetime.wakeup.php",
        "description": "The __wakeup handler"
    },
    {
        "name": "DateTimeImmutable::createFromFormat",
        "url": "datetimeimmutable.createfromformat.php",
        "description": "Parses a time string according to a specified format"
    },
    {
        "name": "DateTimeImmutable::createFromMutable",
        "url": "datetimeimmutable.createfrommutable.php",
        "description": "Returns new DateTimeImmutable instance encapsulating the given DateTime object"
    },
    {
        "name": "DateTimeImmutable::modify",
        "url": "datetimeimmutable.modify.php",
        "description": "Creates a new object with modified timestamp"
    },
    {
        "name": "DateTimeImmutable::setISODate",
        "url": "datetimeimmutable.setisodate.php",
        "description": "Sets the ISO date"
    },
    {
        "name": "DateTimeImmutable::setTimestamp",
        "url": "datetimeimmutable.settimestamp.php",
        "description": "Sets the date and time based on a Unix timestamp"
    },
    {
        "name": "DateTimeImmutable::sub",
        "url": "datetimeimmutable.sub.php",
        "description": "Subtracts an amount of days, months, years, hours, minutes and seconds"
    },
    {
        "name": "DateTimeImmutable::__set_state",
        "url": "datetimeimmutable.set-state.php",
        "description": "The __set_state handler"
    },
    {
        "name": "DateTimeInterface::format",
        "url": "datetime.format.php",
        "description": "Returns date formatted according to given format"
    },
    {
        "name": "DateTimeInterface::getTimestamp",
        "url": "datetime.gettimestamp.php",
        "description": "Gets the Unix timestamp"
    },
    {
        "name": "DateTimeZone::getLocation",
        "url": "datetimezone.getlocation.php",
        "description": "Returns location information for a timezone"
    },
    {
        "name": "DateTimeZone::getOffset",
        "url": "datetimezone.getoffset.php",
        "description": "Returns the timezone offset from GMT"
    },
    {
        "name": "DateTimeZone::listAbbreviations",
        "url": "datetimezone.listabbreviations.php",
        "description": "Returns associative array containing dst, offset and the timezone name"
    },
    {
        "name": "DateTimeZone::__construct",
        "url": "datetimezone.construct.php",
        "description": "Creates new DateTimeZone object"
    },
    {
        "name": "date_create",
        "url": "function.date-create.php",
        "description": "create a new DateTime object"
    },
    {
        "name": "date_create_immutable",
        "url": "function.date-create-immutable.php",
        "description": "create a new DateTimeImmutable object"
    },
    {
        "name": "date_date_set",
        "url": "function.date-date-set.php",
        "description": "Alias of DateTime::setDate"
    },
    {
        "name": "date_default_timezone_set",
        "url": "function.date-default-timezone-set.php",
        "description": "Sets the default timezone used by all date\/time functions in a script"
    },
    {
        "name": "date_format",
        "url": "function.date-format.php",
        "description": "Alias of DateTime::format"
    },
    {
        "name": "date_interval_create_from_date_string",
        "url": "function.date-interval-create-from-date-string.php",
        "description": "Alias of DateInterval::createFromDateString"
    },
    {
        "name": "date_isodate_set",
        "url": "function.date-isodate-set.php",
        "description": "Alias of DateTime::setISODate"
    },
    {
        "name": "date_offset_get",
        "url": "function.date-offset-get.php",
        "description": "Alias of DateTime::getOffset"
    },
    {
        "name": "date_parse_from_format",
        "url": "function.date-parse-from-format.php",
        "description": "Get info about given date formatted according to the specified format"
    },
    {
        "name": "date_sunrise",
        "url": "function.date-sunrise.php",
        "description": "Returns time of sunrise for a given day and location"
    },
    {
        "name": "date_sun_info",
        "url": "function.date-sun-info.php",
        "description": "Returns an array with information about sunset\/sunrise and twilight begin\/end"
    },
    {
        "name": "date_timestamp_set",
        "url": "function.date-timestamp-set.php",
        "description": "Alias of DateTime::setTimestamp"
    },
    {
        "name": "date_timezone_set",
        "url": "function.date-timezone-set.php",
        "description": "Alias of DateTime::setTimezone"
    },
    {
        "name": "db2_autocommit",
        "url": "function.db2-autocommit.php",
        "description": "Returns or sets the AUTOCOMMIT state for a database connection"
    },
    {
        "name": "db2_client_info",
        "url": "function.db2-client-info.php",
        "description": "Returns an object with properties that describe the DB2 database client"
    },
    {
        "name": "db2_columns",
        "url": "function.db2-columns.php",
        "description": "Returns a result set listing the columns and associated metadata for a table"
    },
    {
        "name": "db2_commit",
        "url": "function.db2-commit.php",
        "description": "Commits a transaction"
    },
    {
        "name": "db2_conn_error",
        "url": "function.db2-conn-error.php",
        "description": "Returns a string containing the SQLSTATE returned by the last connection attempt"
    },
    {
        "name": "db2_cursor_type",
        "url": "function.db2-cursor-type.php",
        "description": "Returns the cursor type used by a statement resource"
    },
    {
        "name": "db2_exec",
        "url": "function.db2-exec.php",
        "description": "Executes an SQL statement directly"
    },
    {
        "name": "db2_fetch_array",
        "url": "function.db2-fetch-array.php",
        "description": "Returns an array, indexed by column position, representing a row in a result set"
    },
    {
        "name": "db2_fetch_both",
        "url": "function.db2-fetch-both.php",
        "description": "Returns an array, indexed by both column name and position, representing a row in a result set"
    },
    {
        "name": "db2_fetch_row",
        "url": "function.db2-fetch-row.php",
        "description": "Sets the result set pointer to the next row or requested row"
    },
    {
        "name": "db2_field_name",
        "url": "function.db2-field-name.php",
        "description": "Returns the name of the column in the result set"
    },
    {
        "name": "db2_field_precision",
        "url": "function.db2-field-precision.php",
        "description": "Returns the precision of the indicated column in a result set"
    },
    {
        "name": "db2_field_type",
        "url": "function.db2-field-type.php",
        "description": "Returns the data type of the indicated column in a result set"
    },
    {
        "name": "db2_foreign_keys",
        "url": "function.db2-foreign-keys.php",
        "description": "Returns a result set listing the foreign keys for a table"
    },
    {
        "name": "db2_free_stmt",
        "url": "function.db2-free-stmt.php",
        "description": "Frees resources associated with the indicated statement resource"
    },
    {
        "name": "db2_last_insert_id",
        "url": "function.db2-last-insert-id.php",
        "description": "Returns the auto generated ID of the last insert query that successfully    executed on this connection"
    },
    {
        "name": "db2_lob_read",
        "url": "function.db2-lob-read.php",
        "description": "Gets a user defined size of LOB files with each invocation"
    },
    {
        "name": "db2_num_fields",
        "url": "function.db2-num-fields.php",
        "description": "Returns the number of fields contained in a result set"
    },
    {
        "name": "db2_pclose",
        "url": "function.db2-pclose.php",
        "description": "Closes a persistent database connection"
    },
    {
        "name": "db2_prepare",
        "url": "function.db2-prepare.php",
        "description": "Prepares an SQL statement to be executed"
    },
    {
        "name": "db2_procedures",
        "url": "function.db2-procedures.php",
        "description": "Returns a result set listing the stored procedures registered in a database"
    },
    {
        "name": "db2_result",
        "url": "function.db2-result.php",
        "description": "Returns a single column from a row in the result set"
    },
    {
        "name": "db2_server_info",
        "url": "function.db2-server-info.php",
        "description": "Returns an object with properties that describe the DB2 database server"
    },
    {
        "name": "db2_special_columns",
        "url": "function.db2-special-columns.php",
        "description": "Returns a result set listing the unique row identifier columns for a table"
    },
    {
        "name": "db2_stmt_error",
        "url": "function.db2-stmt-error.php",
        "description": "Returns a string containing the SQLSTATE returned by an SQL statement"
    },
    {
        "name": "db2_tables",
        "url": "function.db2-tables.php",
        "description": "Returns a result set listing the tables and associated metadata in a database"
    },
    {
        "name": "dbase_add_record",
        "url": "function.dbase-add-record.php",
        "description": "Adds a record to a database"
    },
    {
        "name": "dbase_create",
        "url": "function.dbase-create.php",
        "description": "Creates a database"
    },
    {
        "name": "dbase_get_header_info",
        "url": "function.dbase-get-header-info.php",
        "description": "Gets the header info of a database"
    },
    {
        "name": "dbase_get_record_with_names",
        "url": "function.dbase-get-record-with-names.php",
        "description": "Gets a record from a database as an associative array"
    },
    {
        "name": "dbase_numrecords",
        "url": "function.dbase-numrecords.php",
        "description": "Gets the number of records in a database"
    },
    {
        "name": "dbase_pack",
        "url": "function.dbase-pack.php",
        "description": "Packs a database"
    },
    {
        "name": "dba_close",
        "url": "function.dba-close.php",
        "description": "Close a DBA database"
    },
    {
        "name": "dba_exists",
        "url": "function.dba-exists.php",
        "description": "Check whether key exists"
    },
    {
        "name": "dba_firstkey",
        "url": "function.dba-firstkey.php",
        "description": "Fetch first key"
    },
    {
        "name": "dba_insert",
        "url": "function.dba-insert.php",
        "description": "Insert entry"
    },
    {
        "name": "dba_list",
        "url": "function.dba-list.php",
        "description": "List all open database files"
    },
    {
        "name": "dba_open",
        "url": "function.dba-open.php",
        "description": "Open database"
    },
    {
        "name": "dba_popen",
        "url": "function.dba-popen.php",
        "description": "Open database persistently"
    },
    {
        "name": "dba_sync",
        "url": "function.dba-sync.php",
        "description": "Synchronize database"
    },
    {
        "name": "dcngettext",
        "url": "function.dcngettext.php",
        "description": "Plural version of dcgettext"
    },
    {
        "name": "debug_print_backtrace",
        "url": "function.debug-print-backtrace.php",
        "description": "Prints a backtrace"
    },
    {
        "name": "decbin",
        "url": "function.decbin.php",
        "description": "Decimal to binary"
    },
    {
        "name": "decoct",
        "url": "function.decoct.php",
        "description": "Decimal to octal"
    },
    {
        "name": "defined",
        "url": "function.defined.php",
        "description": "Checks whether a constant with the given name exists"
    },
    {
        "name": "deflate_init",
        "url": "function.deflate-init.php",
        "description": "Initialize an incremental deflate context"
    },
    {
        "name": "delete",
        "url": "function.delete.php",
        "description": "See unlink or unset"
    },
    {
        "name": "die",
        "url": "function.die.php",
        "description": "Equivalent to exit"
    },
    {
        "name": "dio_fcntl",
        "url": "function.dio-fcntl.php",
        "description": "Performs a c library fcntl on fd"
    },
    {
        "name": "dio_read",
        "url": "function.dio-read.php",
        "description": "Reads bytes from a file descriptor"
    },
    {
        "name": "dio_stat",
        "url": "function.dio-stat.php",
        "description": "Gets stat information about the file descriptor fd"
    },
    {
        "name": "dio_truncate",
        "url": "function.dio-truncate.php",
        "description": "Truncates file descriptor fd to offset bytes"
    },
    {
        "name": "dir",
        "url": "function.dir.php",
        "description": "Return an instance of the Directory class"
    },
    {
        "name": "Directory::read",
        "url": "directory.read.php",
        "description": "Read entry from directory handle"
    },
    {
        "name": "DirectoryIterator::current",
        "url": "directoryiterator.current.php",
        "description": "Return the current DirectoryIterator item"
    },
    {
        "name": "DirectoryIterator::getExtension",
        "url": "directoryiterator.getextension.php",
        "description": "Gets the file extension"
    },
    {
        "name": "DirectoryIterator::isDot",
        "url": "directoryiterator.isdot.php",
        "description": "Determine if current DirectoryIterator item is '.' or '..'"
    },
    {
        "name": "DirectoryIterator::next",
        "url": "directoryiterator.next.php",
        "description": "Move forward to next DirectoryIterator item"
    },
    {
        "name": "DirectoryIterator::seek",
        "url": "directoryiterator.seek.php",
        "description": "Seek to a DirectoryIterator item"
    },
    {
        "name": "DirectoryIterator::__construct",
        "url": "directoryiterator.construct.php",
        "description": "Constructs a new directory iterator from a path"
    },
    {
        "name": "dirname",
        "url": "function.dirname.php",
        "description": "Returns a parent directory's path"
    },
    {
        "name": "disk_free_space",
        "url": "function.disk-free-space.php",
        "description": "Returns available space on filesystem or disk partition"
    },
    {
        "name": "dl",
        "url": "function.dl.php",
        "description": "Loads a PHP extension at runtime"
    },
    {
        "name": "dns_check_record",
        "url": "function.dns-check-record.php",
        "description": "Alias of checkdnsrr"
    },
    {
        "name": "dns_get_record",
        "url": "function.dns-get-record.php",
        "description": "Fetch DNS Resource Records associated with a hostname"
    },
    {
        "name": "DocResult::fetchOne",
        "url": "mysql-xdevapi-docresult.fetchone.php",
        "description": "Get one row"
    },
    {
        "name": "DocResult::getWarningsCount",
        "url": "mysql-xdevapi-docresult.getwarningscount.php",
        "description": "Get warning count from last operation"
    },
    {
        "name": "DOMAttr::isId",
        "url": "domattr.isid.php",
        "description": "Checks if attribute is a defined ID"
    },
    {
        "name": "DOMCdataSection::__construct",
        "url": "domcdatasection.construct.php",
        "description": "Constructs a new DOMCdataSection object"
    },
    {
        "name": "DOMCharacterData::appendData",
        "url": "domcharacterdata.appenddata.php",
        "description": "Append the string to the end of the character data of the node"
    },
    {
        "name": "DOMCharacterData::deleteData",
        "url": "domcharacterdata.deletedata.php",
        "description": "Remove a range of characters from the node"
    },
    {
        "name": "DOMCharacterData::remove",
        "url": "domcharacterdata.remove.php",
        "description": "Removes the character data"
    },
    {
        "name": "DOMCharacterData::replaceWith",
        "url": "domcharacterdata.replacewith.php",
        "description": "Replaces the character data with new nodes"
    },
    {
        "name": "DOMChildNode::after",
        "url": "domchildnode.after.php",
        "description": "Adds nodes after the node"
    },
    {
        "name": "DOMChildNode::remove",
        "url": "domchildnode.remove.php",
        "description": "Removes the node"
    },
    {
        "name": "DOMComment::__construct",
        "url": "domcomment.construct.php",
        "description": "Creates a new DOMComment object"
    },
    {
        "name": "DOMDocument::append",
        "url": "domdocument.append.php",
        "description": "Appends nodes after the last child node"
    },
    {
        "name": "DOMDocument::createAttributeNS",
        "url": "domdocument.createattributens.php",
        "description": "Create new attribute node with an associated namespace"
    },
    {
        "name": "DOMDocument::createComment",
        "url": "domdocument.createcomment.php",
        "description": "Create new comment node"
    },
    {
        "name": "DOMDocument::createElement",
        "url": "domdocument.createelement.php",
        "description": "Create new element node"
    },
    {
        "name": "DOMDocument::createEntityReference",
        "url": "domdocument.createentityreference.php",
        "description": "Create new entity reference node"
    },
    {
        "name": "DOMDocument::createTextNode",
        "url": "domdocument.createtextnode.php",
        "description": "Create new text node"
    },
    {
        "name": "DOMDocument::getElementsByTagName",
        "url": "domdocument.getelementsbytagname.php",
        "description": "Searches for all elements with given local tag name"
    },
    {
        "name": "DOMDocument::importNode",
        "url": "domdocument.importnode.php",
        "description": "Import node into current document"
    },
    {
        "name": "DOMDocument::loadHTML",
        "url": "domdocument.loadhtml.php",
        "description": "Load HTML from a string"
    },
    {
        "name": "DOMDocument::loadXML",
        "url": "domdocument.loadxml.php",
        "description": "Load XML from a string"
    },
    {
        "name": "DOMDocument::prepend",
        "url": "domdocument.prepend.php",
        "description": "Prepends nodes before the first child node"
    },
    {
        "name": "DOMDocument::relaxNGValidate",
        "url": "domdocument.relaxngvalidate.php",
        "description": "Performs relaxNG validation on the document"
    },
    {
        "name": "DOMDocument::replaceChildren",
        "url": "domdocument.replacechildren.php",
        "description": "Replace children in document"
    },
    {
        "name": "DOMDocument::saveHTML",
        "url": "domdocument.savehtml.php",
        "description": "Dumps the internal document into a string using HTML formatting"
    },
    {
        "name": "DOMDocument::saveXML",
        "url": "domdocument.savexml.php",
        "description": "Dumps the internal XML tree back into a string"
    },
    {
        "name": "DOMDocument::schemaValidateSource",
        "url": "domdocument.schemavalidatesource.php",
        "description": "Validates a document based on a schema"
    },
    {
        "name": "DOMDocument::xinclude",
        "url": "domdocument.xinclude.php",
        "description": "Substitutes XIncludes in a DOMDocument Object"
    },
    {
        "name": "DOMDocumentFragment::append",
        "url": "domdocumentfragment.append.php",
        "description": "Appends nodes after the last child node"
    },
    {
        "name": "DOMDocumentFragment::prepend",
        "url": "domdocumentfragment.prepend.php",
        "description": "Prepends nodes before the first child node"
    },
    {
        "name": "DOMDocumentFragment::__construct",
        "url": "domdocumentfragment.construct.php",
        "description": "Constructs a DOMDocumentFragment object"
    },
    {
        "name": "DOMElement::append",
        "url": "domelement.append.php",
        "description": "Appends nodes after the last child node"
    },
    {
        "name": "DOMElement::getAttribute",
        "url": "domelement.getattribute.php",
        "description": "Returns value of attribute"
    },
    {
        "name": "DOMElement::getAttributeNode",
        "url": "domelement.getattributenode.php",
        "description": "Returns attribute node"
    },
    {
        "name": "DOMElement::getAttributeNS",
        "url": "domelement.getattributens.php",
        "description": "Returns value of attribute"
    },
    {
        "name": "DOMElement::getElementsByTagNameNS",
        "url": "domelement.getelementsbytagnamens.php",
        "description": "Get elements by namespaceURI and localName"
    },
    {
        "name": "DOMElement::hasAttributeNS",
        "url": "domelement.hasattributens.php",
        "description": "Checks to see if attribute exists"
    },
    {
        "name": "DOMElement::insertAdjacentText",
        "url": "domelement.insertadjacenttext.php",
        "description": "Insert adjacent text"
    },
    {
        "name": "DOMElement::remove",
        "url": "domelement.remove.php",
        "description": "Removes the element"
    },
    {
        "name": "DOMElement::removeAttributeNode",
        "url": "domelement.removeattributenode.php",
        "description": "Removes attribute"
    },
    {
        "name": "DOMElement::replaceChildren",
        "url": "domelement.replacechildren.php",
        "description": "Replace children in element"
    },
    {
        "name": "DOMElement::setAttribute",
        "url": "domelement.setattribute.php",
        "description": "Adds new or modifies existing attribute"
    },
    {
        "name": "DOMElement::setAttributeNodeNS",
        "url": "domelement.setattributenodens.php",
        "description": "Adds new attribute node to element"
    },
    {
        "name": "DOMElement::setIdAttribute",
        "url": "domelement.setidattribute.php",
        "description": "Declares the attribute specified by name to be of type ID"
    },
    {
        "name": "DOMElement::setIdAttributeNS",
        "url": "domelement.setidattributens.php",
        "description": "Declares the attribute specified by local name and namespace URI to be of type ID"
    },
    {
        "name": "DOMElement::__construct",
        "url": "domelement.construct.php",
        "description": "Creates a new DOMElement object"
    },
    {
        "name": "DOMImplementation::createDocument",
        "url": "domimplementation.createdocument.php",
        "description": "Creates a DOMDocument object of the specified type with its document element"
    },
    {
        "name": "DOMImplementation::hasFeature",
        "url": "domimplementation.hasfeature.php",
        "description": "Test if the DOM implementation implements a specific feature"
    },
    {
        "name": "DOMNamedNodeMap::count",
        "url": "domnamednodemap.count.php",
        "description": "Get number of nodes in the map"
    },
    {
        "name": "DOMNamedNodeMap::getNamedItem",
        "url": "domnamednodemap.getnameditem.php",
        "description": "Retrieves a node specified by name"
    },
    {
        "name": "DOMNamedNodeMap::item",
        "url": "domnamednodemap.item.php",
        "description": "Retrieves a node specified by index"
    },
    {
        "name": "DOMNode::C14N",
        "url": "domnode.c14n.php",
        "description": "Canonicalize nodes to a string"
    },
    {
        "name": "DOMNode::cloneNode",
        "url": "domnode.clonenode.php",
        "description": "Clones a node"
    },
    {
        "name": "DOMNode::getLineNo",
        "url": "domnode.getlineno.php",
        "description": "Get line number for a node"
    },
    {
        "name": "DOMNode::getRootNode",
        "url": "domnode.getrootnode.php",
        "description": "Get root node"
    },
    {
        "name": "DOMNode::hasChildNodes",
        "url": "domnode.haschildnodes.php",
        "description": "Checks if node has children"
    },
    {
        "name": "DOMNode::isDefaultNamespace",
        "url": "domnode.isdefaultnamespace.php",
        "description": "Checks if the specified namespaceURI is the default namespace or not"
    },
    {
        "name": "DOMNode::isSameNode",
        "url": "domnode.issamenode.php",
        "description": "Indicates if two nodes are the same node"
    },
    {
        "name": "DOMNode::lookupNamespaceURI",
        "url": "domnode.lookupnamespaceuri.php",
        "description": "Gets the namespace URI of the node based on the prefix"
    },
    {
        "name": "DOMNode::normalize",
        "url": "domnode.normalize.php",
        "description": "Normalizes the node"
    },
    {
        "name": "DOMNode::replaceChild",
        "url": "domnode.replacechild.php",
        "description": "Replaces a child"
    },
    {
        "name": "DOMNodeList::getIterator",
        "url": "domnodelist.getiterator.php",
        "description": "Retrieve an external iterator"
    },
    {
        "name": "DOMParentNode::append",
        "url": "domparentnode.append.php",
        "description": "Appends nodes after the last child node"
    },
    {
        "name": "DOMParentNode::replaceChildren",
        "url": "domparentnode.replacechildren.php",
        "description": "Replace children in node"
    },
    {
        "name": "DOMText::isElementContentWhitespace",
        "url": "domtext.iselementcontentwhitespace.php",
        "description": "Returns whether this text node contains whitespace in element content"
    },
    {
        "name": "DOMText::splitText",
        "url": "domtext.splittext.php",
        "description": "Breaks this node into two nodes at the specified offset"
    },
    {
        "name": "DOMXPath::evaluate",
        "url": "domxpath.evaluate.php",
        "description": "Evaluates the given XPath expression and returns a typed result if possible"
    },
    {
        "name": "DOMXPath::registerNamespace",
        "url": "domxpath.registernamespace.php",
        "description": "Registers the namespace with the DOMXPath object"
    },
    {
        "name": "DOMXPath::__construct",
        "url": "domxpath.construct.php",
        "description": "Creates a new DOMXPath object"
    },
    {
        "name": "dotnet::__construct",
        "url": "dotnet.construct.php",
        "description": "dotnet class constructor"
    },
    {
        "name": "Ds\\Collection::clear",
        "url": "ds-collection.clear.php",
        "description": "Removes all values"
    },
    {
        "name": "Ds\\Collection::isEmpty",
        "url": "ds-collection.isempty.php",
        "description": "Returns whether the collection is empty"
    },
    {
        "name": "Ds\\Deque::allocate",
        "url": "ds-deque.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\Deque::capacity",
        "url": "ds-deque.capacity.php",
        "description": "Returns the current capacity"
    },
    {
        "name": "Ds\\Deque::contains",
        "url": "ds-deque.contains.php",
        "description": "Determines if the deque contains given values"
    },
    {
        "name": "Ds\\Deque::count",
        "url": "ds-deque.count.php",
        "description": "Returns the number of values in the collection"
    },
    {
        "name": "Ds\\Deque::find",
        "url": "ds-deque.find.php",
        "description": "Attempts to find a value's index"
    },
    {
        "name": "Ds\\Deque::get",
        "url": "ds-deque.get.php",
        "description": "Returns the value at a given index"
    },
    {
        "name": "Ds\\Deque::isEmpty",
        "url": "ds-deque.isempty.php",
        "description": "Returns whether the deque is empty"
    },
    {
        "name": "Ds\\Deque::jsonSerialize",
        "url": "ds-deque.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "Ds\\Deque::map",
        "url": "ds-deque.map.php",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "name": "Ds\\Deque::pop",
        "url": "ds-deque.pop.php",
        "description": "Removes and returns the last value"
    },
    {
        "name": "Ds\\Deque::reduce",
        "url": "ds-deque.reduce.php",
        "description": "Reduces the deque to a single value using a callback function"
    },
    {
        "name": "Ds\\Deque::reverse",
        "url": "ds-deque.reverse.php",
        "description": "Reverses the deque in-place"
    },
    {
        "name": "Ds\\Deque::rotate",
        "url": "ds-deque.rotate.php",
        "description": "Rotates the deque by a given number of rotations"
    },
    {
        "name": "Ds\\Deque::shift",
        "url": "ds-deque.shift.php",
        "description": "Removes and returns the first value"
    },
    {
        "name": "Ds\\Deque::sort",
        "url": "ds-deque.sort.php",
        "description": "Sorts the deque in-place"
    },
    {
        "name": "Ds\\Deque::sum",
        "url": "ds-deque.sum.php",
        "description": "Returns the sum of all values in the deque"
    },
    {
        "name": "Ds\\Deque::unshift",
        "url": "ds-deque.unshift.php",
        "description": "Adds values to the front of the deque"
    },
    {
        "name": "Ds\\Hashable::equals",
        "url": "ds-hashable.equals.php",
        "description": "Determines whether an object is equal to the current instance"
    },
    {
        "name": "Ds\\Map::allocate",
        "url": "ds-map.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\Map::capacity",
        "url": "ds-map.capacity.php",
        "description": "Returns the current capacity"
    },
    {
        "name": "Ds\\Map::copy",
        "url": "ds-map.copy.php",
        "description": "Returns a shallow copy of the map"
    },
    {
        "name": "Ds\\Map::diff",
        "url": "ds-map.diff.php",
        "description": "Creates a new map using keys that aren't in another map"
    },
    {
        "name": "Ds\\Map::first",
        "url": "ds-map.first.php",
        "description": "Returns the first pair in the map"
    },
    {
        "name": "Ds\\Map::hasKey",
        "url": "ds-map.haskey.php",
        "description": "Determines whether the map contains a given key"
    },
    {
        "name": "Ds\\Map::intersect",
        "url": "ds-map.intersect.php",
        "description": "Creates a new map by intersecting keys with another map"
    },
    {
        "name": "Ds\\Map::jsonSerialize",
        "url": "ds-map.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "Ds\\Map::ksort",
        "url": "ds-map.ksort.php",
        "description": "Sorts the map in-place by key"
    },
    {
        "name": "Ds\\Map::last",
        "url": "ds-map.last.php",
        "description": "Returns the last pair of the map"
    },
    {
        "name": "Ds\\Map::merge",
        "url": "ds-map.merge.php",
        "description": "Returns the result of adding all given associations"
    },
    {
        "name": "Ds\\Map::put",
        "url": "ds-map.put.php",
        "description": "Associates a key with a value"
    },
    {
        "name": "Ds\\Map::reduce",
        "url": "ds-map.reduce.php",
        "description": "Reduces the map to a single value using a callback function"
    },
    {
        "name": "Ds\\Map::reverse",
        "url": "ds-map.reverse.php",
        "description": "Reverses the map in-place"
    },
    {
        "name": "Ds\\Map::skip",
        "url": "ds-map.skip.php",
        "description": "Returns the pair at a given positional index"
    },
    {
        "name": "Ds\\Map::sort",
        "url": "ds-map.sort.php",
        "description": "Sorts the map in-place by value"
    },
    {
        "name": "Ds\\Map::sum",
        "url": "ds-map.sum.php",
        "description": "Returns the sum of all values in the map"
    },
    {
        "name": "Ds\\Map::union",
        "url": "ds-map.union.php",
        "description": "Creates a new map using values from the current instance and another map"
    },
    {
        "name": "Ds\\Map::xor",
        "url": "ds-map.xor.php",
        "description": "Creates a new map using keys of either the current instance or of another map, but not of both"
    },
    {
        "name": "Ds\\Pair::clear",
        "url": "ds-pair.clear.php",
        "description": "Removes all values"
    },
    {
        "name": "Ds\\Pair::isEmpty",
        "url": "ds-pair.isempty.php",
        "description": "Returns whether the pair is empty"
    },
    {
        "name": "Ds\\Pair::toArray",
        "url": "ds-pair.toarray.php",
        "description": "Converts the pair to an array"
    },
    {
        "name": "Ds\\PriorityQueue::allocate",
        "url": "ds-priorityqueue.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\PriorityQueue::clear",
        "url": "ds-priorityqueue.clear.php",
        "description": "Removes all values"
    },
    {
        "name": "Ds\\PriorityQueue::count",
        "url": "ds-priorityqueue.count.php",
        "description": "Returns the number of values in the queue"
    },
    {
        "name": "Ds\\PriorityQueue::jsonSerialize",
        "url": "ds-priorityqueue.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "Ds\\PriorityQueue::pop",
        "url": "ds-priorityqueue.pop.php",
        "description": "Removes and returns the value with the highest priority"
    },
    {
        "name": "Ds\\PriorityQueue::toArray",
        "url": "ds-priorityqueue.toarray.php",
        "description": "Converts the queue to an array"
    },
    {
        "name": "Ds\\Queue::allocate",
        "url": "ds-queue.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\Queue::clear",
        "url": "ds-queue.clear.php",
        "description": "Removes all values"
    },
    {
        "name": "Ds\\Queue::count",
        "url": "ds-queue.count.php",
        "description": "Returns the number of values in the queue"
    },
    {
        "name": "Ds\\Queue::jsonSerialize",
        "url": "ds-queue.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "Ds\\Queue::pop",
        "url": "ds-queue.pop.php",
        "description": "Removes and returns the value at the front of the queue"
    },
    {
        "name": "Ds\\Queue::toArray",
        "url": "ds-queue.toarray.php",
        "description": "Converts the queue to an array"
    },
    {
        "name": "Ds\\Sequence::allocate",
        "url": "ds-sequence.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\Sequence::capacity",
        "url": "ds-sequence.capacity.php",
        "description": "Returns the current capacity"
    },
    {
        "name": "Ds\\Sequence::filter",
        "url": "ds-sequence.filter.php",
        "description": "Creates a new sequence using a callable to     determine which values to include"
    },
    {
        "name": "Ds\\Sequence::find",
        "url": "ds-sequence.find.php",
        "description": "Attempts to find a value's index"
    },
    {
        "name": "Ds\\Sequence::get",
        "url": "ds-sequence.get.php",
        "description": "Returns the value at a given index"
    },
    {
        "name": "Ds\\Sequence::join",
        "url": "ds-sequence.join.php",
        "description": "Joins all values together as a string"
    },
    {
        "name": "Ds\\Sequence::map",
        "url": "ds-sequence.map.php",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "name": "Ds\\Sequence::pop",
        "url": "ds-sequence.pop.php",
        "description": "Removes and returns the last value"
    },
    {
        "name": "Ds\\Sequence::reduce",
        "url": "ds-sequence.reduce.php",
        "description": "Reduces the sequence to a single value using a callback function"
    },
    {
        "name": "Ds\\Sequence::reverse",
        "url": "ds-sequence.reverse.php",
        "description": "Reverses the sequence in-place"
    },
    {
        "name": "Ds\\Sequence::rotate",
        "url": "ds-sequence.rotate.php",
        "description": "Rotates the sequence by a given number of rotations"
    },
    {
        "name": "Ds\\Sequence::shift",
        "url": "ds-sequence.shift.php",
        "description": "Removes and returns the first value"
    },
    {
        "name": "Ds\\Sequence::sort",
        "url": "ds-sequence.sort.php",
        "description": "Sorts the sequence in-place"
    },
    {
        "name": "Ds\\Sequence::sum",
        "url": "ds-sequence.sum.php",
        "description": "Returns the sum of all values in the sequence"
    },
    {
        "name": "Ds\\Set::add",
        "url": "ds-set.add.php",
        "description": "Adds values to the set"
    },
    {
        "name": "Ds\\Set::capacity",
        "url": "ds-set.capacity.php",
        "description": "Returns the current capacity"
    },
    {
        "name": "Ds\\Set::contains",
        "url": "ds-set.contains.php",
        "description": "Determines if the set contains all values"
    },
    {
        "name": "Ds\\Set::count",
        "url": "ds-set.count.php",
        "description": "Returns the number of values in the set"
    },
    {
        "name": "Ds\\Set::filter",
        "url": "ds-set.filter.php",
        "description": "Creates a new set using a callable to     determine which values to include"
    },
    {
        "name": "Ds\\Set::first",
        "url": "ds-set.first.php",
        "description": "Returns the first value in the set"
    },
    {
        "name": "Ds\\Set::intersect",
        "url": "ds-set.intersect.php",
        "description": "Creates a new set by intersecting values with another set"
    },
    {
        "name": "Ds\\Set::join",
        "url": "ds-set.join.php",
        "description": "Joins all values together as a string"
    },
    {
        "name": "Ds\\Set::last",
        "url": "ds-set.last.php",
        "description": "Returns the last value in the set"
    },
    {
        "name": "Ds\\Set::reduce",
        "url": "ds-set.reduce.php",
        "description": "Reduces the set to a single value using a callback function"
    },
    {
        "name": "Ds\\Set::reverse",
        "url": "ds-set.reverse.php",
        "description": "Reverses the set in-place"
    },
    {
        "name": "Ds\\Set::slice",
        "url": "ds-set.slice.php",
        "description": "Returns a sub-set of a given range"
    },
    {
        "name": "Ds\\Set::sorted",
        "url": "ds-set.sorted.php",
        "description": "Returns a sorted copy"
    },
    {
        "name": "Ds\\Set::toArray",
        "url": "ds-set.toarray.php",
        "description": "Converts the set to an array"
    },
    {
        "name": "Ds\\Set::xor",
        "url": "ds-set.xor.php",
        "description": "Creates a new set using values in either the current instance or in another set, but not in both"
    },
    {
        "name": "Ds\\Stack::allocate",
        "url": "ds-stack.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\Stack::clear",
        "url": "ds-stack.clear.php",
        "description": "Removes all values"
    },
    {
        "name": "Ds\\Stack::count",
        "url": "ds-stack.count.php",
        "description": "Returns the number of values in the stack"
    },
    {
        "name": "Ds\\Stack::jsonSerialize",
        "url": "ds-stack.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "Ds\\Stack::pop",
        "url": "ds-stack.pop.php",
        "description": "Removes and returns the value at the top of the stack"
    },
    {
        "name": "Ds\\Stack::toArray",
        "url": "ds-stack.toarray.php",
        "description": "Converts the stack to an array"
    },
    {
        "name": "Ds\\Vector::allocate",
        "url": "ds-vector.allocate.php",
        "description": "Allocates enough memory for a required capacity"
    },
    {
        "name": "Ds\\Vector::capacity",
        "url": "ds-vector.capacity.php",
        "description": "Returns the current capacity"
    },
    {
        "name": "Ds\\Vector::contains",
        "url": "ds-vector.contains.php",
        "description": "Determines if the vector contains given values"
    },
    {
        "name": "Ds\\Vector::count",
        "url": "ds-vector.count.php",
        "description": "Returns the number of values in the collection"
    },
    {
        "name": "Ds\\Vector::find",
        "url": "ds-vector.find.php",
        "description": "Attempts to find a value's index"
    },
    {
        "name": "Ds\\Vector::get",
        "url": "ds-vector.get.php",
        "description": "Returns the value at a given index"
    },
    {
        "name": "Ds\\Vector::isEmpty",
        "url": "ds-vector.isempty.php",
        "description": "Returns whether the vector is empty"
    },
    {
        "name": "Ds\\Vector::jsonSerialize",
        "url": "ds-vector.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "Ds\\Vector::map",
        "url": "ds-vector.map.php",
        "description": "Returns the result of applying a callback to each value"
    },
    {
        "name": "Ds\\Vector::pop",
        "url": "ds-vector.pop.php",
        "description": "Removes and returns the last value"
    },
    {
        "name": "Ds\\Vector::reduce",
        "url": "ds-vector.reduce.php",
        "description": "Reduces the vector to a single value using a callback function"
    },
    {
        "name": "Ds\\Vector::reverse",
        "url": "ds-vector.reverse.php",
        "description": "Reverses the vector in-place"
    },
    {
        "name": "Ds\\Vector::rotate",
        "url": "ds-vector.rotate.php",
        "description": "Rotates the vector by a given number of rotations"
    },
    {
        "name": "Ds\\Vector::shift",
        "url": "ds-vector.shift.php",
        "description": "Removes and returns the first value"
    },
    {
        "name": "Ds\\Vector::sort",
        "url": "ds-vector.sort.php",
        "description": "Sorts the vector in-place"
    },
    {
        "name": "Ds\\Vector::sum",
        "url": "ds-vector.sum.php",
        "description": "Returns the sum of all values in the vector"
    },
    {
        "name": "Ds\\Vector::unshift",
        "url": "ds-vector.unshift.php",
        "description": "Adds values to the front of the vector"
    },
    {
        "name": "each",
        "url": "function.each.php",
        "description": "Return the current key and value pair from an array and advance the array cursor"
    },
    {
        "name": "easter_days",
        "url": "function.easter-days.php",
        "description": "Get number of days after March 21 on which Easter falls for a given year"
    },
    {
        "name": "eio_busy",
        "url": "function.eio-busy.php",
        "description": "Artificially increase load. Could be useful in tests,   benchmarking"
    },
    {
        "name": "eio_cancel",
        "url": "function.eio-cancel.php",
        "description": "Cancels a request"
    },
    {
        "name": "eio_chown",
        "url": "function.eio-chown.php",
        "description": "Change file\/directory permissions"
    },
    {
        "name": "eio_custom",
        "url": "function.eio-custom.php",
        "description": "Execute custom request like any other eio_* call"
    },
    {
        "name": "eio_event_loop",
        "url": "function.eio-event-loop.php",
        "description": "Polls libeio until all requests proceeded"
    },
    {
        "name": "eio_fchmod",
        "url": "function.eio-fchmod.php",
        "description": "Change file permissions"
    },
    {
        "name": "eio_fdatasync",
        "url": "function.eio-fdatasync.php",
        "description": "Synchronize a file's in-core state with storage device"
    },
    {
        "name": "eio_fstatvfs",
        "url": "function.eio-fstatvfs.php",
        "description": "Get file system statistics"
    },
    {
        "name": "eio_ftruncate",
        "url": "function.eio-ftruncate.php",
        "description": "Truncate a file"
    },
    {
        "name": "eio_get_event_stream",
        "url": "function.eio-get-event-stream.php",
        "description": "Get stream representing a variable used in internal communications with libeio"
    },
    {
        "name": "eio_grp",
        "url": "function.eio-grp.php",
        "description": "Creates a request group"
    },
    {
        "name": "eio_grp_cancel",
        "url": "function.eio-grp-cancel.php",
        "description": "Cancels a request group"
    },
    {
        "name": "eio_init",
        "url": "function.eio-init.php",
        "description": "(Re-)initialize Eio"
    },
    {
        "name": "eio_lstat",
        "url": "function.eio-lstat.php",
        "description": "Get file status"
    },
    {
        "name": "eio_mknod",
        "url": "function.eio-mknod.php",
        "description": "Create a special or ordinary file"
    },
    {
        "name": "eio_npending",
        "url": "function.eio-npending.php",
        "description": "Returns number of finished, but unhandled requests"
    },
    {
        "name": "eio_nreqs",
        "url": "function.eio-nreqs.php",
        "description": "Returns number of requests to be processed"
    },
    {
        "name": "eio_open",
        "url": "function.eio-open.php",
        "description": "Opens a file"
    },
    {
        "name": "eio_read",
        "url": "function.eio-read.php",
        "description": "Read from a file descriptor at given offset"
    },
    {
        "name": "eio_readdir",
        "url": "function.eio-readdir.php",
        "description": "Reads through a whole directory"
    },
    {
        "name": "eio_realpath",
        "url": "function.eio-realpath.php",
        "description": "Get the canonicalized absolute pathname"
    },
    {
        "name": "eio_rmdir",
        "url": "function.eio-rmdir.php",
        "description": "Remove a directory"
    },
    {
        "name": "eio_sendfile",
        "url": "function.eio-sendfile.php",
        "description": "Transfer data between file descriptors"
    },
    {
        "name": "eio_set_max_parallel",
        "url": "function.eio-set-max-parallel.php",
        "description": "Set maximum parallel threads"
    },
    {
        "name": "eio_set_max_poll_time",
        "url": "function.eio-set-max-poll-time.php",
        "description": "Set maximum poll time"
    },
    {
        "name": "eio_stat",
        "url": "function.eio-stat.php",
        "description": "Get file status"
    },
    {
        "name": "eio_symlink",
        "url": "function.eio-symlink.php",
        "description": "Create a symbolic link"
    },
    {
        "name": "eio_syncfs",
        "url": "function.eio-syncfs.php",
        "description": "Calls Linux' syncfs syscall, if available"
    },
    {
        "name": "eio_truncate",
        "url": "function.eio-truncate.php",
        "description": "Truncate a file"
    },
    {
        "name": "eio_utime",
        "url": "function.eio-utime.php",
        "description": "Change file last access and modification times"
    },
    {
        "name": "empty",
        "url": "function.empty.php",
        "description": "Determine whether a variable is empty"
    },
    {
        "name": "EmptyIterator::key",
        "url": "emptyiterator.key.php",
        "description": "The key() method"
    },
    {
        "name": "EmptyIterator::rewind",
        "url": "emptyiterator.rewind.php",
        "description": "The rewind() method"
    },
    {
        "name": "enchant_broker_describe",
        "url": "function.enchant-broker-describe.php",
        "description": "Enumerates the Enchant providers"
    },
    {
        "name": "enchant_broker_free",
        "url": "function.enchant-broker-free.php",
        "description": "Free the broker resource and its dictionaries"
    },
    {
        "name": "enchant_broker_get_dict_path",
        "url": "function.enchant-broker-get-dict-path.php",
        "description": "Get the directory path for a given backend"
    },
    {
        "name": "enchant_broker_init",
        "url": "function.enchant-broker-init.php",
        "description": "Create a new broker object capable of requesting"
    },
    {
        "name": "enchant_broker_request_dict",
        "url": "function.enchant-broker-request-dict.php",
        "description": "Create a new dictionary using a tag"
    },
    {
        "name": "enchant_broker_set_dict_path",
        "url": "function.enchant-broker-set-dict-path.php",
        "description": "Set the directory path for a given backend"
    },
    {
        "name": "enchant_dict_add",
        "url": "function.enchant-dict-add.php",
        "description": "Add a word to personal word list"
    },
    {
        "name": "enchant_dict_add_to_session",
        "url": "function.enchant-dict-add-to-session.php",
        "description": "Add 'word' to this spell-checking session"
    },
    {
        "name": "enchant_dict_describe",
        "url": "function.enchant-dict-describe.php",
        "description": "Describes an individual dictionary"
    },
    {
        "name": "enchant_dict_is_added",
        "url": "function.enchant-dict-is-added.php",
        "description": "Whether or not 'word' exists in this spelling-session"
    },
    {
        "name": "enchant_dict_quick_check",
        "url": "function.enchant-dict-quick-check.php",
        "description": "Check the word is correctly spelled and provide suggestions"
    },
    {
        "name": "enchant_dict_suggest",
        "url": "function.enchant-dict-suggest.php",
        "description": "Will return a list of values if any of those pre-conditions are not met"
    },
    {
        "name": "enum_exists",
        "url": "function.enum-exists.php",
        "description": "Checks if the enum has been defined"
    },
    {
        "name": "Error::getFile",
        "url": "error.getfile.php",
        "description": "Gets the file in which the error occurred"
    },
    {
        "name": "Error::getMessage",
        "url": "error.getmessage.php",
        "description": "Gets the error message"
    },
    {
        "name": "Error::getTrace",
        "url": "error.gettrace.php",
        "description": "Gets the stack trace"
    },
    {
        "name": "Error::__clone",
        "url": "error.clone.php",
        "description": "Clone the error"
    },
    {
        "name": "Error::__toString",
        "url": "error.tostring.php",
        "description": "String representation of the error"
    },
    {
        "name": "ErrorException::__construct",
        "url": "errorexception.construct.php",
        "description": "Constructs the exception"
    },
    {
        "name": "error_get_last",
        "url": "function.error-get-last.php",
        "description": "Get the last occurred error"
    },
    {
        "name": "error_reporting",
        "url": "function.error-reporting.php",
        "description": "Sets which PHP errors are reported"
    },
    {
        "name": "escapeshellcmd",
        "url": "function.escapeshellcmd.php",
        "description": "Escape shell metacharacters"
    },
    {
        "name": "Ev::depth",
        "url": "ev.depth.php",
        "description": "Returns recursion depth"
    },
    {
        "name": "Ev::feedSignal",
        "url": "ev.feedsignal.php",
        "description": "Feed a signal event info Ev"
    },
    {
        "name": "Ev::iteration",
        "url": "ev.iteration.php",
        "description": "Return the number of times the default event loop has polled for new   events"
    },
    {
        "name": "Ev::now",
        "url": "ev.now.php",
        "description": "Returns the time when the last iteration of the default event   loop has started"
    },
    {
        "name": "Ev::nowUpdate",
        "url": "ev.nowupdate.php",
        "description": "Establishes the current time by querying the kernel, updating the time     returned by Ev::now in the progress"
    },
    {
        "name": "Ev::recommendedBackends",
        "url": "ev.recommendedbackends.php",
        "description": "Returns a bit mask of recommended backends for current   platform"
    },
    {
        "name": "Ev::resume",
        "url": "ev.resume.php",
        "description": "Resume previously suspended default event loop"
    },
    {
        "name": "Ev::sleep",
        "url": "ev.sleep.php",
        "description": "Block the process for the given number of seconds"
    },
    {
        "name": "Ev::supportedBackends",
        "url": "ev.supportedbackends.php",
        "description": "Returns the set of backends supported by current libev   configuration"
    },
    {
        "name": "Ev::suspend",
        "url": "ev.suspend.php",
        "description": "Suspend the default event loop"
    },
    {
        "name": "Ev::verify",
        "url": "ev.verify.php",
        "description": "Performs internal consistency checks(for debugging)"
    },
    {
        "name": "EvCheck::createStopped",
        "url": "evcheck.createstopped.php",
        "description": "Create instance of a stopped EvCheck watcher"
    },
    {
        "name": "EvChild::createStopped",
        "url": "evchild.createstopped.php",
        "description": "Create instance of a stopped EvCheck watcher"
    },
    {
        "name": "EvChild::__construct",
        "url": "evchild.construct.php",
        "description": "Constructs the EvChild watcher object"
    },
    {
        "name": "EvEmbed::set",
        "url": "evembed.set.php",
        "description": "Configures the watcher"
    },
    {
        "name": "EvEmbed::__construct",
        "url": "evembed.construct.php",
        "description": "Constructs the EvEmbed object"
    },
    {
        "name": "Event::addSignal",
        "url": "event.addsignal.php",
        "description": "Alias of Event::add"
    },
    {
        "name": "Event::del",
        "url": "event.del.php",
        "description": "Makes event non-pending"
    },
    {
        "name": "Event::delTimer",
        "url": "event.deltimer.php",
        "description": "Alias of Event::del"
    },
    {
        "name": "Event::getSupportedMethods",
        "url": "event.getsupportedmethods.php",
        "description": "Returns array with of the names of the methods supported in this version of Libevent"
    },
    {
        "name": "Event::set",
        "url": "event.set.php",
        "description": "Re-configures event"
    },
    {
        "name": "Event::setTimer",
        "url": "event.settimer.php",
        "description": "Re-configures timer event"
    },
    {
        "name": "Event::timer",
        "url": "event.timer.php",
        "description": "Constructs timer event object"
    },
    {
        "name": "EventBase::dispatch",
        "url": "eventbase.dispatch.php",
        "description": "Dispatch pending events"
    },
    {
        "name": "EventBase::free",
        "url": "eventbase.free.php",
        "description": "Free resources allocated for this event base"
    },
    {
        "name": "EventBase::getMethod",
        "url": "eventbase.getmethod.php",
        "description": "Returns event method in use"
    },
    {
        "name": "EventBase::gotExit",
        "url": "eventbase.gotexit.php",
        "description": "Checks if the event loop was told to exit"
    },
    {
        "name": "EventBase::loop",
        "url": "eventbase.loop.php",
        "description": "Dispatch pending events"
    },
    {
        "name": "EventBase::reInit",
        "url": "eventbase.reinit.php",
        "description": "Re-initialize event base(after a fork)"
    },
    {
        "name": "EventBase::__construct",
        "url": "eventbase.construct.php",
        "description": "Constructs EventBase object"
    },
    {
        "name": "EventBuffer::addBuffer",
        "url": "eventbuffer.addbuffer.php",
        "description": "Move all data from a buffer provided to the current instance of EventBuffer"
    },
    {
        "name": "EventBuffer::copyout",
        "url": "eventbuffer.copyout.php",
        "description": "Copies out specified number of bytes from the front of the buffer"
    },
    {
        "name": "EventBuffer::enableLocking",
        "url": "eventbuffer.enablelocking.php",
        "description": "Description"
    },
    {
        "name": "EventBuffer::freeze",
        "url": "eventbuffer.freeze.php",
        "description": "Prevent calls that modify an event buffer from succeeding"
    },
    {
        "name": "EventBuffer::prepend",
        "url": "eventbuffer.prepend.php",
        "description": "Prepend data to the front of the buffer"
    },
    {
        "name": "EventBuffer::pullup",
        "url": "eventbuffer.pullup.php",
        "description": "Linearizes data within buffer   and returns it's contents as a string"
    },
    {
        "name": "EventBuffer::read",
        "url": "eventbuffer.read.php",
        "description": "Read data from an evbuffer and drain the bytes read"
    },
    {
        "name": "EventBuffer::readLine",
        "url": "eventbuffer.readline.php",
        "description": "Extracts a line from the front of the buffer"
    },
    {
        "name": "EventBuffer::searchEol",
        "url": "eventbuffer.searcheol.php",
        "description": "Scans the buffer for an occurrence of an end of line"
    },
    {
        "name": "EventBuffer::unfreeze",
        "url": "eventbuffer.unfreeze.php",
        "description": "Re-enable calls that modify an event buffer"
    },
    {
        "name": "EventBuffer::write",
        "url": "eventbuffer.write.php",
        "description": "Write contents of the buffer to a file or socket"
    },
    {
        "name": "EventBufferEvent::close",
        "url": "eventbufferevent.close.php",
        "description": "Closes file descriptor associated with the current buffer event"
    },
    {
        "name": "EventBufferEvent::connectHost",
        "url": "eventbufferevent.connecthost.php",
        "description": "Connects to a hostname with optionally asyncronous DNS resolving"
    },
    {
        "name": "EventBufferEvent::disable",
        "url": "eventbufferevent.disable.php",
        "description": "Disable events read, write, or both on a buffer event"
    },
    {
        "name": "EventBufferEvent::free",
        "url": "eventbufferevent.free.php",
        "description": "Free a buffer event"
    },
    {
        "name": "EventBufferEvent::getEnabled",
        "url": "eventbufferevent.getenabled.php",
        "description": "Returns bitmask of events currently enabled on the buffer event"
    },
    {
        "name": "EventBufferEvent::getOutput",
        "url": "eventbufferevent.getoutput.php",
        "description": "Returns underlying output buffer associated with current buffer   event"
    },
    {
        "name": "EventBufferEvent::read",
        "url": "eventbufferevent.read.php",
        "description": "Read buffer's data"
    },
    {
        "name": "EventBufferEvent::setCallbacks",
        "url": "eventbufferevent.setcallbacks.php",
        "description": "Assigns read, write and event(status) callbacks"
    },
    {
        "name": "EventBufferEvent::setTimeouts",
        "url": "eventbufferevent.settimeouts.php",
        "description": "Set the read and write timeout for a buffer event"
    },
    {
        "name": "EventBufferEvent::sslError",
        "url": "eventbufferevent.sslerror.php",
        "description": "Returns most recent OpenSSL error reported on the buffer event"
    },
    {
        "name": "EventBufferEvent::sslGetCipherInfo",
        "url": "eventbufferevent.sslgetcipherinfo.php",
        "description": "Returns a textual description of the cipher"
    },
    {
        "name": "EventBufferEvent::sslGetCipherVersion",
        "url": "eventbufferevent.sslgetcipherversion.php",
        "description": "Returns version of cipher used by current SSL connection"
    },
    {
        "name": "EventBufferEvent::sslRenegotiate",
        "url": "eventbufferevent.sslrenegotiate.php",
        "description": "Tells a bufferevent to begin SSL renegotiation"
    },
    {
        "name": "EventBufferEvent::write",
        "url": "eventbufferevent.write.php",
        "description": "Adds data to a buffer event's output buffer"
    },
    {
        "name": "EventBufferEvent::__construct",
        "url": "eventbufferevent.construct.php",
        "description": "Constructs EventBufferEvent object"
    },
    {
        "name": "EventConfig::requireFeatures",
        "url": "eventconfig.requirefeatures.php",
        "description": "Enters a required event method feature that the application demands"
    },
    {
        "name": "EventConfig::setMaxDispatchInterval",
        "url": "eventconfig.setmaxdispatchinterval.php",
        "description": "Prevents priority inversion"
    },
    {
        "name": "EventDnsBase::addNameserverIp",
        "url": "eventdnsbase.addnameserverip.php",
        "description": "Adds a nameserver to the DNS base"
    },
    {
        "name": "EventDnsBase::clearSearch",
        "url": "eventdnsbase.clearsearch.php",
        "description": "Removes all current search suffixes"
    },
    {
        "name": "EventDnsBase::loadHosts",
        "url": "eventdnsbase.loadhosts.php",
        "description": "Loads a hosts file (in the same format as \/etc\/hosts) from hosts file"
    },
    {
        "name": "EventDnsBase::setOption",
        "url": "eventdnsbase.setoption.php",
        "description": "Set the value of a configuration option"
    },
    {
        "name": "EventDnsBase::__construct",
        "url": "eventdnsbase.construct.php",
        "description": "Constructs EventDnsBase object"
    },
    {
        "name": "EventHttp::addServerAlias",
        "url": "eventhttp.addserveralias.php",
        "description": "Adds a server alias to the HTTP server object"
    },
    {
        "name": "EventHttp::removeServerAlias",
        "url": "eventhttp.removeserveralias.php",
        "description": "Removes server alias"
    },
    {
        "name": "EventHttp::setCallback",
        "url": "eventhttp.setcallback.php",
        "description": "Sets a callback for specified URI"
    },
    {
        "name": "EventHttp::setMaxBodySize",
        "url": "eventhttp.setmaxbodysize.php",
        "description": "Sets maximum request body size"
    },
    {
        "name": "EventHttp::setTimeout",
        "url": "eventhttp.settimeout.php",
        "description": "Sets the timeout for an HTTP request"
    },
    {
        "name": "EventHttpConnection::getBase",
        "url": "eventhttpconnection.getbase.php",
        "description": "Returns event base associated with the connection"
    },
    {
        "name": "EventHttpConnection::makeRequest",
        "url": "eventhttpconnection.makerequest.php",
        "description": "Makes an HTTP request over the specified connection"
    },
    {
        "name": "EventHttpConnection::setLocalAddress",
        "url": "eventhttpconnection.setlocaladdress.php",
        "description": "Sets the IP address from which HTTP connections are made"
    },
    {
        "name": "EventHttpConnection::setMaxBodySize",
        "url": "eventhttpconnection.setmaxbodysize.php",
        "description": "Sets maximum body size for the connection"
    },
    {
        "name": "EventHttpConnection::setRetries",
        "url": "eventhttpconnection.setretries.php",
        "description": "Sets the retry limit for the connection"
    },
    {
        "name": "EventHttpConnection::__construct",
        "url": "eventhttpconnection.construct.php",
        "description": "Constructs EventHttpConnection object"
    },
    {
        "name": "EventHttpRequest::cancel",
        "url": "eventhttprequest.cancel.php",
        "description": "Cancels a pending HTTP request"
    },
    {
        "name": "EventHttpRequest::closeConnection",
        "url": "eventhttprequest.closeconnection.php",
        "description": "Closes associated HTTP connection"
    },
    {
        "name": "EventHttpRequest::free",
        "url": "eventhttprequest.free.php",
        "description": "Frees the object and removes associated events"
    },
    {
        "name": "EventHttpRequest::getCommand",
        "url": "eventhttprequest.getcommand.php",
        "description": "Returns the request command(method)"
    },
    {
        "name": "EventHttpRequest::getHost",
        "url": "eventhttprequest.gethost.php",
        "description": "Returns the request host"
    },
    {
        "name": "EventHttpRequest::getInputHeaders",
        "url": "eventhttprequest.getinputheaders.php",
        "description": "Returns associative array of the input headers"
    },
    {
        "name": "EventHttpRequest::getOutputHeaders",
        "url": "eventhttprequest.getoutputheaders.php",
        "description": "Returns associative array of the output headers"
    },
    {
        "name": "EventHttpRequest::getUri",
        "url": "eventhttprequest.geturi.php",
        "description": "Returns the request URI"
    },
    {
        "name": "EventHttpRequest::sendError",
        "url": "eventhttprequest.senderror.php",
        "description": "Send an HTML error message to the client"
    },
    {
        "name": "EventHttpRequest::sendReplyChunk",
        "url": "eventhttprequest.sendreplychunk.php",
        "description": "Send another data chunk as part of an ongoing chunked reply"
    },
    {
        "name": "EventHttpRequest::sendReplyStart",
        "url": "eventhttprequest.sendreplystart.php",
        "description": "Initiate a chunked reply"
    },
    {
        "name": "EventListener::disable",
        "url": "eventlistener.disable.php",
        "description": "Disables an event connect listener object"
    },
    {
        "name": "EventListener::getBase",
        "url": "eventlistener.getbase.php",
        "description": "Returns event base associated with the event listener"
    },
    {
        "name": "EventListener::setCallback",
        "url": "eventlistener.setcallback.php",
        "description": "The setCallback purpose"
    },
    {
        "name": "EventListener::__construct",
        "url": "eventlistener.construct.php",
        "description": "Creates new connection listener associated with an event base"
    },
    {
        "name": "EventUtil::getLastSocketErrno",
        "url": "eventutil.getlastsocketerrno.php",
        "description": "Returns the most recent socket error number"
    },
    {
        "name": "EventUtil::getSocketFd",
        "url": "eventutil.getsocketfd.php",
        "description": "Returns numeric file descriptor of a socket, or stream"
    },
    {
        "name": "EventUtil::setSocketOption",
        "url": "eventutil.setsocketoption.php",
        "description": "Sets socket options"
    },
    {
        "name": "EventUtil::__construct",
        "url": "eventutil.construct.php",
        "description": "The abstract constructor"
    },
    {
        "name": "EvFork::__construct",
        "url": "evfork.construct.php",
        "description": "Constructs the EvFork watcher object"
    },
    {
        "name": "EvIdle::__construct",
        "url": "evidle.construct.php",
        "description": "Constructs the EvIdle watcher object"
    },
    {
        "name": "EvIo::set",
        "url": "evio.set.php",
        "description": "Configures the watcher"
    },
    {
        "name": "EvLoop::backend",
        "url": "evloop.backend.php",
        "description": "Returns an integer describing the backend used by libev"
    },
    {
        "name": "EvLoop::child",
        "url": "evloop.child.php",
        "description": "Creates EvChild object associated with the current event loop"
    },
    {
        "name": "EvLoop::embed",
        "url": "evloop.embed.php",
        "description": "Creates an instance of EvEmbed watcher associated   with the current EvLoop object"
    },
    {
        "name": "EvLoop::fork",
        "url": "evloop.fork.php",
        "description": "Creates EvFork watcher object associated with the current event   loop instance"
    },
    {
        "name": "EvLoop::idle",
        "url": "evloop.idle.php",
        "description": "Creates EvIdle watcher object associated with the current event   loop instance"
    },
    {
        "name": "EvLoop::invokePending",
        "url": "evloop.invokepending.php",
        "description": "Invoke all pending watchers while resetting their pending state"
    },
    {
        "name": "EvLoop::loopFork",
        "url": "evloop.loopfork.php",
        "description": "Must be called after a fork"
    },
    {
        "name": "EvLoop::nowUpdate",
        "url": "evloop.nowupdate.php",
        "description": "Establishes the current time by querying the kernel, updating the time     returned by EvLoop::now in the progress"
    },
    {
        "name": "EvLoop::periodic",
        "url": "evloop.periodic.php",
        "description": "Creates EvPeriodic watcher object associated with the current   event loop instance"
    },
    {
        "name": "EvLoop::prepare",
        "url": "evloop.prepare.php",
        "description": "Creates EvPrepare watcher object associated with the current   event loop instance"
    },
    {
        "name": "EvLoop::resume",
        "url": "evloop.resume.php",
        "description": "Resume previously suspended default event loop"
    },
    {
        "name": "EvLoop::signal",
        "url": "evloop.signal.php",
        "description": "Creates EvSignal watcher object associated with the current   event loop instance"
    },
    {
        "name": "EvLoop::stat",
        "url": "evloop.stat.php",
        "description": "Creates EvStat watcher object associated with the current event   loop instance"
    },
    {
        "name": "EvLoop::stop",
        "url": "evloop.stop.php",
        "description": "Stops the event loop"
    },
    {
        "name": "EvLoop::timer",
        "url": "evloop.timer.php",
        "description": "Creates EvTimer watcher object associated with the current event   loop instance"
    },
    {
        "name": "EvLoop::verify",
        "url": "evloop.verify.php",
        "description": "Performs internal consistency checks(for debugging)"
    },
    {
        "name": "EvPeriodic::again",
        "url": "evperiodic.again.php",
        "description": "Simply stops and restarts the periodic watcher again"
    },
    {
        "name": "EvPeriodic::createStopped",
        "url": "evperiodic.createstopped.php",
        "description": "Create a stopped EvPeriodic watcher"
    },
    {
        "name": "EvPeriodic::__construct",
        "url": "evperiodic.construct.php",
        "description": "Constructs EvPeriodic watcher object"
    },
    {
        "name": "EvPrepare::__construct",
        "url": "evprepare.construct.php",
        "description": "Constructs EvPrepare watcher object"
    },
    {
        "name": "EvSignal::set",
        "url": "evsignal.set.php",
        "description": "Configures the watcher"
    },
    {
        "name": "EvStat::attr",
        "url": "evstat.attr.php",
        "description": "Returns the values most recently detected by Ev"
    },
    {
        "name": "EvStat::prev",
        "url": "evstat.prev.php",
        "description": "Returns the previous set of values returned by EvStat::attr"
    },
    {
        "name": "EvStat::stat",
        "url": "evstat.stat.php",
        "description": "Initiates the stat call"
    },
    {
        "name": "EvTimer::again",
        "url": "evtimer.again.php",
        "description": "Restarts the timer watcher"
    },
    {
        "name": "EvTimer::set",
        "url": "evtimer.set.php",
        "description": "Configures the watcher"
    },
    {
        "name": "EvWatcher::clear",
        "url": "evwatcher.clear.php",
        "description": "Clear watcher pending status"
    },
    {
        "name": "EvWatcher::getLoop",
        "url": "evwatcher.getloop.php",
        "description": "Returns the loop responsible for the watcher"
    },
    {
        "name": "EvWatcher::keepalive",
        "url": "evwatcher.keepalive.php",
        "description": "Configures whether to keep the loop from returning"
    },
    {
        "name": "EvWatcher::start",
        "url": "evwatcher.start.php",
        "description": "Starts the watcher"
    },
    {
        "name": "EvWatcher::__construct",
        "url": "evwatcher.construct.php",
        "description": "Abstract constructor of a watcher object"
    },
    {
        "name": "Exception::getFile",
        "url": "exception.getfile.php",
        "description": "Gets the file in which the exception was created"
    },
    {
        "name": "Exception::getMessage",
        "url": "exception.getmessage.php",
        "description": "Gets the Exception message"
    },
    {
        "name": "Exception::getTrace",
        "url": "exception.gettrace.php",
        "description": "Gets the stack trace"
    },
    {
        "name": "Exception::__clone",
        "url": "exception.clone.php",
        "description": "Clone the exception"
    },
    {
        "name": "Exception::__toString",
        "url": "exception.tostring.php",
        "description": "String representation of the exception"
    },
    {
        "name": "Executable::execute",
        "url": "mysql-xdevapi-executable.execute.php",
        "description": "Execute statement"
    },
    {
        "name": "exif_imagetype",
        "url": "function.exif-imagetype.php",
        "description": "Determine the type of an image"
    },
    {
        "name": "exif_tagname",
        "url": "function.exif-tagname.php",
        "description": "Get the header name for an index"
    },
    {
        "name": "exit",
        "url": "function.exit.php",
        "description": "Output a message and terminate the current script"
    },
    {
        "name": "expect:\/\/",
        "url": "wrappers.expect.php",
        "description": "Process Interaction Streams"
    },
    {
        "name": "expect_popen",
        "url": "function.expect-popen.php",
        "description": "Execute command via Bourne shell, and open the PTY stream to   the process"
    },
    {
        "name": "explode",
        "url": "function.explode.php",
        "description": "Split a string by a string"
    },
    {
        "name": "expression",
        "url": "function.mysql-xdevapi-expression.php",
        "description": "Bind prepared statement variables as parameters"
    },
    {
        "name": "extension_loaded",
        "url": "function.extension-loaded.php",
        "description": "Find out whether an extension is loaded"
    },
    {
        "name": "ezmlm_hash",
        "url": "function.ezmlm-hash.php",
        "description": "Calculate the hash value needed by EZMLM"
    },
    {
        "name": "FANNConnection::getFromNeuron",
        "url": "fannconnection.getfromneuron.php",
        "description": "Returns the postions of starting neuron"
    },
    {
        "name": "FANNConnection::getWeight",
        "url": "fannconnection.getweight.php",
        "description": "Returns the connection weight"
    },
    {
        "name": "FANNConnection::__construct",
        "url": "fannconnection.construct.php",
        "description": "The connection constructor"
    },
    {
        "name": "fann_cascadetrain_on_file",
        "url": "function.fann-cascadetrain-on-file.php",
        "description": "Trains on an entire dataset read from file, for a period of time using the Cascade2 training algorithm"
    },
    {
        "name": "fann_copy",
        "url": "function.fann-copy.php",
        "description": "Creates a copy of a fann structure"
    },
    {
        "name": "fann_create_shortcut",
        "url": "function.fann-create-shortcut.php",
        "description": "Creates a standard backpropagation neural network which is not fully connectected and has shortcut connections"
    },
    {
        "name": "fann_create_sparse",
        "url": "function.fann-create-sparse.php",
        "description": "Creates a standard backpropagation neural network, which is not fully connected"
    },
    {
        "name": "fann_create_standard",
        "url": "function.fann-create-standard.php",
        "description": "Creates a standard fully connected backpropagation neural network"
    },
    {
        "name": "fann_create_train",
        "url": "function.fann-create-train.php",
        "description": "Creates an empty training data struct"
    },
    {
        "name": "fann_descale_input",
        "url": "function.fann-descale-input.php",
        "description": "Scale data in input vector after get it from ann based on previously calculated parameters"
    },
    {
        "name": "fann_descale_train",
        "url": "function.fann-descale-train.php",
        "description": "Descale input and output data based on previously calculated parameters"
    },
    {
        "name": "fann_destroy_train",
        "url": "function.fann-destroy-train.php",
        "description": "Destructs the training data"
    },
    {
        "name": "fann_get_activation_function",
        "url": "function.fann-get-activation-function.php",
        "description": "Returns the activation function"
    },
    {
        "name": "fann_get_bias_array",
        "url": "function.fann-get-bias-array.php",
        "description": "Get the number of bias in each layer in the network"
    },
    {
        "name": "fann_get_bit_fail_limit",
        "url": "function.fann-get-bit-fail-limit.php",
        "description": "Returns the bit fail limit used during training"
    },
    {
        "name": "fann_get_cascade_activation_functions_count",
        "url": "function.fann-get-cascade-activation-functions-count.php",
        "description": "Returns the number of cascade activation functions"
    },
    {
        "name": "fann_get_cascade_activation_steepnesses_count",
        "url": "function.fann-get-cascade-activation-steepnesses-count.php",
        "description": "The number of activation steepnesses"
    },
    {
        "name": "fann_get_cascade_candidate_limit",
        "url": "function.fann-get-cascade-candidate-limit.php",
        "description": "Return the candidate limit"
    },
    {
        "name": "fann_get_cascade_max_cand_epochs",
        "url": "function.fann-get-cascade-max-cand-epochs.php",
        "description": "Returns the maximum candidate epochs"
    },
    {
        "name": "fann_get_cascade_min_cand_epochs",
        "url": "function.fann-get-cascade-min-cand-epochs.php",
        "description": "Returns the minimum candidate epochs"
    },
    {
        "name": "fann_get_cascade_num_candidates",
        "url": "function.fann-get-cascade-num-candidates.php",
        "description": "Returns the number of candidates used during training"
    },
    {
        "name": "fann_get_cascade_output_change_fraction",
        "url": "function.fann-get-cascade-output-change-fraction.php",
        "description": "Returns the cascade output change fraction"
    },
    {
        "name": "fann_get_cascade_weight_multiplier",
        "url": "function.fann-get-cascade-weight-multiplier.php",
        "description": "Returns the weight multiplier"
    },
    {
        "name": "fann_get_connection_rate",
        "url": "function.fann-get-connection-rate.php",
        "description": "Get the connection rate used when the network was created"
    },
    {
        "name": "fann_get_errstr",
        "url": "function.fann-get-errstr.php",
        "description": "Returns the last errstr"
    },
    {
        "name": "fann_get_learning_momentum",
        "url": "function.fann-get-learning-momentum.php",
        "description": "Returns the learning momentum"
    },
    {
        "name": "fann_get_MSE",
        "url": "function.fann-get-mse.php",
        "description": "Reads the mean square error from the network"
    },
    {
        "name": "fann_get_num_input",
        "url": "function.fann-get-num-input.php",
        "description": "Get the number of input neurons"
    },
    {
        "name": "fann_get_num_output",
        "url": "function.fann-get-num-output.php",
        "description": "Get the number of output neurons"
    },
    {
        "name": "fann_get_quickprop_mu",
        "url": "function.fann-get-quickprop-mu.php",
        "description": "Returns the mu factor"
    },
    {
        "name": "fann_get_rprop_delta_max",
        "url": "function.fann-get-rprop-delta-max.php",
        "description": "Returns the maximum step-size"
    },
    {
        "name": "fann_get_rprop_delta_zero",
        "url": "function.fann-get-rprop-delta-zero.php",
        "description": "Returns the initial step-size"
    },
    {
        "name": "fann_get_sarprop_step_error_shift",
        "url": "function.fann-get-sarprop-step-error-shift.php",
        "description": "Returns the sarprop step error shift"
    },
    {
        "name": "fann_get_sarprop_temperature",
        "url": "function.fann-get-sarprop-temperature.php",
        "description": "Returns the sarprop temperature"
    },
    {
        "name": "fann_get_total_connections",
        "url": "function.fann-get-total-connections.php",
        "description": "Get the total number of connections in the entire network"
    },
    {
        "name": "fann_get_training_algorithm",
        "url": "function.fann-get-training-algorithm.php",
        "description": "Returns the training algorithm"
    },
    {
        "name": "fann_get_train_stop_function",
        "url": "function.fann-get-train-stop-function.php",
        "description": "Returns the stop function used during training"
    },
    {
        "name": "fann_length_train_data",
        "url": "function.fann-length-train-data.php",
        "description": "Returns the number of training patterns in the train data"
    },
    {
        "name": "fann_num_input_train_data",
        "url": "function.fann-num-input-train-data.php",
        "description": "Returns the number of inputs in each of the training patterns in the train data"
    },
    {
        "name": "fann_print_error",
        "url": "function.fann-print-error.php",
        "description": "Prints the error string"
    },
    {
        "name": "fann_read_train_from_file",
        "url": "function.fann-read-train-from-file.php",
        "description": "Reads a file that stores training data"
    },
    {
        "name": "fann_reset_errstr",
        "url": "function.fann-reset-errstr.php",
        "description": "Resets the last error string"
    },
    {
        "name": "fann_run",
        "url": "function.fann-run.php",
        "description": "Will run input through the neural network"
    },
    {
        "name": "fann_save_train",
        "url": "function.fann-save-train.php",
        "description": "Save the training structure to a file"
    },
    {
        "name": "fann_scale_input_train_data",
        "url": "function.fann-scale-input-train-data.php",
        "description": "Scales the inputs in the training data to the specified range"
    },
    {
        "name": "fann_scale_output_train_data",
        "url": "function.fann-scale-output-train-data.php",
        "description": "Scales the outputs in the training data to the specified range"
    },
    {
        "name": "fann_scale_train_data",
        "url": "function.fann-scale-train-data.php",
        "description": "Scales the inputs and outputs in the training data to the specified range"
    },
    {
        "name": "fann_set_activation_function_hidden",
        "url": "function.fann-set-activation-function-hidden.php",
        "description": "Sets the activation function for all of the hidden layers"
    },
    {
        "name": "fann_set_activation_function_output",
        "url": "function.fann-set-activation-function-output.php",
        "description": "Sets the activation function for the output layer"
    },
    {
        "name": "fann_set_activation_steepness_hidden",
        "url": "function.fann-set-activation-steepness-hidden.php",
        "description": "Sets the steepness of the activation steepness for all neurons in the all hidden layers"
    },
    {
        "name": "fann_set_activation_steepness_output",
        "url": "function.fann-set-activation-steepness-output.php",
        "description": "Sets the steepness of the activation steepness in the output layer"
    },
    {
        "name": "fann_set_callback",
        "url": "function.fann-set-callback.php",
        "description": "Sets the callback function for use during training"
    },
    {
        "name": "fann_set_cascade_activation_steepnesses",
        "url": "function.fann-set-cascade-activation-steepnesses.php",
        "description": "Sets the array of cascade candidate activation steepnesses"
    },
    {
        "name": "fann_set_cascade_candidate_limit",
        "url": "function.fann-set-cascade-candidate-limit.php",
        "description": "Sets the candidate limit"
    },
    {
        "name": "fann_set_cascade_max_cand_epochs",
        "url": "function.fann-set-cascade-max-cand-epochs.php",
        "description": "Sets the max candidate epochs"
    },
    {
        "name": "fann_set_cascade_min_cand_epochs",
        "url": "function.fann-set-cascade-min-cand-epochs.php",
        "description": "Sets the min candidate epochs"
    },
    {
        "name": "fann_set_cascade_num_candidate_groups",
        "url": "function.fann-set-cascade-num-candidate-groups.php",
        "description": "Sets the number of candidate groups"
    },
    {
        "name": "fann_set_cascade_output_stagnation_epochs",
        "url": "function.fann-set-cascade-output-stagnation-epochs.php",
        "description": "Sets the number of cascade output stagnation epochs"
    },
    {
        "name": "fann_set_error_log",
        "url": "function.fann-set-error-log.php",
        "description": "Sets where the errors are logged to"
    },
    {
        "name": "fann_set_learning_momentum",
        "url": "function.fann-set-learning-momentum.php",
        "description": "Sets the learning momentum"
    },
    {
        "name": "fann_set_output_scaling_params",
        "url": "function.fann-set-output-scaling-params.php",
        "description": "Calculate output scaling parameters for future use based on training data"
    },
    {
        "name": "fann_set_quickprop_mu",
        "url": "function.fann-set-quickprop-mu.php",
        "description": "Sets the quickprop mu factor"
    },
    {
        "name": "fann_set_rprop_delta_max",
        "url": "function.fann-set-rprop-delta-max.php",
        "description": "Sets the maximum step-size"
    },
    {
        "name": "fann_set_rprop_delta_zero",
        "url": "function.fann-set-rprop-delta-zero.php",
        "description": "Sets the initial step-size"
    },
    {
        "name": "fann_set_sarprop_step_error_shift",
        "url": "function.fann-set-sarprop-step-error-shift.php",
        "description": "Sets the sarprop step error shift"
    },
    {
        "name": "fann_set_sarprop_temperature",
        "url": "function.fann-set-sarprop-temperature.php",
        "description": "Sets the sarprop temperature"
    },
    {
        "name": "fann_set_scaling_params",
        "url": "function.fann-set-scaling-params.php",
        "description": "Calculate input and output scaling parameters for future use based on training data"
    },
    {
        "name": "fann_set_train_error_function",
        "url": "function.fann-set-train-error-function.php",
        "description": "Sets the error function used during training"
    },
    {
        "name": "fann_set_weight",
        "url": "function.fann-set-weight.php",
        "description": "Set a connection in the network"
    },
    {
        "name": "fann_shuffle_train_data",
        "url": "function.fann-shuffle-train-data.php",
        "description": "Shuffles training data, randomizing the order"
    },
    {
        "name": "fann_test",
        "url": "function.fann-test.php",
        "description": "Test with a set of inputs, and a set of desired outputs"
    },
    {
        "name": "fann_train",
        "url": "function.fann-train.php",
        "description": "Train one iteration with a set of inputs, and a set of desired outputs"
    },
    {
        "name": "fann_train_on_data",
        "url": "function.fann-train-on-data.php",
        "description": "Trains on an entire dataset for a period of time"
    },
    {
        "name": "fastcgi_finish_request",
        "url": "function.fastcgi-finish-request.php",
        "description": "Flushes all response data to the client"
    },
    {
        "name": "fbird_affected_rows",
        "url": "function.fbird-affected-rows.php",
        "description": "Alias of ibase_affected_rows"
    },
    {
        "name": "fbird_blob_add",
        "url": "function.fbird-blob-add.php",
        "description": "Alias of ibase_blob_add"
    },
    {
        "name": "fbird_blob_close",
        "url": "function.fbird-blob-close.php",
        "description": "Alias of ibase_blob_close"
    },
    {
        "name": "fbird_blob_echo",
        "url": "function.fbird-blob-echo.php",
        "description": "Alias of ibase_blob_echo"
    },
    {
        "name": "fbird_blob_import",
        "url": "function.fbird-blob-import.php",
        "description": "Alias of ibase_blob_import"
    },
    {
        "name": "fbird_blob_open",
        "url": "function.fbird-blob-open.php",
        "description": "Alias of ibase_blob_open"
    },
    {
        "name": "fbird_commit",
        "url": "function.fbird-commit.php",
        "description": "Alias of ibase_commit"
    },
    {
        "name": "fbird_connect",
        "url": "function.fbird-connect.php",
        "description": "Alias of ibase_connect"
    },
    {
        "name": "fbird_delete_user",
        "url": "function.fbird-delete-user.php",
        "description": "Alias of ibase_delete_user"
    },
    {
        "name": "fbird_errcode",
        "url": "function.fbird-errcode.php",
        "description": "Alias of ibase_errcode"
    },
    {
        "name": "fbird_execute",
        "url": "function.fbird-execute.php",
        "description": "Alias of ibase_execute"
    },
    {
        "name": "fbird_fetch_object",
        "url": "function.fbird-fetch-object.php",
        "description": "Alias of ibase_fetch_object"
    },
    {
        "name": "fbird_field_info",
        "url": "function.fbird-field-info.php",
        "description": "Alias of ibase_field_info"
    },
    {
        "name": "fbird_free_query",
        "url": "function.fbird-free-query.php",
        "description": "Alias of ibase_free_query"
    },
    {
        "name": "fbird_gen_id",
        "url": "function.fbird-gen-id.php",
        "description": "Alias of ibase_gen_id"
    },
    {
        "name": "fbird_modify_user",
        "url": "function.fbird-modify-user.php",
        "description": "Alias of ibase_modify_user"
    },
    {
        "name": "fbird_num_fields",
        "url": "function.fbird-num-fields.php",
        "description": "Alias of ibase_num_fields"
    },
    {
        "name": "fbird_param_info",
        "url": "function.fbird-param-info.php",
        "description": "Alias of ibase_param_info"
    },
    {
        "name": "fbird_prepare",
        "url": "function.fbird-prepare.php",
        "description": "Alias of ibase_prepare"
    },
    {
        "name": "fbird_restore",
        "url": "function.fbird-restore.php",
        "description": "Alias of ibase_restore"
    },
    {
        "name": "fbird_rollback_ret",
        "url": "function.fbird-rollback-ret.php",
        "description": "Alias of ibase_rollback_ret"
    },
    {
        "name": "fbird_service_attach",
        "url": "function.fbird-service-attach.php",
        "description": "Alias of ibase_service_attach"
    },
    {
        "name": "fbird_set_event_handler",
        "url": "function.fbird-set-event-handler.php",
        "description": "Alias of ibase_set_event_handler"
    },
    {
        "name": "fbird_wait_event",
        "url": "function.fbird-wait-event.php",
        "description": "Alias of ibase_wait_event"
    },
    {
        "name": "fdatasync",
        "url": "function.fdatasync.php",
        "description": "Synchronizes data (but not meta-data) to the file"
    },
    {
        "name": "fdf_add_template",
        "url": "function.fdf-add-template.php",
        "description": "Adds a template into the FDF document"
    },
    {
        "name": "fdf_create",
        "url": "function.fdf-create.php",
        "description": "Create a new FDF document"
    },
    {
        "name": "fdf_errno",
        "url": "function.fdf-errno.php",
        "description": "Return error code for last fdf operation"
    },
    {
        "name": "fdf_get_ap",
        "url": "function.fdf-get-ap.php",
        "description": "Get the appearance of a field"
    },
    {
        "name": "fdf_get_encoding",
        "url": "function.fdf-get-encoding.php",
        "description": "Get the value of the \/Encoding key"
    },
    {
        "name": "fdf_get_flags",
        "url": "function.fdf-get-flags.php",
        "description": "Gets the flags of a field"
    },
    {
        "name": "fdf_get_status",
        "url": "function.fdf-get-status.php",
        "description": "Get the value of the \/STATUS key"
    },
    {
        "name": "fdf_get_version",
        "url": "function.fdf-get-version.php",
        "description": "Gets version number for FDF API or file"
    },
    {
        "name": "fdf_next_field_name",
        "url": "function.fdf-next-field-name.php",
        "description": "Get the next field name"
    },
    {
        "name": "fdf_open_string",
        "url": "function.fdf-open-string.php",
        "description": "Read a FDF document from a string"
    },
    {
        "name": "fdf_save",
        "url": "function.fdf-save.php",
        "description": "Save a FDF document"
    },
    {
        "name": "fdf_set_ap",
        "url": "function.fdf-set-ap.php",
        "description": "Set the appearance of a field"
    },
    {
        "name": "fdf_set_file",
        "url": "function.fdf-set-file.php",
        "description": "Set PDF document to display FDF data in"
    },
    {
        "name": "fdf_set_javascript_action",
        "url": "function.fdf-set-javascript-action.php",
        "description": "Sets an javascript action of a field"
    },
    {
        "name": "fdf_set_opt",
        "url": "function.fdf-set-opt.php",
        "description": "Sets an option of a field"
    },
    {
        "name": "fdf_set_submit_form_action",
        "url": "function.fdf-set-submit-form-action.php",
        "description": "Sets a submit form action of a field"
    },
    {
        "name": "fdf_set_value",
        "url": "function.fdf-set-value.php",
        "description": "Set the value of a field"
    },
    {
        "name": "fdiv",
        "url": "function.fdiv.php",
        "description": "Divides two numbers, according to IEEE 754"
    },
    {
        "name": "FFI::addr",
        "url": "ffi.addr.php",
        "description": "Creates an unmanaged pointer to C data"
    },
    {
        "name": "FFI::arrayType",
        "url": "ffi.arraytype.php",
        "description": "Dynamically constructs a new C array type"
    },
    {
        "name": "FFI::cdef",
        "url": "ffi.cdef.php",
        "description": "Creates a new FFI object"
    },
    {
        "name": "FFI::isNull",
        "url": "ffi.isnull.php",
        "description": "Checks whether a FFI\\CData is a null pointer"
    },
    {
        "name": "FFI::memcmp",
        "url": "ffi.memcmp.php",
        "description": "Compares memory areas"
    },
    {
        "name": "FFI::memset",
        "url": "ffi.memset.php",
        "description": "Fills a memory area"
    },
    {
        "name": "FFI::scope",
        "url": "ffi.scope.php",
        "description": "Instantiates an FFI object with C declarations parsed during preloading"
    },
    {
        "name": "FFI::string",
        "url": "ffi.string.php",
        "description": "Creates a PHP string from a memory area"
    },
    {
        "name": "FFI::typeof",
        "url": "ffi.typeof.php",
        "description": "Gets the FFI\\CType of FFI\\CData"
    },
    {
        "name": "FFI\\CType::getArrayElementType",
        "url": "ffi-ctype.getarrayelementtype.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getAttributes",
        "url": "ffi-ctype.getattributes.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getFuncABI",
        "url": "ffi-ctype.getfuncabi.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getFuncParameterType",
        "url": "ffi-ctype.getfuncparametertype.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getKind",
        "url": "ffi-ctype.getkind.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getPointerType",
        "url": "ffi-ctype.getpointertype.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getStructFieldNames",
        "url": "ffi-ctype.getstructfieldnames.php",
        "description": "Description"
    },
    {
        "name": "FFI\\CType::getStructFieldType",
        "url": "ffi-ctype.getstructfieldtype.php",
        "description": "Description"
    },
    {
        "name": "fgetc",
        "url": "function.fgetc.php",
        "description": "Gets character from file pointer"
    },
    {
        "name": "fgets",
        "url": "function.fgets.php",
        "description": "Gets line from file pointer"
    },
    {
        "name": "Fiber::getCurrent",
        "url": "fiber.getcurrent.php",
        "description": "Gets the currently executing Fiber instance"
    },
    {
        "name": "Fiber::isRunning",
        "url": "fiber.isrunning.php",
        "description": "Determines if the fiber is running"
    },
    {
        "name": "Fiber::isSuspended",
        "url": "fiber.issuspended.php",
        "description": "Determines if the fiber is suspended"
    },
    {
        "name": "Fiber::resume",
        "url": "fiber.resume.php",
        "description": "Resumes execution of the fiber with a value"
    },
    {
        "name": "Fiber::suspend",
        "url": "fiber.suspend.php",
        "description": "Suspends execution of the current fiber"
    },
    {
        "name": "Fiber::__construct",
        "url": "fiber.construct.php",
        "description": "Creates a new Fiber instance"
    },
    {
        "name": "file",
        "url": "function.file.php",
        "description": "Reads entire file into an array"
    },
    {
        "name": "fileatime",
        "url": "function.fileatime.php",
        "description": "Gets last access time of file"
    },
    {
        "name": "filegroup",
        "url": "function.filegroup.php",
        "description": "Gets file group"
    },
    {
        "name": "filemtime",
        "url": "function.filemtime.php",
        "description": "Gets file modification time"
    },
    {
        "name": "fileperms",
        "url": "function.fileperms.php",
        "description": "Gets file permissions"
    },
    {
        "name": "FilesystemIterator::current",
        "url": "filesystemiterator.current.php",
        "description": "The current file"
    },
    {
        "name": "FilesystemIterator::key",
        "url": "filesystemiterator.key.php",
        "description": "Retrieve the key for the current file"
    },
    {
        "name": "FilesystemIterator::rewind",
        "url": "filesystemiterator.rewind.php",
        "description": "Rewinds back to the beginning"
    },
    {
        "name": "FilesystemIterator::__construct",
        "url": "filesystemiterator.construct.php",
        "description": "Constructs a new filesystem iterator"
    },
    {
        "name": "file_exists",
        "url": "function.file-exists.php",
        "description": "Checks whether a file or directory exists"
    },
    {
        "name": "file_put_contents",
        "url": "function.file-put-contents.php",
        "description": "Write data to a file"
    },
    {
        "name": "FilterIterator::current",
        "url": "filteriterator.current.php",
        "description": "Get the current element value"
    },
    {
        "name": "FilterIterator::next",
        "url": "filteriterator.next.php",
        "description": "Move the iterator forward"
    },
    {
        "name": "FilterIterator::valid",
        "url": "filteriterator.valid.php",
        "description": "Check whether the current element is valid"
    },
    {
        "name": "filter_has_var",
        "url": "function.filter-has-var.php",
        "description": "Checks if variable of specified type exists"
    },
    {
        "name": "filter_input",
        "url": "function.filter-input.php",
        "description": "Gets a specific external variable by name and optionally filters it"
    },
    {
        "name": "filter_list",
        "url": "function.filter-list.php",
        "description": "Returns a list of all supported filters"
    },
    {
        "name": "filter_var_array",
        "url": "function.filter-var-array.php",
        "description": "Gets multiple variables and optionally filters them"
    },
    {
        "name": "finfo::file",
        "url": "finfo.file.php",
        "description": "Alias of finfo_file()"
    },
    {
        "name": "finfo::__construct",
        "url": "finfo.construct.php",
        "description": "Alias of finfo_open"
    },
    {
        "name": "finfo_open",
        "url": "function.finfo-open.php",
        "description": "Create a new finfo instance"
    },
    {
        "name": "flock",
        "url": "function.flock.php",
        "description": "Portable advisory file locking"
    },
    {
        "name": "flush",
        "url": "function.flush.php",
        "description": "Flush system output buffer"
    },
    {
        "name": "fnmatch",
        "url": "function.fnmatch.php",
        "description": "Match filename against a pattern"
    },
    {
        "name": "forward_static_call",
        "url": "function.forward-static-call.php",
        "description": "Call a static method"
    },
    {
        "name": "fpassthru",
        "url": "function.fpassthru.php",
        "description": "Output all remaining data on a file pointer"
    },
    {
        "name": "fprintf",
        "url": "function.fprintf.php",
        "description": "Write a formatted string to a stream"
    },
    {
        "name": "fputs",
        "url": "function.fputs.php",
        "description": "Alias of fwrite"
    },
    {
        "name": "frenchtojd",
        "url": "function.frenchtojd.php",
        "description": "Converts a date from the French Republican Calendar to a Julian Day Count"
    },
    {
        "name": "fseek",
        "url": "function.fseek.php",
        "description": "Seeks on a file pointer"
    },
    {
        "name": "fstat",
        "url": "function.fstat.php",
        "description": "Gets information about a file using an open file pointer"
    },
    {
        "name": "ftell",
        "url": "function.ftell.php",
        "description": "Returns the current position of the file read\/write pointer"
    },
    {
        "name": "ftp:\/\/",
        "url": "wrappers.ftp.php",
        "description": "Accessing FTP(s) URLs"
    },
    {
        "name": "ftp_alloc",
        "url": "function.ftp-alloc.php",
        "description": "Allocates space for a file to be uploaded"
    },
    {
        "name": "ftp_cdup",
        "url": "function.ftp-cdup.php",
        "description": "Changes to the parent directory"
    },
    {
        "name": "ftp_chmod",
        "url": "function.ftp-chmod.php",
        "description": "Set permissions on a file via FTP"
    },
    {
        "name": "ftp_connect",
        "url": "function.ftp-connect.php",
        "description": "Opens an FTP connection"
    },
    {
        "name": "ftp_exec",
        "url": "function.ftp-exec.php",
        "description": "Requests execution of a command on the FTP server"
    },
    {
        "name": "ftp_fput",
        "url": "function.ftp-fput.php",
        "description": "Uploads from an open file to the FTP server"
    },
    {
        "name": "ftp_get_option",
        "url": "function.ftp-get-option.php",
        "description": "Retrieves various runtime behaviours of the current FTP connection"
    },
    {
        "name": "ftp_mdtm",
        "url": "function.ftp-mdtm.php",
        "description": "Returns the last modified time of the given file"
    },
    {
        "name": "ftp_mlsd",
        "url": "function.ftp-mlsd.php",
        "description": "Returns a list of files in the given directory"
    },
    {
        "name": "ftp_nb_fget",
        "url": "function.ftp-nb-fget.php",
        "description": "Retrieves a file from the FTP server and writes it to an open file (non-blocking)"
    },
    {
        "name": "ftp_nb_get",
        "url": "function.ftp-nb-get.php",
        "description": "Retrieves a file from the FTP server and writes it to a local file (non-blocking)"
    },
    {
        "name": "ftp_nlist",
        "url": "function.ftp-nlist.php",
        "description": "Returns a list of files in the given directory"
    },
    {
        "name": "ftp_put",
        "url": "function.ftp-put.php",
        "description": "Uploads a file to the FTP server"
    },
    {
        "name": "ftp_quit",
        "url": "function.ftp-quit.php",
        "description": "Alias of ftp_close"
    },
    {
        "name": "ftp_rawlist",
        "url": "function.ftp-rawlist.php",
        "description": "Returns a detailed list of files in the given directory"
    },
    {
        "name": "ftp_rmdir",
        "url": "function.ftp-rmdir.php",
        "description": "Removes a directory"
    },
    {
        "name": "ftp_site",
        "url": "function.ftp-site.php",
        "description": "Sends a SITE command to the server"
    },
    {
        "name": "ftp_ssl_connect",
        "url": "function.ftp-ssl-connect.php",
        "description": "Opens a Secure SSL-FTP connection"
    },
    {
        "name": "ftruncate",
        "url": "function.ftruncate.php",
        "description": "Truncates a file to a given length"
    },
    {
        "name": "func_get_arg",
        "url": "function.func-get-arg.php",
        "description": "Return an item from the argument list"
    },
    {
        "name": "func_num_args",
        "url": "function.func-num-args.php",
        "description": "Returns the number of arguments passed to the function"
    },
    {
        "name": "gc_collect_cycles",
        "url": "function.gc-collect-cycles.php",
        "description": "Forces collection of any existing garbage cycles"
    },
    {
        "name": "gc_enable",
        "url": "function.gc-enable.php",
        "description": "Activates the circular reference collector"
    },
    {
        "name": "gc_mem_caches",
        "url": "function.gc-mem-caches.php",
        "description": "Reclaims memory used by the Zend Engine memory manager"
    },
    {
        "name": "gd_info",
        "url": "function.gd-info.php",
        "description": "Retrieve information about the currently installed GD library"
    },
    {
        "name": "GearmanClient::addServer",
        "url": "gearmanclient.addserver.php",
        "description": "Add a job server to the client"
    },
    {
        "name": "GearmanClient::addTask",
        "url": "gearmanclient.addtask.php",
        "description": "Add a task to be run in parallel"
    },
    {
        "name": "GearmanClient::addTaskHigh",
        "url": "gearmanclient.addtaskhigh.php",
        "description": "Add a high priority task to run in parallel"
    },
    {
        "name": "GearmanClient::addTaskLow",
        "url": "gearmanclient.addtasklow.php",
        "description": "Add a low priority task to run in parallel"
    },
    {
        "name": "GearmanClient::addTaskStatus",
        "url": "gearmanclient.addtaskstatus.php",
        "description": "Add a task to get status"
    },
    {
        "name": "GearmanClient::clone",
        "url": "gearmanclient.clone.php",
        "description": "Create a copy of a GearmanClient object"
    },
    {
        "name": "GearmanClient::data",
        "url": "gearmanclient.data.php",
        "description": "Get the application data (deprecated)"
    },
    {
        "name": "GearmanClient::doBackground",
        "url": "gearmanclient.dobackground.php",
        "description": "Run a task in the background"
    },
    {
        "name": "GearmanClient::doHighBackground",
        "url": "gearmanclient.dohighbackground.php",
        "description": "Run a high priority task in the background"
    },
    {
        "name": "GearmanClient::doLow",
        "url": "gearmanclient.dolow.php",
        "description": "Run a single low priority task"
    },
    {
        "name": "GearmanClient::doNormal",
        "url": "gearmanclient.donormal.php",
        "description": "Run a single task and return a result"
    },
    {
        "name": "GearmanClient::echo",
        "url": "gearmanclient.echo.php",
        "description": "Send data to all job servers to see if they echo it back [deprecated]"
    },
    {
        "name": "GearmanClient::getErrno",
        "url": "gearmanclient.geterrno.php",
        "description": "Get an errno value"
    },
    {
        "name": "GearmanClient::ping",
        "url": "gearmanclient.ping.php",
        "description": "Send data to all job servers to see if they echo it back"
    },
    {
        "name": "GearmanClient::returnCode",
        "url": "gearmanclient.returncode.php",
        "description": "Get the last Gearman return code"
    },
    {
        "name": "GearmanClient::setClientCallback",
        "url": "gearmanclient.setclientcallback.php",
        "description": "Callback function when there is a data packet for a task (deprecated)"
    },
    {
        "name": "GearmanClient::setContext",
        "url": "gearmanclient.setcontext.php",
        "description": "Set application context"
    },
    {
        "name": "GearmanClient::setData",
        "url": "gearmanclient.setdata.php",
        "description": "Set application data (deprecated)"
    },
    {
        "name": "GearmanClient::setExceptionCallback",
        "url": "gearmanclient.setexceptioncallback.php",
        "description": "Set a callback for worker exceptions"
    },
    {
        "name": "GearmanClient::setOptions",
        "url": "gearmanclient.setoptions.php",
        "description": "Set client options"
    },
    {
        "name": "GearmanClient::setTimeout",
        "url": "gearmanclient.settimeout.php",
        "description": "Set socket I\/O activity timeout"
    },
    {
        "name": "GearmanClient::setWorkloadCallback",
        "url": "gearmanclient.setworkloadcallback.php",
        "description": "Set a callback for accepting incremental data updates"
    },
    {
        "name": "GearmanClient::wait",
        "url": "gearmanclient.wait.php",
        "description": "Wait for I\/O activity on all connections in a client"
    },
    {
        "name": "GearmanJob::complete",
        "url": "gearmanjob.complete.php",
        "description": "Send the result and complete status (deprecated)"
    },
    {
        "name": "GearmanJob::exception",
        "url": "gearmanjob.exception.php",
        "description": "Send exception for running job (deprecated)"
    },
    {
        "name": "GearmanJob::functionName",
        "url": "gearmanjob.functionname.php",
        "description": "Get function name"
    },
    {
        "name": "GearmanJob::returnCode",
        "url": "gearmanjob.returncode.php",
        "description": "Get last return code"
    },
    {
        "name": "GearmanJob::sendData",
        "url": "gearmanjob.senddata.php",
        "description": "Send data for a running job"
    },
    {
        "name": "GearmanJob::sendFail",
        "url": "gearmanjob.sendfail.php",
        "description": "Send fail status"
    },
    {
        "name": "GearmanJob::sendWarning",
        "url": "gearmanjob.sendwarning.php",
        "description": "Send a warning"
    },
    {
        "name": "GearmanJob::status",
        "url": "gearmanjob.status.php",
        "description": "Send status (deprecated)"
    },
    {
        "name": "GearmanJob::warning",
        "url": "gearmanjob.warning.php",
        "description": "Send a warning (deprecated)"
    },
    {
        "name": "GearmanJob::workloadSize",
        "url": "gearmanjob.workloadsize.php",
        "description": "Get size of work load"
    },
    {
        "name": "GearmanTask::create",
        "url": "gearmantask.create.php",
        "description": "Create a task (deprecated)"
    },
    {
        "name": "GearmanTask::dataSize",
        "url": "gearmantask.datasize.php",
        "description": "Get the size of returned data"
    },
    {
        "name": "GearmanTask::functionName",
        "url": "gearmantask.functionname.php",
        "description": "Get associated function name"
    },
    {
        "name": "GearmanTask::isRunning",
        "url": "gearmantask.isrunning.php",
        "description": "Test whether the task is currently running"
    },
    {
        "name": "GearmanTask::recvData",
        "url": "gearmantask.recvdata.php",
        "description": "Read work or result data into a buffer for a task"
    },
    {
        "name": "GearmanTask::sendData",
        "url": "gearmantask.senddata.php",
        "description": "Send data for a task (deprecated)"
    },
    {
        "name": "GearmanTask::taskDenominator",
        "url": "gearmantask.taskdenominator.php",
        "description": "Get completion percentage denominator"
    },
    {
        "name": "GearmanTask::unique",
        "url": "gearmantask.unique.php",
        "description": "Get the unique identifier for a task"
    },
    {
        "name": "GearmanTask::__construct",
        "url": "gearmantask.construct.php",
        "description": "Create a GearmanTask instance"
    },
    {
        "name": "GearmanWorker::addOptions",
        "url": "gearmanworker.addoptions.php",
        "description": "Add worker options"
    },
    {
        "name": "GearmanWorker::addServers",
        "url": "gearmanworker.addservers.php",
        "description": "Add job servers"
    },
    {
        "name": "GearmanWorker::echo",
        "url": "gearmanworker.echo.php",
        "description": "Test job server response"
    },
    {
        "name": "GearmanWorker::getErrno",
        "url": "gearmanworker.geterrno.php",
        "description": "Get errno"
    },
    {
        "name": "GearmanWorker::register",
        "url": "gearmanworker.register.php",
        "description": "Register a function with the job server"
    },
    {
        "name": "GearmanWorker::returnCode",
        "url": "gearmanworker.returncode.php",
        "description": "Get last Gearman return code"
    },
    {
        "name": "GearmanWorker::setOptions",
        "url": "gearmanworker.setoptions.php",
        "description": "Set worker options"
    },
    {
        "name": "GearmanWorker::timeout",
        "url": "gearmanworker.timeout.php",
        "description": "Get socket I\/O activity timeout"
    },
    {
        "name": "GearmanWorker::unregisterAll",
        "url": "gearmanworker.unregisterall.php",
        "description": "Unregister all function names with the job servers"
    },
    {
        "name": "GearmanWorker::work",
        "url": "gearmanworker.work.php",
        "description": "Wait for and perform jobs"
    },
    {
        "name": "Gender\\Gender::connect",
        "url": "gender-gender.connect.php",
        "description": "Connect to an external name dictionary"
    },
    {
        "name": "Gender\\Gender::get",
        "url": "gender-gender.get.php",
        "description": "Get gender of a name"
    },
    {
        "name": "Gender\\Gender::similarNames",
        "url": "gender-gender.similarnames.php",
        "description": "Get similar names"
    },
    {
        "name": "Generator::current",
        "url": "generator.current.php",
        "description": "Get the yielded value"
    },
    {
        "name": "Generator::key",
        "url": "generator.key.php",
        "description": "Get the yielded key"
    },
    {
        "name": "Generator::rewind",
        "url": "generator.rewind.php",
        "description": "Rewind the iterator"
    },
    {
        "name": "Generator::throw",
        "url": "generator.throw.php",
        "description": "Throw an exception into the generator"
    },
    {
        "name": "Generator::__wakeup",
        "url": "generator.wakeup.php",
        "description": "Serialize callback"
    },
    {
        "name": "geoip_continent_code_by_name",
        "url": "function.geoip-continent-code-by-name.php",
        "description": "Get the two letter continent code"
    },
    {
        "name": "geoip_country_code_by_name",
        "url": "function.geoip-country-code-by-name.php",
        "description": "Get the two letter country code"
    },
    {
        "name": "geoip_database_info",
        "url": "function.geoip-database-info.php",
        "description": "Get GeoIP Database information"
    },
    {
        "name": "geoip_db_filename",
        "url": "function.geoip-db-filename.php",
        "description": "Returns the filename of the corresponding GeoIP Database"
    },
    {
        "name": "geoip_domain_by_name",
        "url": "function.geoip-domain-by-name.php",
        "description": "Get the second level domain name"
    },
    {
        "name": "geoip_isp_by_name",
        "url": "function.geoip-isp-by-name.php",
        "description": "Get the Internet Service Provider (ISP) name"
    },
    {
        "name": "geoip_org_by_name",
        "url": "function.geoip-org-by-name.php",
        "description": "Get the organization name"
    },
    {
        "name": "geoip_region_by_name",
        "url": "function.geoip-region-by-name.php",
        "description": "Get the country code and region"
    },
    {
        "name": "geoip_setup_custom_directory",
        "url": "function.geoip-setup-custom-directory.php",
        "description": "Set a custom directory for the GeoIP database"
    },
    {
        "name": "getallheaders",
        "url": "function.getallheaders.php",
        "description": "Fetch all HTTP request headers"
    },
    {
        "name": "getdate",
        "url": "function.getdate.php",
        "description": "Get date\/time information"
    },
    {
        "name": "gethostbyaddr",
        "url": "function.gethostbyaddr.php",
        "description": "Get the Internet host name corresponding to a given IP address"
    },
    {
        "name": "gethostbynamel",
        "url": "function.gethostbynamel.php",
        "description": "Get a list of IPv4 addresses corresponding to a given Internet host    name"
    },
    {
        "name": "gethostname",
        "url": "function.gethostname.php",
        "description": "Gets the host name"
    },
    {
        "name": "getimagesizefromstring",
        "url": "function.getimagesizefromstring.php",
        "description": "Get the size of an image from a string"
    },
    {
        "name": "getmxrr",
        "url": "function.getmxrr.php",
        "description": "Get MX records corresponding to a given Internet host name"
    },
    {
        "name": "getmyinode",
        "url": "function.getmyinode.php",
        "description": "Gets the inode of the current script"
    },
    {
        "name": "getmyuid",
        "url": "function.getmyuid.php",
        "description": "Gets PHP script owner's UID"
    },
    {
        "name": "getprotobyname",
        "url": "function.getprotobyname.php",
        "description": "Get protocol number associated with protocol name"
    },
    {
        "name": "getrandmax",
        "url": "function.getrandmax.php",
        "description": "Show largest possible random value"
    },
    {
        "name": "getservbyname",
        "url": "function.getservbyname.php",
        "description": "Get port number associated with an Internet service and protocol"
    },
    {
        "name": "getSession",
        "url": "function.mysql-xdevapi-getsession.php",
        "description": "Connect to a MySQL server"
    },
    {
        "name": "gettimeofday",
        "url": "function.gettimeofday.php",
        "description": "Get current time"
    },
    {
        "name": "get_browser",
        "url": "function.get-browser.php",
        "description": "Tells what the user's browser is capable of"
    },
    {
        "name": "get_cfg_var",
        "url": "function.get-cfg-var.php",
        "description": "Gets the value of a PHP configuration option"
    },
    {
        "name": "get_class_methods",
        "url": "function.get-class-methods.php",
        "description": "Gets the class methods' names"
    },
    {
        "name": "get_current_user",
        "url": "function.get-current-user.php",
        "description": "Gets the name of the owner of the current PHP script"
    },
    {
        "name": "get_declared_classes",
        "url": "function.get-declared-classes.php",
        "description": "Returns an array with the name of the defined classes"
    },
    {
        "name": "get_declared_traits",
        "url": "function.get-declared-traits.php",
        "description": "Returns an array of all declared traits"
    },
    {
        "name": "get_defined_functions",
        "url": "function.get-defined-functions.php",
        "description": "Returns an array of all defined functions"
    },
    {
        "name": "get_extension_funcs",
        "url": "function.get-extension-funcs.php",
        "description": "Returns an array with the names of the functions of a module"
    },
    {
        "name": "get_html_translation_table",
        "url": "function.get-html-translation-table.php",
        "description": "Returns the translation table used by htmlspecialchars and htmlentities"
    },
    {
        "name": "get_include_path",
        "url": "function.get-include-path.php",
        "description": "Gets the current include_path configuration option"
    },
    {
        "name": "get_magic_quotes_gpc",
        "url": "function.get-magic-quotes-gpc.php",
        "description": "Gets the current configuration setting of magic_quotes_gpc"
    },
    {
        "name": "get_mangled_object_vars",
        "url": "function.get-mangled-object-vars.php",
        "description": "Returns an array of mangled object properties"
    },
    {
        "name": "get_object_vars",
        "url": "function.get-object-vars.php",
        "description": "Gets the properties of the given object"
    },
    {
        "name": "get_required_files",
        "url": "function.get-required-files.php",
        "description": "Alias of get_included_files"
    },
    {
        "name": "get_resource_id",
        "url": "function.get-resource-id.php",
        "description": "Returns an integer identifier for the given resource"
    },
    {
        "name": "glob",
        "url": "function.glob.php",
        "description": "Find pathnames matching a pattern"
    },
    {
        "name": "GlobIterator::count",
        "url": "globiterator.count.php",
        "description": "Get the number of directories and files"
    },
    {
        "name": "Gmagick::addimage",
        "url": "gmagick.addimage.php",
        "description": "Adds new image to Gmagick object image list"
    },
    {
        "name": "Gmagick::annotateimage",
        "url": "gmagick.annotateimage.php",
        "description": "Annotates an image with text"
    },
    {
        "name": "Gmagick::borderimage",
        "url": "gmagick.borderimage.php",
        "description": "Surrounds the image with a border"
    },
    {
        "name": "Gmagick::chopimage",
        "url": "gmagick.chopimage.php",
        "description": "Removes a region of an image and trims"
    },
    {
        "name": "Gmagick::commentimage",
        "url": "gmagick.commentimage.php",
        "description": "Adds a comment to your image"
    },
    {
        "name": "Gmagick::cropimage",
        "url": "gmagick.cropimage.php",
        "description": "Extracts a region of the image"
    },
    {
        "name": "Gmagick::current",
        "url": "gmagick.current.php",
        "description": "The current purpose"
    },
    {
        "name": "Gmagick::deconstructimages",
        "url": "gmagick.deconstructimages.php",
        "description": "Returns certain pixel differences between images"
    },
    {
        "name": "Gmagick::destroy",
        "url": "gmagick.destroy.php",
        "description": "The destroy purpose"
    },
    {
        "name": "Gmagick::edgeimage",
        "url": "gmagick.edgeimage.php",
        "description": "Enhance edges within the image"
    },
    {
        "name": "Gmagick::enhanceimage",
        "url": "gmagick.enhanceimage.php",
        "description": "Improves the quality of a noisy image"
    },
    {
        "name": "Gmagick::flipimage",
        "url": "gmagick.flipimage.php",
        "description": "Creates a vertical mirror image"
    },
    {
        "name": "Gmagick::frameimage",
        "url": "gmagick.frameimage.php",
        "description": "Adds a simulated three-dimensional border"
    },
    {
        "name": "Gmagick::getcopyright",
        "url": "gmagick.getcopyright.php",
        "description": "Returns the GraphicsMagick API copyright as a string"
    },
    {
        "name": "Gmagick::getimagebackgroundcolor",
        "url": "gmagick.getimagebackgroundcolor.php",
        "description": "Returns the image background color"
    },
    {
        "name": "Gmagick::getimagebordercolor",
        "url": "gmagick.getimagebordercolor.php",
        "description": "Returns the image border color"
    },
    {
        "name": "Gmagick::getimagecolors",
        "url": "gmagick.getimagecolors.php",
        "description": "Returns the color of the specified colormap index"
    },
    {
        "name": "Gmagick::getimagecompose",
        "url": "gmagick.getimagecompose.php",
        "description": "Returns the composite operator associated with the image"
    },
    {
        "name": "Gmagick::getimagedepth",
        "url": "gmagick.getimagedepth.php",
        "description": "Gets the depth of the image"
    },
    {
        "name": "Gmagick::getimageextrema",
        "url": "gmagick.getimageextrema.php",
        "description": "Gets the extrema for the image"
    },
    {
        "name": "Gmagick::getimageformat",
        "url": "gmagick.getimageformat.php",
        "description": "Returns the format of a particular image in a sequence"
    },
    {
        "name": "Gmagick::getimagegreenprimary",
        "url": "gmagick.getimagegreenprimary.php",
        "description": "Returns the chromaticy green primary point"
    },
    {
        "name": "Gmagick::getimagehistogram",
        "url": "gmagick.getimagehistogram.php",
        "description": "Gets the image histogram"
    },
    {
        "name": "Gmagick::getimageinterlacescheme",
        "url": "gmagick.getimageinterlacescheme.php",
        "description": "Gets the image interlace scheme"
    },
    {
        "name": "Gmagick::getimagematte",
        "url": "gmagick.getimagematte.php",
        "description": "Check if the image has a matte channel"
    },
    {
        "name": "Gmagick::getimageprofile",
        "url": "gmagick.getimageprofile.php",
        "description": "Returns the named image profile"
    },
    {
        "name": "Gmagick::getimagerenderingintent",
        "url": "gmagick.getimagerenderingintent.php",
        "description": "Gets the image rendering intent"
    },
    {
        "name": "Gmagick::getimagescene",
        "url": "gmagick.getimagescene.php",
        "description": "Gets the image scene"
    },
    {
        "name": "Gmagick::getimagetype",
        "url": "gmagick.getimagetype.php",
        "description": "Gets the potential image type"
    },
    {
        "name": "Gmagick::getimagewhitepoint",
        "url": "gmagick.getimagewhitepoint.php",
        "description": "Returns the chromaticity white point"
    },
    {
        "name": "Gmagick::getpackagename",
        "url": "gmagick.getpackagename.php",
        "description": "Returns the GraphicsMagick package name"
    },
    {
        "name": "Gmagick::getreleasedate",
        "url": "gmagick.getreleasedate.php",
        "description": "Returns the GraphicsMagick release date as a string"
    },
    {
        "name": "Gmagick::getsize",
        "url": "gmagick.getsize.php",
        "description": "Returns the size associated with the Gmagick object"
    },
    {
        "name": "Gmagick::hasnextimage",
        "url": "gmagick.hasnextimage.php",
        "description": "Checks if the object has more images"
    },
    {
        "name": "Gmagick::implodeimage",
        "url": "gmagick.implodeimage.php",
        "description": "Creates a new image as a copy"
    },
    {
        "name": "Gmagick::levelimage",
        "url": "gmagick.levelimage.php",
        "description": "Adjusts the levels of an image"
    },
    {
        "name": "Gmagick::mapimage",
        "url": "gmagick.mapimage.php",
        "description": "Replaces the colors of an image with the closest color from a reference image"
    },
    {
        "name": "Gmagick::minifyimage",
        "url": "gmagick.minifyimage.php",
        "description": "Scales an image proportionally to half its size"
    },
    {
        "name": "Gmagick::motionblurimage",
        "url": "gmagick.motionblurimage.php",
        "description": "Simulates motion blur"
    },
    {
        "name": "Gmagick::nextimage",
        "url": "gmagick.nextimage.php",
        "description": "Moves to the next image"
    },
    {
        "name": "Gmagick::oilpaintimage",
        "url": "gmagick.oilpaintimage.php",
        "description": "Simulates an oil painting"
    },
    {
        "name": "Gmagick::profileimage",
        "url": "gmagick.profileimage.php",
        "description": "Adds or removes a profile from an image"
    },
    {
        "name": "Gmagick::quantizeimages",
        "url": "gmagick.quantizeimages.php",
        "description": "The quantizeimages purpose"
    },
    {
        "name": "Gmagick::queryfonts",
        "url": "gmagick.queryfonts.php",
        "description": "Returns the configured fonts"
    },
    {
        "name": "Gmagick::radialblurimage",
        "url": "gmagick.radialblurimage.php",
        "description": "Radial blurs an image"
    },
    {
        "name": "Gmagick::read",
        "url": "gmagick.read.php",
        "description": "Reads image from filename"
    },
    {
        "name": "Gmagick::readimageblob",
        "url": "gmagick.readimageblob.php",
        "description": "Reads image from a binary string"
    },
    {
        "name": "Gmagick::reducenoiseimage",
        "url": "gmagick.reducenoiseimage.php",
        "description": "Smooths the contours of an image"
    },
    {
        "name": "Gmagick::removeimageprofile",
        "url": "gmagick.removeimageprofile.php",
        "description": "Removes the named image profile and returns it"
    },
    {
        "name": "Gmagick::resizeimage",
        "url": "gmagick.resizeimage.php",
        "description": "Scales an image"
    },
    {
        "name": "Gmagick::rotateimage",
        "url": "gmagick.rotateimage.php",
        "description": "Rotates an image"
    },
    {
        "name": "Gmagick::separateimagechannel",
        "url": "gmagick.separateimagechannel.php",
        "description": "Separates a channel from the image"
    },
    {
        "name": "Gmagick::setfilename",
        "url": "gmagick.setfilename.php",
        "description": "Sets the filename before you read or write the image"
    },
    {
        "name": "Gmagick::setimageblueprimary",
        "url": "gmagick.setimageblueprimary.php",
        "description": "Sets the image chromaticity blue primary point"
    },
    {
        "name": "Gmagick::setimagechanneldepth",
        "url": "gmagick.setimagechanneldepth.php",
        "description": "Sets the depth of a particular image channel"
    },
    {
        "name": "Gmagick::setimagecompose",
        "url": "gmagick.setimagecompose.php",
        "description": "Sets the image composite operator"
    },
    {
        "name": "Gmagick::setimagedepth",
        "url": "gmagick.setimagedepth.php",
        "description": "Sets the image depth"
    },
    {
        "name": "Gmagick::setimagefilename",
        "url": "gmagick.setimagefilename.php",
        "description": "Sets the filename of a particular image in a sequence"
    },
    {
        "name": "Gmagick::setimagegamma",
        "url": "gmagick.setimagegamma.php",
        "description": "Sets the image gamma"
    },
    {
        "name": "Gmagick::setimageindex",
        "url": "gmagick.setimageindex.php",
        "description": "Set the iterator to the position in the image list specified with the index parameter"
    },
    {
        "name": "Gmagick::setimageiterations",
        "url": "gmagick.setimageiterations.php",
        "description": "Sets the image iterations"
    },
    {
        "name": "Gmagick::setimageredprimary",
        "url": "gmagick.setimageredprimary.php",
        "description": "Sets the image chromaticity red primary point"
    },
    {
        "name": "Gmagick::setimageresolution",
        "url": "gmagick.setimageresolution.php",
        "description": "Sets the image resolution"
    },
    {
        "name": "Gmagick::setimagetype",
        "url": "gmagick.setimagetype.php",
        "description": "Sets the image type"
    },
    {
        "name": "Gmagick::setimagewhitepoint",
        "url": "gmagick.setimagewhitepoint.php",
        "description": "Sets the image chromaticity white point"
    },
    {
        "name": "Gmagick::setsize",
        "url": "gmagick.setsize.php",
        "description": "Sets the size of the Gmagick object"
    },
    {
        "name": "Gmagick::solarizeimage",
        "url": "gmagick.solarizeimage.php",
        "description": "Applies a solarizing effect to the image"
    },
    {
        "name": "Gmagick::stripimage",
        "url": "gmagick.stripimage.php",
        "description": "Strips an image of all profiles and comments"
    },
    {
        "name": "Gmagick::thumbnailimage",
        "url": "gmagick.thumbnailimage.php",
        "description": "Changes the size of an image"
    },
    {
        "name": "Gmagick::write",
        "url": "gmagick.write.php",
        "description": "Alias of Gmagick::writeimage"
    },
    {
        "name": "Gmagick::__construct",
        "url": "gmagick.construct.php",
        "description": "The Gmagick constructor"
    },
    {
        "name": "GmagickDraw::arc",
        "url": "gmagickdraw.arc.php",
        "description": "Draws an arc"
    },
    {
        "name": "GmagickDraw::ellipse",
        "url": "gmagickdraw.ellipse.php",
        "description": "Draws an ellipse on the image"
    },
    {
        "name": "GmagickDraw::getfillopacity",
        "url": "gmagickdraw.getfillopacity.php",
        "description": "Returns the opacity used when drawing"
    },
    {
        "name": "GmagickDraw::getfontsize",
        "url": "gmagickdraw.getfontsize.php",
        "description": "Returns the font pointsize"
    },
    {
        "name": "GmagickDraw::getfontweight",
        "url": "gmagickdraw.getfontweight.php",
        "description": "Returns the font weight"
    },
    {
        "name": "GmagickDraw::getstrokeopacity",
        "url": "gmagickdraw.getstrokeopacity.php",
        "description": "Returns the opacity of stroked object outlines"
    },
    {
        "name": "GmagickDraw::gettextdecoration",
        "url": "gmagickdraw.gettextdecoration.php",
        "description": "Returns the text decoration"
    },
    {
        "name": "GmagickDraw::line",
        "url": "gmagickdraw.line.php",
        "description": "Draws a line"
    },
    {
        "name": "GmagickDraw::polygon",
        "url": "gmagickdraw.polygon.php",
        "description": "Draws a polygon"
    },
    {
        "name": "GmagickDraw::rectangle",
        "url": "gmagickdraw.rectangle.php",
        "description": "Draws a rectangle"
    },
    {
        "name": "GmagickDraw::roundrectangle",
        "url": "gmagickdraw.roundrectangle.php",
        "description": "Draws a rounded rectangle"
    },
    {
        "name": "GmagickDraw::setfillcolor",
        "url": "gmagickdraw.setfillcolor.php",
        "description": "Sets the fill color to be used for drawing filled objects"
    },
    {
        "name": "GmagickDraw::setfont",
        "url": "gmagickdraw.setfont.php",
        "description": "Sets the fully-specified font to use when annotating with text"
    },
    {
        "name": "GmagickDraw::setfontstyle",
        "url": "gmagickdraw.setfontstyle.php",
        "description": "Sets the font style to use when annotating with text"
    },
    {
        "name": "GmagickDraw::setstrokecolor",
        "url": "gmagickdraw.setstrokecolor.php",
        "description": "Sets the color used for stroking object outlines"
    },
    {
        "name": "GmagickDraw::setstrokewidth",
        "url": "gmagickdraw.setstrokewidth.php",
        "description": "Sets the width of the stroke used to draw object outlines"
    },
    {
        "name": "GmagickDraw::settextencoding",
        "url": "gmagickdraw.settextencoding.php",
        "description": "Specifies the text code set"
    },
    {
        "name": "GmagickPixel::getcolorcount",
        "url": "gmagickpixel.getcolorcount.php",
        "description": "Returns the color count associated with this color"
    },
    {
        "name": "GmagickPixel::setcolor",
        "url": "gmagickpixel.setcolor.php",
        "description": "Sets the color"
    },
    {
        "name": "GmagickPixel::__construct",
        "url": "gmagickpixel.construct.php",
        "description": "The GmagickPixel constructor"
    },
    {
        "name": "gmmktime",
        "url": "function.gmmktime.php",
        "description": "Get Unix timestamp for a GMT date"
    },
    {
        "name": "GMP::__serialize",
        "url": "gmp.serialize.php",
        "description": "Serializes the GMP object"
    },
    {
        "name": "gmp_abs",
        "url": "function.gmp-abs.php",
        "description": "Absolute value"
    },
    {
        "name": "gmp_and",
        "url": "function.gmp-and.php",
        "description": "Bitwise AND"
    },
    {
        "name": "gmp_clrbit",
        "url": "function.gmp-clrbit.php",
        "description": "Clear bit"
    },
    {
        "name": "gmp_com",
        "url": "function.gmp-com.php",
        "description": "Calculates one's complement"
    },
    {
        "name": "gmp_divexact",
        "url": "function.gmp-divexact.php",
        "description": "Exact division of numbers"
    },
    {
        "name": "gmp_div_qr",
        "url": "function.gmp-div-qr.php",
        "description": "Divide numbers and get quotient and remainder"
    },
    {
        "name": "gmp_export",
        "url": "function.gmp-export.php",
        "description": "Export to a binary string"
    },
    {
        "name": "gmp_gcd",
        "url": "function.gmp-gcd.php",
        "description": "Calculate GCD"
    },
    {
        "name": "gmp_hamdist",
        "url": "function.gmp-hamdist.php",
        "description": "Hamming distance"
    },
    {
        "name": "gmp_init",
        "url": "function.gmp-init.php",
        "description": "Create GMP number"
    },
    {
        "name": "gmp_invert",
        "url": "function.gmp-invert.php",
        "description": "Inverse by modulo"
    },
    {
        "name": "gmp_kronecker",
        "url": "function.gmp-kronecker.php",
        "description": "Kronecker symbol"
    },
    {
        "name": "gmp_legendre",
        "url": "function.gmp-legendre.php",
        "description": "Legendre symbol"
    },
    {
        "name": "gmp_mul",
        "url": "function.gmp-mul.php",
        "description": "Multiply numbers"
    },
    {
        "name": "gmp_nextprime",
        "url": "function.gmp-nextprime.php",
        "description": "Find next prime number"
    },
    {
        "name": "gmp_perfect_power",
        "url": "function.gmp-perfect-power.php",
        "description": "Perfect power check"
    },
    {
        "name": "gmp_popcount",
        "url": "function.gmp-popcount.php",
        "description": "Population count"
    },
    {
        "name": "gmp_powm",
        "url": "function.gmp-powm.php",
        "description": "Raise number into power with modulo"
    },
    {
        "name": "gmp_random",
        "url": "function.gmp-random.php",
        "description": "Random number"
    },
    {
        "name": "gmp_random_range",
        "url": "function.gmp-random-range.php",
        "description": "Get a uniformly selected integer"
    },
    {
        "name": "gmp_root",
        "url": "function.gmp-root.php",
        "description": "Take the integer part of nth root"
    },
    {
        "name": "gmp_scan0",
        "url": "function.gmp-scan0.php",
        "description": "Scan for 0"
    },
    {
        "name": "gmp_setbit",
        "url": "function.gmp-setbit.php",
        "description": "Set bit"
    },
    {
        "name": "gmp_sqrt",
        "url": "function.gmp-sqrt.php",
        "description": "Calculate square root"
    },
    {
        "name": "gmp_strval",
        "url": "function.gmp-strval.php",
        "description": "Convert GMP number to string"
    },
    {
        "name": "gmp_testbit",
        "url": "function.gmp-testbit.php",
        "description": "Tests if a bit is set"
    },
    {
        "name": "gmstrftime",
        "url": "function.gmstrftime.php",
        "description": "Format a GMT\/UTC time\/date according to locale settings"
    },
    {
        "name": "gnupg_addencryptkey",
        "url": "function.gnupg-addencryptkey.php",
        "description": "Add a key for encryption"
    },
    {
        "name": "gnupg_cleardecryptkeys",
        "url": "function.gnupg-cleardecryptkeys.php",
        "description": "Removes all keys which were set for decryption before"
    },
    {
        "name": "gnupg_clearsignkeys",
        "url": "function.gnupg-clearsignkeys.php",
        "description": "Removes all keys which were set for signing before"
    },
    {
        "name": "gnupg_decryptverify",
        "url": "function.gnupg-decryptverify.php",
        "description": "Decrypts and verifies a given text"
    },
    {
        "name": "gnupg_encrypt",
        "url": "function.gnupg-encrypt.php",
        "description": "Encrypts a given text"
    },
    {
        "name": "gnupg_export",
        "url": "function.gnupg-export.php",
        "description": "Exports a key"
    },
    {
        "name": "gnupg_geterror",
        "url": "function.gnupg-geterror.php",
        "description": "Returns the errortext, if a function fails"
    },
    {
        "name": "gnupg_getprotocol",
        "url": "function.gnupg-getprotocol.php",
        "description": "Returns the currently active protocol for all operations"
    },
    {
        "name": "gnupg_import",
        "url": "function.gnupg-import.php",
        "description": "Imports a key"
    },
    {
        "name": "gnupg_keyinfo",
        "url": "function.gnupg-keyinfo.php",
        "description": "Returns an array with information about all keys that matches the given pattern"
    },
    {
        "name": "gnupg_setarmor",
        "url": "function.gnupg-setarmor.php",
        "description": "Toggle armored output"
    },
    {
        "name": "gnupg_setsignmode",
        "url": "function.gnupg-setsignmode.php",
        "description": "Sets the mode for signing"
    },
    {
        "name": "gnupg_verify",
        "url": "function.gnupg-verify.php",
        "description": "Verifies a signed text"
    },
    {
        "name": "grapheme_stripos",
        "url": "function.grapheme-stripos.php",
        "description": "Find position (in grapheme units) of first occurrence of a case-insensitive string"
    },
    {
        "name": "grapheme_strlen",
        "url": "function.grapheme-strlen.php",
        "description": "Get string length in grapheme units"
    },
    {
        "name": "grapheme_strripos",
        "url": "function.grapheme-strripos.php",
        "description": "Find position (in grapheme units) of last occurrence of a case-insensitive string"
    },
    {
        "name": "grapheme_strstr",
        "url": "function.grapheme-strstr.php",
        "description": "Returns part of haystack string from the first occurrence of needle to the end of haystack"
    },
    {
        "name": "gregoriantojd",
        "url": "function.gregoriantojd.php",
        "description": "Converts a Gregorian date to Julian Day Count"
    },
    {
        "name": "gzcompress",
        "url": "function.gzcompress.php",
        "description": "Compress a string"
    },
    {
        "name": "gzdeflate",
        "url": "function.gzdeflate.php",
        "description": "Deflate a string"
    },
    {
        "name": "gzeof",
        "url": "function.gzeof.php",
        "description": "Test for EOF on a gz-file pointer"
    },
    {
        "name": "gzgetc",
        "url": "function.gzgetc.php",
        "description": "Get character from gz-file pointer"
    },
    {
        "name": "gzgetss",
        "url": "function.gzgetss.php",
        "description": "Get line from gz-file pointer and strip HTML tags"
    },
    {
        "name": "gzopen",
        "url": "function.gzopen.php",
        "description": "Open gz-file"
    },
    {
        "name": "gzputs",
        "url": "function.gzputs.php",
        "description": "Alias of gzwrite"
    },
    {
        "name": "gzrewind",
        "url": "function.gzrewind.php",
        "description": "Rewind the position of a gz-file pointer"
    },
    {
        "name": "gztell",
        "url": "function.gztell.php",
        "description": "Tell gz-file pointer read\/write position"
    },
    {
        "name": "gzwrite",
        "url": "function.gzwrite.php",
        "description": "Binary-safe gz-file write"
    },
    {
        "name": "hash",
        "url": "function.hash.php",
        "description": "Generate a hash value (message digest)"
    },
    {
        "name": "HashContext::__serialize",
        "url": "hashcontext.serialize.php",
        "description": "Serializes the HashContext object"
    },
    {
        "name": "hash_algos",
        "url": "function.hash-algos.php",
        "description": "Return a list of registered hashing algorithms"
    },
    {
        "name": "hash_equals",
        "url": "function.hash-equals.php",
        "description": "Timing attack safe string comparison"
    },
    {
        "name": "hash_final",
        "url": "function.hash-final.php",
        "description": "Finalize an incremental hash and return resulting digest"
    },
    {
        "name": "hash_hmac",
        "url": "function.hash-hmac.php",
        "description": "Generate a keyed hash value using the HMAC method"
    },
    {
        "name": "hash_hmac_file",
        "url": "function.hash-hmac-file.php",
        "description": "Generate a keyed hash value using the HMAC method and the contents of a given file"
    },
    {
        "name": "hash_pbkdf2",
        "url": "function.hash-pbkdf2.php",
        "description": "Generate a PBKDF2 key derivation of a supplied password"
    },
    {
        "name": "hash_update_file",
        "url": "function.hash-update-file.php",
        "description": "Pump data into an active hashing context from a file"
    },
    {
        "name": "header",
        "url": "function.header.php",
        "description": "Send a raw HTTP header"
    },
    {
        "name": "headers_sent",
        "url": "function.headers-sent.php",
        "description": "Checks if or where headers have been sent"
    },
    {
        "name": "header_remove",
        "url": "function.header-remove.php",
        "description": "Remove previously set headers"
    },
    {
        "name": "hebrevc",
        "url": "function.hebrevc.php",
        "description": "Convert logical Hebrew text to visual text with newline conversion"
    },
    {
        "name": "hexdec",
        "url": "function.hexdec.php",
        "description": "Hexadecimal to decimal"
    },
    {
        "name": "highlight_string",
        "url": "function.highlight-string.php",
        "description": "Syntax highlighting of a string"
    },
    {
        "name": "HRTime\\PerformanceCounter::getFrequency",
        "url": "hrtime-performancecounter.getfrequency.php",
        "description": "Timer frequency in ticks per second"
    },
    {
        "name": "HRTime\\PerformanceCounter::getTicksSince",
        "url": "hrtime-performancecounter.gettickssince.php",
        "description": "Ticks elapsed since the given value"
    },
    {
        "name": "HRTime\\StopWatch::getElapsedTime",
        "url": "hrtime-stopwatch.getelapsedtime.php",
        "description": "Get elapsed time for all intervals"
    },
    {
        "name": "HRTime\\StopWatch::getLastElapsedTime",
        "url": "hrtime-stopwatch.getlastelapsedtime.php",
        "description": "Get elapsed time for the last interval"
    },
    {
        "name": "HRTime\\StopWatch::start",
        "url": "hrtime-stopwatch.start.php",
        "description": "Start time measurement"
    },
    {
        "name": "htmlentities",
        "url": "function.htmlentities.php",
        "description": "Convert all applicable characters to HTML entities"
    },
    {
        "name": "htmlspecialchars_decode",
        "url": "function.htmlspecialchars-decode.php",
        "description": "Convert special HTML entities back to characters"
    },
    {
        "name": "http:\/\/",
        "url": "wrappers.http.php",
        "description": "Accessing HTTP(s) URLs"
    },
    {
        "name": "http_build_query",
        "url": "function.http-build-query.php",
        "description": "Generate URL-encoded query string"
    },
    {
        "name": "hypot",
        "url": "function.hypot.php",
        "description": "Calculate the length of the hypotenuse of a right-angle triangle"
    },
    {
        "name": "ibase_add_user",
        "url": "function.ibase-add-user.php",
        "description": "Add a user to a security database"
    },
    {
        "name": "ibase_backup",
        "url": "function.ibase-backup.php",
        "description": "Initiates a backup task in the service manager and returns immediately"
    },
    {
        "name": "ibase_blob_cancel",
        "url": "function.ibase-blob-cancel.php",
        "description": "Cancel creating blob"
    },
    {
        "name": "ibase_blob_create",
        "url": "function.ibase-blob-create.php",
        "description": "Create a new blob for adding data"
    },
    {
        "name": "ibase_blob_get",
        "url": "function.ibase-blob-get.php",
        "description": "Get len bytes data from open blob"
    },
    {
        "name": "ibase_blob_info",
        "url": "function.ibase-blob-info.php",
        "description": "Return blob length and other useful info"
    },
    {
        "name": "ibase_close",
        "url": "function.ibase-close.php",
        "description": "Close a connection to an InterBase database"
    },
    {
        "name": "ibase_commit_ret",
        "url": "function.ibase-commit-ret.php",
        "description": "Commit a transaction without closing it"
    },
    {
        "name": "ibase_db_info",
        "url": "function.ibase-db-info.php",
        "description": "Request statistics about a database"
    },
    {
        "name": "ibase_drop_db",
        "url": "function.ibase-drop-db.php",
        "description": "Drops a database"
    },
    {
        "name": "ibase_errmsg",
        "url": "function.ibase-errmsg.php",
        "description": "Return error messages"
    },
    {
        "name": "ibase_fetch_assoc",
        "url": "function.ibase-fetch-assoc.php",
        "description": "Fetch a result row from a query as an associative array"
    },
    {
        "name": "ibase_fetch_row",
        "url": "function.ibase-fetch-row.php",
        "description": "Fetch a row from an InterBase database"
    },
    {
        "name": "ibase_free_event_handler",
        "url": "function.ibase-free-event-handler.php",
        "description": "Cancels a registered event handler"
    },
    {
        "name": "ibase_free_result",
        "url": "function.ibase-free-result.php",
        "description": "Free a result set"
    },
    {
        "name": "ibase_maintain_db",
        "url": "function.ibase-maintain-db.php",
        "description": "Execute a maintenance command on the database server"
    },
    {
        "name": "ibase_name_result",
        "url": "function.ibase-name-result.php",
        "description": "Assigns a name to a result set"
    },
    {
        "name": "ibase_num_params",
        "url": "function.ibase-num-params.php",
        "description": "Return the number of parameters in a prepared query"
    },
    {
        "name": "ibase_pconnect",
        "url": "function.ibase-pconnect.php",
        "description": "Open a persistent connection to an InterBase database"
    },
    {
        "name": "ibase_query",
        "url": "function.ibase-query.php",
        "description": "Execute a query on an InterBase database"
    },
    {
        "name": "ibase_rollback",
        "url": "function.ibase-rollback.php",
        "description": "Roll back a transaction"
    },
    {
        "name": "ibase_server_info",
        "url": "function.ibase-server-info.php",
        "description": "Request information about a database server"
    },
    {
        "name": "ibase_service_detach",
        "url": "function.ibase-service-detach.php",
        "description": "Disconnect from the service manager"
    },
    {
        "name": "ibase_trans",
        "url": "function.ibase-trans.php",
        "description": "Begin a transaction"
    },
    {
        "name": "iconv",
        "url": "function.iconv.php",
        "description": "Convert a string from one character encoding to another"
    },
    {
        "name": "iconv_mime_decode",
        "url": "function.iconv-mime-decode.php",
        "description": "Decodes a MIME header field"
    },
    {
        "name": "iconv_mime_encode",
        "url": "function.iconv-mime-encode.php",
        "description": "Composes a MIME header field"
    },
    {
        "name": "iconv_strlen",
        "url": "function.iconv-strlen.php",
        "description": "Returns the character count of string"
    },
    {
        "name": "iconv_strrpos",
        "url": "function.iconv-strrpos.php",
        "description": "Finds the last occurrence of a needle within a haystack"
    },
    {
        "name": "idate",
        "url": "function.idate.php",
        "description": "Format a local time\/date part as integer"
    },
    {
        "name": "idn_to_utf8",
        "url": "function.idn-to-utf8.php",
        "description": "Convert domain name from IDNA ASCII to Unicode"
    },
    {
        "name": "igbinary_unserialize",
        "url": "function.igbinary-unserialize.php",
        "description": "Creates a PHP value from a stored representation from igbinary_serialize"
    },
    {
        "name": "image2wbmp",
        "url": "function.image2wbmp.php",
        "description": "Output image to browser or file"
    },
    {
        "name": "imageaffinematrixconcat",
        "url": "function.imageaffinematrixconcat.php",
        "description": "Concatenate two affine transformation matrices"
    },
    {
        "name": "imagealphablending",
        "url": "function.imagealphablending.php",
        "description": "Set the blending mode for an image"
    },
    {
        "name": "imagearc",
        "url": "function.imagearc.php",
        "description": "Draws an arc"
    },
    {
        "name": "imagebmp",
        "url": "function.imagebmp.php",
        "description": "Output a BMP image to browser or file"
    },
    {
        "name": "imagecharup",
        "url": "function.imagecharup.php",
        "description": "Draw a character vertically"
    },
    {
        "name": "imagecolorallocatealpha",
        "url": "function.imagecolorallocatealpha.php",
        "description": "Allocate a color for an image"
    },
    {
        "name": "imagecolorclosest",
        "url": "function.imagecolorclosest.php",
        "description": "Get the index of the closest color to the specified color"
    },
    {
        "name": "imagecolorclosesthwb",
        "url": "function.imagecolorclosesthwb.php",
        "description": "Get the index of the color which has the hue, white and blackness"
    },
    {
        "name": "imagecolorexact",
        "url": "function.imagecolorexact.php",
        "description": "Get the index of the specified color"
    },
    {
        "name": "imagecolormatch",
        "url": "function.imagecolormatch.php",
        "description": "Makes the colors of the palette version of an image more closely match the true color version"
    },
    {
        "name": "imagecolorresolvealpha",
        "url": "function.imagecolorresolvealpha.php",
        "description": "Get the index of the specified color + alpha or its closest possible alternative"
    },
    {
        "name": "imagecolorsforindex",
        "url": "function.imagecolorsforindex.php",
        "description": "Get the colors for an index"
    },
    {
        "name": "imagecolortransparent",
        "url": "function.imagecolortransparent.php",
        "description": "Define a color as transparent"
    },
    {
        "name": "imagecopy",
        "url": "function.imagecopy.php",
        "description": "Copy part of an image"
    },
    {
        "name": "imagecopymergegray",
        "url": "function.imagecopymergegray.php",
        "description": "Copy and merge part of an image with gray scale"
    },
    {
        "name": "imagecopyresized",
        "url": "function.imagecopyresized.php",
        "description": "Copy and resize part of an image"
    },
    {
        "name": "imagecreatefromavif",
        "url": "function.imagecreatefromavif.php",
        "description": "Create a new image from file or URL"
    },
    {
        "name": "imagecreatefromgd",
        "url": "function.imagecreatefromgd.php",
        "description": "Create a new image from GD file or URL"
    },
    {
        "name": "imagecreatefromgd2part",
        "url": "function.imagecreatefromgd2part.php",
        "description": "Create a new image from a given part of GD2 file or URL"
    },
    {
        "name": "imagecreatefromjpeg",
        "url": "function.imagecreatefromjpeg.php",
        "description": "Create a new image from file or URL"
    },
    {
        "name": "imagecreatefromstring",
        "url": "function.imagecreatefromstring.php",
        "description": "Create a new image from the image stream in the string"
    },
    {
        "name": "imagecreatefromwbmp",
        "url": "function.imagecreatefromwbmp.php",
        "description": "Create a new image from file or URL"
    },
    {
        "name": "imagecreatefromxbm",
        "url": "function.imagecreatefromxbm.php",
        "description": "Create a new image from file or URL"
    },
    {
        "name": "imagecreatetruecolor",
        "url": "function.imagecreatetruecolor.php",
        "description": "Create a new true color image"
    },
    {
        "name": "imagecropauto",
        "url": "function.imagecropauto.php",
        "description": "Crop an image automatically using one of the available modes"
    },
    {
        "name": "imagedestroy",
        "url": "function.imagedestroy.php",
        "description": "Destroy an image"
    },
    {
        "name": "imagefill",
        "url": "function.imagefill.php",
        "description": "Flood fill"
    },
    {
        "name": "imagefilledellipse",
        "url": "function.imagefilledellipse.php",
        "description": "Draw a filled ellipse"
    },
    {
        "name": "imagefilledrectangle",
        "url": "function.imagefilledrectangle.php",
        "description": "Draw a filled rectangle"
    },
    {
        "name": "imagefilter",
        "url": "function.imagefilter.php",
        "description": "Applies a filter to an image"
    },
    {
        "name": "imagefontheight",
        "url": "function.imagefontheight.php",
        "description": "Get font height"
    },
    {
        "name": "imageftbbox",
        "url": "function.imageftbbox.php",
        "description": "Give the bounding box of a text using fonts via freetype2"
    },
    {
        "name": "imagegammacorrect",
        "url": "function.imagegammacorrect.php",
        "description": "Apply a gamma correction to a GD image"
    },
    {
        "name": "imagegd2",
        "url": "function.imagegd2.php",
        "description": "Output GD2 image to browser or file"
    },
    {
        "name": "imagegetinterpolation",
        "url": "function.imagegetinterpolation.php",
        "description": "Get the interpolation method"
    },
    {
        "name": "imagegrabscreen",
        "url": "function.imagegrabscreen.php",
        "description": "Captures the whole screen"
    },
    {
        "name": "imageinterlace",
        "url": "function.imageinterlace.php",
        "description": "Enable or disable interlace"
    },
    {
        "name": "imagejpeg",
        "url": "function.imagejpeg.php",
        "description": "Output image to browser or file"
    },
    {
        "name": "imageline",
        "url": "function.imageline.php",
        "description": "Draw a line"
    },
    {
        "name": "imageopenpolygon",
        "url": "function.imageopenpolygon.php",
        "description": "Draws an open polygon"
    },
    {
        "name": "imagepalettetotruecolor",
        "url": "function.imagepalettetotruecolor.php",
        "description": "Converts a palette based image to true color"
    },
    {
        "name": "imagepolygon",
        "url": "function.imagepolygon.php",
        "description": "Draws a polygon"
    },
    {
        "name": "imageresolution",
        "url": "function.imageresolution.php",
        "description": "Get or set the resolution of the image"
    },
    {
        "name": "imagesavealpha",
        "url": "function.imagesavealpha.php",
        "description": "Whether to retain full alpha channel information when saving images"
    },
    {
        "name": "imagesetbrush",
        "url": "function.imagesetbrush.php",
        "description": "Set the brush image for line drawing"
    },
    {
        "name": "imagesetinterpolation",
        "url": "function.imagesetinterpolation.php",
        "description": "Set the interpolation method"
    },
    {
        "name": "imagesetstyle",
        "url": "function.imagesetstyle.php",
        "description": "Set the style for line drawing"
    },
    {
        "name": "imagesettile",
        "url": "function.imagesettile.php",
        "description": "Set the tile image for filling"
    },
    {
        "name": "imagestringup",
        "url": "function.imagestringup.php",
        "description": "Draw a string vertically"
    },
    {
        "name": "imagesy",
        "url": "function.imagesy.php",
        "description": "Get image height"
    },
    {
        "name": "imagettfbbox",
        "url": "function.imagettfbbox.php",
        "description": "Give the bounding box of a text using TrueType fonts"
    },
    {
        "name": "imagetypes",
        "url": "function.imagetypes.php",
        "description": "Return the image types supported by this PHP build"
    },
    {
        "name": "imagewebp",
        "url": "function.imagewebp.php",
        "description": "Output a WebP image to browser or file"
    },
    {
        "name": "image_type_to_extension",
        "url": "function.image-type-to-extension.php",
        "description": "Get file extension for image type"
    },
    {
        "name": "Imagick::adaptiveBlurImage",
        "url": "imagick.adaptiveblurimage.php",
        "description": "Adds adaptive blur filter to image"
    },
    {
        "name": "Imagick::adaptiveSharpenImage",
        "url": "imagick.adaptivesharpenimage.php",
        "description": "Adaptively sharpen the image"
    },
    {
        "name": "Imagick::addImage",
        "url": "imagick.addimage.php",
        "description": "Adds new image to Imagick object image list"
    },
    {
        "name": "Imagick::affineTransformImage",
        "url": "imagick.affinetransformimage.php",
        "description": "Transforms an image"
    },
    {
        "name": "Imagick::annotateImage",
        "url": "imagick.annotateimage.php",
        "description": "Annotates an image with text"
    },
    {
        "name": "Imagick::autoLevelImage",
        "url": "imagick.autolevelimage.php",
        "description": "Adjusts the levels of a particular image channel"
    },
    {
        "name": "Imagick::blackThresholdImage",
        "url": "imagick.blackthresholdimage.php",
        "description": "Forces all pixels below the threshold into black"
    },
    {
        "name": "Imagick::blurImage",
        "url": "imagick.blurimage.php",
        "description": "Adds blur filter to image"
    },
    {
        "name": "Imagick::brightnessContrastImage",
        "url": "imagick.brightnesscontrastimage.php",
        "description": "Change the brightness and\/or contrast of an image"
    },
    {
        "name": "Imagick::chopImage",
        "url": "imagick.chopimage.php",
        "description": "Removes a region of an image and trims"
    },
    {
        "name": "Imagick::clear",
        "url": "imagick.clear.php",
        "description": "Clears all resources associated to Imagick object"
    },
    {
        "name": "Imagick::clipImagePath",
        "url": "imagick.clipimagepath.php",
        "description": "Clips along the named paths from the 8BIM profile, if present"
    },
    {
        "name": "Imagick::clone",
        "url": "imagick.clone.php",
        "description": "Makes an exact copy of the Imagick object"
    },
    {
        "name": "Imagick::coalesceImages",
        "url": "imagick.coalesceimages.php",
        "description": "Composites a set of images"
    },
    {
        "name": "Imagick::colorizeImage",
        "url": "imagick.colorizeimage.php",
        "description": "Blends the fill color with the image"
    },
    {
        "name": "Imagick::combineImages",
        "url": "imagick.combineimages.php",
        "description": "Combines one or more images into a single image"
    },
    {
        "name": "Imagick::compareImageChannels",
        "url": "imagick.compareimagechannels.php",
        "description": "Returns the difference in one or more images"
    },
    {
        "name": "Imagick::compareImages",
        "url": "imagick.compareimages.php",
        "description": "Compares an image to a reconstructed image"
    },
    {
        "name": "Imagick::contrastImage",
        "url": "imagick.contrastimage.php",
        "description": "Change the contrast of the image"
    },
    {
        "name": "Imagick::convolveImage",
        "url": "imagick.convolveimage.php",
        "description": "Applies a custom convolution kernel to the image"
    },
    {
        "name": "Imagick::cropImage",
        "url": "imagick.cropimage.php",
        "description": "Extracts a region of the image"
    },
    {
        "name": "Imagick::current",
        "url": "imagick.current.php",
        "description": "Returns a reference to the current Imagick object"
    },
    {
        "name": "Imagick::decipherImage",
        "url": "imagick.decipherimage.php",
        "description": "Deciphers an image"
    },
    {
        "name": "Imagick::deleteImageArtifact",
        "url": "imagick.deleteimageartifact.php",
        "description": "Delete image artifact"
    },
    {
        "name": "Imagick::deskewImage",
        "url": "imagick.deskewimage.php",
        "description": "Removes skew from the image"
    },
    {
        "name": "Imagick::destroy",
        "url": "imagick.destroy.php",
        "description": "Destroys the Imagick object"
    },
    {
        "name": "Imagick::displayImages",
        "url": "imagick.displayimages.php",
        "description": "Displays an image or image sequence"
    },
    {
        "name": "Imagick::drawImage",
        "url": "imagick.drawimage.php",
        "description": "Renders the ImagickDraw object on the current image"
    },
    {
        "name": "Imagick::embossImage",
        "url": "imagick.embossimage.php",
        "description": "Returns a grayscale image with a three-dimensional effect"
    },
    {
        "name": "Imagick::enhanceImage",
        "url": "imagick.enhanceimage.php",
        "description": "Improves the quality of a noisy image"
    },
    {
        "name": "Imagick::evaluateImage",
        "url": "imagick.evaluateimage.php",
        "description": "Applies an expression to an image"
    },
    {
        "name": "Imagick::extentImage",
        "url": "imagick.extentimage.php",
        "description": "Set image size"
    },
    {
        "name": "Imagick::flattenImages",
        "url": "imagick.flattenimages.php",
        "description": "Merges a sequence of images"
    },
    {
        "name": "Imagick::floodFillPaintImage",
        "url": "imagick.floodfillpaintimage.php",
        "description": "Changes the color value of any pixel that matches target"
    },
    {
        "name": "Imagick::forwardFourierTransformImage",
        "url": "imagick.forwardfouriertransformimage.php",
        "description": "Implements the discrete Fourier transform (DFT)"
    },
    {
        "name": "Imagick::functionImage",
        "url": "imagick.functionimage.php",
        "description": "Applies a function on the image"
    },
    {
        "name": "Imagick::gammaImage",
        "url": "imagick.gammaimage.php",
        "description": "Gamma-corrects an image"
    },
    {
        "name": "Imagick::getColorspace",
        "url": "imagick.getcolorspace.php",
        "description": "Gets the colorspace"
    },
    {
        "name": "Imagick::getCompressionQuality",
        "url": "imagick.getcompressionquality.php",
        "description": "Gets the object compression quality"
    },
    {
        "name": "Imagick::getFilename",
        "url": "imagick.getfilename.php",
        "description": "The filename associated with an image sequence"
    },
    {
        "name": "Imagick::getFormat",
        "url": "imagick.getformat.php",
        "description": "Returns the format of the Imagick object"
    },
    {
        "name": "Imagick::getHomeURL",
        "url": "imagick.gethomeurl.php",
        "description": "Returns the ImageMagick home URL"
    },
    {
        "name": "Imagick::getImageAlphaChannel",
        "url": "imagick.getimagealphachannel.php",
        "description": "Checks if the image has an alpha channel"
    },
    {
        "name": "Imagick::getImageAttribute",
        "url": "imagick.getimageattribute.php",
        "description": "Returns a named attribute"
    },
    {
        "name": "Imagick::getImageBlob",
        "url": "imagick.getimageblob.php",
        "description": "Returns the image sequence as a blob"
    },
    {
        "name": "Imagick::getImageBorderColor",
        "url": "imagick.getimagebordercolor.php",
        "description": "Returns the image border color"
    },
    {
        "name": "Imagick::getImageChannelDistortion",
        "url": "imagick.getimagechanneldistortion.php",
        "description": "Compares image channels of an image to a reconstructed image"
    },
    {
        "name": "Imagick::getImageChannelExtrema",
        "url": "imagick.getimagechannelextrema.php",
        "description": "Gets the extrema for one or more image channels"
    },
    {
        "name": "Imagick::getImageChannelMean",
        "url": "imagick.getimagechannelmean.php",
        "description": "Gets the mean and standard deviation"
    },
    {
        "name": "Imagick::getImageChannelStatistics",
        "url": "imagick.getimagechannelstatistics.php",
        "description": "Returns statistics for each channel in the image"
    },
    {
        "name": "Imagick::getImageColormapColor",
        "url": "imagick.getimagecolormapcolor.php",
        "description": "Returns the color of the specified colormap index"
    },
    {
        "name": "Imagick::getImageColorspace",
        "url": "imagick.getimagecolorspace.php",
        "description": "Gets the image colorspace"
    },
    {
        "name": "Imagick::getImageCompression",
        "url": "imagick.getimagecompression.php",
        "description": "Gets the current image's compression type"
    },
    {
        "name": "Imagick::getImageDelay",
        "url": "imagick.getimagedelay.php",
        "description": "Gets the image delay"
    },
    {
        "name": "Imagick::getImageDispose",
        "url": "imagick.getimagedispose.php",
        "description": "Gets the image disposal method"
    },
    {
        "name": "Imagick::getImageExtrema",
        "url": "imagick.getimageextrema.php",
        "description": "Gets the extrema for the image"
    },
    {
        "name": "Imagick::getImageFormat",
        "url": "imagick.getimageformat.php",
        "description": "Returns the format of a particular image in a sequence"
    },
    {
        "name": "Imagick::getImageGeometry",
        "url": "imagick.getimagegeometry.php",
        "description": "Gets the width and height as an associative array"
    },
    {
        "name": "Imagick::getImageGreenPrimary",
        "url": "imagick.getimagegreenprimary.php",
        "description": "Returns the chromaticy green primary point"
    },
    {
        "name": "Imagick::getImageHistogram",
        "url": "imagick.getimagehistogram.php",
        "description": "Gets the image histogram"
    },
    {
        "name": "Imagick::getImageInterlaceScheme",
        "url": "imagick.getimageinterlacescheme.php",
        "description": "Gets the image interlace scheme"
    },
    {
        "name": "Imagick::getImageIterations",
        "url": "imagick.getimageiterations.php",
        "description": "Gets the image iterations"
    },
    {
        "name": "Imagick::getImageMatte",
        "url": "imagick.getimagematte.php",
        "description": "Return if the image has a matte channel"
    },
    {
        "name": "Imagick::getImageMimeType",
        "url": "imagick.getimagemimetype.php",
        "description": "Returns the image mime-type"
    },
    {
        "name": "Imagick::getImagePage",
        "url": "imagick.getimagepage.php",
        "description": "Returns the page geometry"
    },
    {
        "name": "Imagick::getImageProfile",
        "url": "imagick.getimageprofile.php",
        "description": "Returns the named image profile"
    },
    {
        "name": "Imagick::getImageProperties",
        "url": "imagick.getimageproperties.php",
        "description": "Returns the image properties"
    },
    {
        "name": "Imagick::getImageRedPrimary",
        "url": "imagick.getimageredprimary.php",
        "description": "Returns the chromaticity red primary point"
    },
    {
        "name": "Imagick::getImageRenderingIntent",
        "url": "imagick.getimagerenderingintent.php",
        "description": "Gets the image rendering intent"
    },
    {
        "name": "Imagick::getImagesBlob",
        "url": "imagick.getimagesblob.php",
        "description": "Returns all image sequences as a blob"
    },
    {
        "name": "Imagick::getImageSignature",
        "url": "imagick.getimagesignature.php",
        "description": "Generates an SHA-256 message digest"
    },
    {
        "name": "Imagick::getImageTicksPerSecond",
        "url": "imagick.getimagetickspersecond.php",
        "description": "Gets the image ticks-per-second"
    },
    {
        "name": "Imagick::getImageType",
        "url": "imagick.getimagetype.php",
        "description": "Gets the potential image type"
    },
    {
        "name": "Imagick::getImageVirtualPixelMethod",
        "url": "imagick.getimagevirtualpixelmethod.php",
        "description": "Returns the virtual pixel method"
    },
    {
        "name": "Imagick::getImageWidth",
        "url": "imagick.getimagewidth.php",
        "description": "Returns the image width"
    },
    {
        "name": "Imagick::getIteratorIndex",
        "url": "imagick.getiteratorindex.php",
        "description": "Gets the index of the current active image"
    },
    {
        "name": "Imagick::getOption",
        "url": "imagick.getoption.php",
        "description": "Returns a value associated with the specified key"
    },
    {
        "name": "Imagick::getPage",
        "url": "imagick.getpage.php",
        "description": "Returns the page geometry"
    },
    {
        "name": "Imagick::getPixelRegionIterator",
        "url": "imagick.getpixelregioniterator.php",
        "description": "Get an ImagickPixelIterator for an image section"
    },
    {
        "name": "Imagick::getQuantum",
        "url": "imagick.getquantum.php",
        "description": "Returns the ImageMagick quantum range"
    },
    {
        "name": "Imagick::getQuantumRange",
        "url": "imagick.getquantumrange.php",
        "description": "Returns the Imagick quantum range"
    },
    {
        "name": "Imagick::getReleaseDate",
        "url": "imagick.getreleasedate.php",
        "description": "Returns the ImageMagick release date"
    },
    {
        "name": "Imagick::getResourceLimit",
        "url": "imagick.getresourcelimit.php",
        "description": "Returns the specified resource limit"
    },
    {
        "name": "Imagick::getSize",
        "url": "imagick.getsize.php",
        "description": "Returns the size associated with the Imagick object"
    },
    {
        "name": "Imagick::getVersion",
        "url": "imagick.getversion.php",
        "description": "Returns the ImageMagick API version"
    },
    {
        "name": "Imagick::hasNextImage",
        "url": "imagick.hasnextimage.php",
        "description": "Checks if the object has more images"
    },
    {
        "name": "Imagick::identifyFormat",
        "url": "imagick.identifyformat.php",
        "description": "Formats a string with image details"
    },
    {
        "name": "Imagick::implodeImage",
        "url": "imagick.implodeimage.php",
        "description": "Creates a new image as a copy"
    },
    {
        "name": "Imagick::inverseFourierTransformImage",
        "url": "imagick.inversefouriertransformimage.php",
        "description": "Implements the inverse discrete Fourier transform (DFT)"
    },
    {
        "name": "Imagick::levelImage",
        "url": "imagick.levelimage.php",
        "description": "Adjusts the levels of an image"
    },
    {
        "name": "Imagick::liquidRescaleImage",
        "url": "imagick.liquidrescaleimage.php",
        "description": "Animates an image or images"
    },
    {
        "name": "Imagick::magnifyImage",
        "url": "imagick.magnifyimage.php",
        "description": "Scales an image proportionally 2x"
    },
    {
        "name": "Imagick::matteFloodfillImage",
        "url": "imagick.mattefloodfillimage.php",
        "description": "Changes the transparency value of a color"
    },
    {
        "name": "Imagick::mergeImageLayers",
        "url": "imagick.mergeimagelayers.php",
        "description": "Merges image layers"
    },
    {
        "name": "Imagick::modulateImage",
        "url": "imagick.modulateimage.php",
        "description": "Control the brightness, saturation, and hue"
    },
    {
        "name": "Imagick::morphImages",
        "url": "imagick.morphimages.php",
        "description": "Method morphs a set of images"
    },
    {
        "name": "Imagick::mosaicImages",
        "url": "imagick.mosaicimages.php",
        "description": "Forms a mosaic from images"
    },
    {
        "name": "Imagick::negateImage",
        "url": "imagick.negateimage.php",
        "description": "Negates the colors in the reference image"
    },
    {
        "name": "Imagick::newPseudoImage",
        "url": "imagick.newpseudoimage.php",
        "description": "Creates a new image"
    },
    {
        "name": "Imagick::normalizeImage",
        "url": "imagick.normalizeimage.php",
        "description": "Enhances the contrast of a color image"
    },
    {
        "name": "Imagick::opaquePaintImage",
        "url": "imagick.opaquepaintimage.php",
        "description": "Changes the color value of any pixel that matches target"
    },
    {
        "name": "Imagick::orderedPosterizeImage",
        "url": "imagick.orderedposterizeimage.php",
        "description": "Performs an ordered dither"
    },
    {
        "name": "Imagick::paintOpaqueImage",
        "url": "imagick.paintopaqueimage.php",
        "description": "Change any pixel that matches color"
    },
    {
        "name": "Imagick::pingImage",
        "url": "imagick.pingimage.php",
        "description": "Fetch basic attributes about the image"
    },
    {
        "name": "Imagick::pingImageFile",
        "url": "imagick.pingimagefile.php",
        "description": "Get basic image attributes in a lightweight manner"
    },
    {
        "name": "Imagick::posterizeImage",
        "url": "imagick.posterizeimage.php",
        "description": "Reduces the image to a limited number of color level"
    },
    {
        "name": "Imagick::previousImage",
        "url": "imagick.previousimage.php",
        "description": "Move to the previous image in the object"
    },
    {
        "name": "Imagick::quantizeImage",
        "url": "imagick.quantizeimage.php",
        "description": "Analyzes the colors within a reference image"
    },
    {
        "name": "Imagick::queryFontMetrics",
        "url": "imagick.queryfontmetrics.php",
        "description": "Returns an array representing the font metrics"
    },
    {
        "name": "Imagick::queryFormats",
        "url": "imagick.queryformats.php",
        "description": "Returns formats supported by Imagick"
    },
    {
        "name": "Imagick::raiseImage",
        "url": "imagick.raiseimage.php",
        "description": "Creates a simulated 3d button-like effect"
    },
    {
        "name": "Imagick::readImage",
        "url": "imagick.readimage.php",
        "description": "Reads image from filename"
    },
    {
        "name": "Imagick::readImageFile",
        "url": "imagick.readimagefile.php",
        "description": "Reads image from open filehandle"
    },
    {
        "name": "Imagick::recolorImage",
        "url": "imagick.recolorimage.php",
        "description": "Recolors image"
    },
    {
        "name": "Imagick::remapImage",
        "url": "imagick.remapimage.php",
        "description": "Remaps image colors"
    },
    {
        "name": "Imagick::removeImageProfile",
        "url": "imagick.removeimageprofile.php",
        "description": "Removes the named image profile and returns it"
    },
    {
        "name": "Imagick::resampleImage",
        "url": "imagick.resampleimage.php",
        "description": "Resample image to desired resolution"
    },
    {
        "name": "Imagick::resizeImage",
        "url": "imagick.resizeimage.php",
        "description": "Scales an image"
    },
    {
        "name": "Imagick::rotateImage",
        "url": "imagick.rotateimage.php",
        "description": "Rotates an image"
    },
    {
        "name": "Imagick::roundCorners",
        "url": "imagick.roundcorners.php",
        "description": "Rounds image corners"
    },
    {
        "name": "Imagick::scaleImage",
        "url": "imagick.scaleimage.php",
        "description": "Scales the size of an image"
    },
    {
        "name": "Imagick::selectiveBlurImage",
        "url": "imagick.selectiveblurimage.php",
        "description": "Selectively blur an image within a contrast threshold"
    },
    {
        "name": "Imagick::sepiaToneImage",
        "url": "imagick.sepiatoneimage.php",
        "description": "Sepia tones an image"
    },
    {
        "name": "Imagick::setColorspace",
        "url": "imagick.setcolorspace.php",
        "description": "Set colorspace"
    },
    {
        "name": "Imagick::setCompressionQuality",
        "url": "imagick.setcompressionquality.php",
        "description": "Sets the object's default compression quality"
    },
    {
        "name": "Imagick::setFirstIterator",
        "url": "imagick.setfirstiterator.php",
        "description": "Sets the Imagick iterator to the first image"
    },
    {
        "name": "Imagick::setFormat",
        "url": "imagick.setformat.php",
        "description": "Sets the format of the Imagick object"
    },
    {
        "name": "Imagick::setImage",
        "url": "imagick.setimage.php",
        "description": "Replaces image in the object"
    },
    {
        "name": "Imagick::setImageArtifact",
        "url": "imagick.setimageartifact.php",
        "description": "Set image artifact"
    },
    {
        "name": "Imagick::setImageBackgroundColor",
        "url": "imagick.setimagebackgroundcolor.php",
        "description": "Sets the image background color"
    },
    {
        "name": "Imagick::setImageBiasQuantum",
        "url": "imagick.setimagebiasquantum.php",
        "description": "Sets the image bias"
    },
    {
        "name": "Imagick::setImageBorderColor",
        "url": "imagick.setimagebordercolor.php",
        "description": "Sets the image border color"
    },
    {
        "name": "Imagick::setImageClipMask",
        "url": "imagick.setimageclipmask.php",
        "description": "Sets image clip mask"
    },
    {
        "name": "Imagick::setImageColorspace",
        "url": "imagick.setimagecolorspace.php",
        "description": "Sets the image colorspace"
    },
    {
        "name": "Imagick::setImageCompression",
        "url": "imagick.setimagecompression.php",
        "description": "Sets the image compression"
    },
    {
        "name": "Imagick::setImageDelay",
        "url": "imagick.setimagedelay.php",
        "description": "Sets the image delay"
    },
    {
        "name": "Imagick::setImageDispose",
        "url": "imagick.setimagedispose.php",
        "description": "Sets the image disposal method"
    },
    {
        "name": "Imagick::setImageFilename",
        "url": "imagick.setimagefilename.php",
        "description": "Sets the filename of a particular image"
    },
    {
        "name": "Imagick::setImageGamma",
        "url": "imagick.setimagegamma.php",
        "description": "Sets the image gamma"
    },
    {
        "name": "Imagick::setImageGreenPrimary",
        "url": "imagick.setimagegreenprimary.php",
        "description": "Sets the image chromaticity green primary point"
    },
    {
        "name": "Imagick::setImageInterlaceScheme",
        "url": "imagick.setimageinterlacescheme.php",
        "description": "Sets the image compression"
    },
    {
        "name": "Imagick::setImageIterations",
        "url": "imagick.setimageiterations.php",
        "description": "Sets the image iterations"
    },
    {
        "name": "Imagick::setImageMatteColor",
        "url": "imagick.setimagemattecolor.php",
        "description": "Sets the image matte color"
    },
    {
        "name": "Imagick::setImageOrientation",
        "url": "imagick.setimageorientation.php",
        "description": "Sets the image orientation"
    },
    {
        "name": "Imagick::setImageProfile",
        "url": "imagick.setimageprofile.php",
        "description": "Adds a named profile to the Imagick object"
    },
    {
        "name": "Imagick::setImageRedPrimary",
        "url": "imagick.setimageredprimary.php",
        "description": "Sets the image chromaticity red primary point"
    },
    {
        "name": "Imagick::setImageResolution",
        "url": "imagick.setimageresolution.php",
        "description": "Sets the image resolution"
    },
    {
        "name": "Imagick::setImageTicksPerSecond",
        "url": "imagick.setimagetickspersecond.php",
        "description": "Sets the image ticks-per-second"
    },
    {
        "name": "Imagick::setImageUnits",
        "url": "imagick.setimageunits.php",
        "description": "Sets the image units of resolution"
    },
    {
        "name": "Imagick::setImageWhitePoint",
        "url": "imagick.setimagewhitepoint.php",
        "description": "Sets the image chromaticity white point"
    },
    {
        "name": "Imagick::setIteratorIndex",
        "url": "imagick.setiteratorindex.php",
        "description": "Set the iterator position"
    },
    {
        "name": "Imagick::setOption",
        "url": "imagick.setoption.php",
        "description": "Set an option"
    },
    {
        "name": "Imagick::setPointSize",
        "url": "imagick.setpointsize.php",
        "description": "Sets point size"
    },
    {
        "name": "Imagick::setRegistry",
        "url": "imagick.setregistry.php",
        "description": "Sets the ImageMagick registry entry named key to value"
    },
    {
        "name": "Imagick::setResourceLimit",
        "url": "imagick.setresourcelimit.php",
        "description": "Sets the limit for a particular resource"
    },
    {
        "name": "Imagick::setSize",
        "url": "imagick.setsize.php",
        "description": "Sets the size of the Imagick object"
    },
    {
        "name": "Imagick::setType",
        "url": "imagick.settype.php",
        "description": "Sets the image type attribute"
    },
    {
        "name": "Imagick::shadowImage",
        "url": "imagick.shadowimage.php",
        "description": "Simulates an image shadow"
    },
    {
        "name": "Imagick::shaveImage",
        "url": "imagick.shaveimage.php",
        "description": "Shaves pixels from the image edges"
    },
    {
        "name": "Imagick::sigmoidalContrastImage",
        "url": "imagick.sigmoidalcontrastimage.php",
        "description": "Adjusts the contrast of an image"
    },
    {
        "name": "Imagick::smushImages",
        "url": "imagick.smushimages.php",
        "description": "Takes all images from the current image pointer to the end of the image list and smushs them"
    },
    {
        "name": "Imagick::sparseColorImage",
        "url": "imagick.sparsecolorimage.php",
        "description": "Interpolates colors"
    },
    {
        "name": "Imagick::spreadImage",
        "url": "imagick.spreadimage.php",
        "description": "Randomly displaces each pixel in a block"
    },
    {
        "name": "Imagick::steganoImage",
        "url": "imagick.steganoimage.php",
        "description": "Hides a digital watermark within the image"
    },
    {
        "name": "Imagick::stripImage",
        "url": "imagick.stripimage.php",
        "description": "Strips an image of all profiles and comments"
    },
    {
        "name": "Imagick::swirlImage",
        "url": "imagick.swirlimage.php",
        "description": "Swirls the pixels about the center of the image"
    },
    {
        "name": "Imagick::thresholdImage",
        "url": "imagick.thresholdimage.php",
        "description": "Changes the value of individual pixels based on a threshold"
    },
    {
        "name": "Imagick::tintImage",
        "url": "imagick.tintimage.php",
        "description": "Applies a color vector to each pixel in the image"
    },
    {
        "name": "Imagick::transformImageColorspace",
        "url": "imagick.transformimagecolorspace.php",
        "description": "Transforms an image to a new colorspace"
    },
    {
        "name": "Imagick::transposeImage",
        "url": "imagick.transposeimage.php",
        "description": "Creates a vertical mirror image"
    },
    {
        "name": "Imagick::trimImage",
        "url": "imagick.trimimage.php",
        "description": "Remove edges from the image"
    },
    {
        "name": "Imagick::unsharpMaskImage",
        "url": "imagick.unsharpmaskimage.php",
        "description": "Sharpens an image"
    },
    {
        "name": "Imagick::vignetteImage",
        "url": "imagick.vignetteimage.php",
        "description": "Adds vignette filter to the image"
    },
    {
        "name": "Imagick::whiteThresholdImage",
        "url": "imagick.whitethresholdimage.php",
        "description": "Force all pixels above the threshold into white"
    },
    {
        "name": "Imagick::writeImageFile",
        "url": "imagick.writeimagefile.php",
        "description": "Writes an image to a filehandle"
    },
    {
        "name": "Imagick::writeImagesFile",
        "url": "imagick.writeimagesfile.php",
        "description": "Writes frames to a filehandle"
    },
    {
        "name": "Imagick::__toString",
        "url": "imagick.tostring.php",
        "description": "Returns the image as a string"
    },
    {
        "name": "ImagickDraw::annotation",
        "url": "imagickdraw.annotation.php",
        "description": "Draws text on the image"
    },
    {
        "name": "ImagickDraw::bezier",
        "url": "imagickdraw.bezier.php",
        "description": "Draws a bezier curve"
    },
    {
        "name": "ImagickDraw::clear",
        "url": "imagickdraw.clear.php",
        "description": "Clears the ImagickDraw"
    },
    {
        "name": "ImagickDraw::color",
        "url": "imagickdraw.color.php",
        "description": "Draws color on image"
    },
    {
        "name": "ImagickDraw::composite",
        "url": "imagickdraw.composite.php",
        "description": "Composites an image onto the current image"
    },
    {
        "name": "ImagickDraw::ellipse",
        "url": "imagickdraw.ellipse.php",
        "description": "Draws an ellipse on the image"
    },
    {
        "name": "ImagickDraw::getClipRule",
        "url": "imagickdraw.getcliprule.php",
        "description": "Returns the current polygon fill rule"
    },
    {
        "name": "ImagickDraw::getFillColor",
        "url": "imagickdraw.getfillcolor.php",
        "description": "Returns the fill color"
    },
    {
        "name": "ImagickDraw::getFillRule",
        "url": "imagickdraw.getfillrule.php",
        "description": "Returns the fill rule"
    },
    {
        "name": "ImagickDraw::getFontFamily",
        "url": "imagickdraw.getfontfamily.php",
        "description": "Returns the font family"
    },
    {
        "name": "ImagickDraw::getFontStretch",
        "url": "imagickdraw.getfontstretch.php",
        "description": "Gets the font stretch to use when annotating with text"
    },
    {
        "name": "ImagickDraw::getFontWeight",
        "url": "imagickdraw.getfontweight.php",
        "description": "Returns the font weight"
    },
    {
        "name": "ImagickDraw::getStrokeAntialias",
        "url": "imagickdraw.getstrokeantialias.php",
        "description": "Returns the current stroke antialias setting"
    },
    {
        "name": "ImagickDraw::getStrokeDashArray",
        "url": "imagickdraw.getstrokedasharray.php",
        "description": "Returns an array representing the pattern of dashes and gaps used to stroke paths"
    },
    {
        "name": "ImagickDraw::getStrokeLineCap",
        "url": "imagickdraw.getstrokelinecap.php",
        "description": "Returns the shape to be used at the end of open subpaths when they are stroked"
    },
    {
        "name": "ImagickDraw::getStrokeMiterLimit",
        "url": "imagickdraw.getstrokemiterlimit.php",
        "description": "Returns the stroke miter limit"
    },
    {
        "name": "ImagickDraw::getStrokeWidth",
        "url": "imagickdraw.getstrokewidth.php",
        "description": "Returns the width of the stroke used to draw object outlines"
    },
    {
        "name": "ImagickDraw::getTextAntialias",
        "url": "imagickdraw.gettextantialias.php",
        "description": "Returns the current text antialias setting"
    },
    {
        "name": "ImagickDraw::getTextEncoding",
        "url": "imagickdraw.gettextencoding.php",
        "description": "Returns the code set used for text annotations"
    },
    {
        "name": "ImagickDraw::getTextInterwordSpacing",
        "url": "imagickdraw.gettextinterwordspacing.php",
        "description": "Gets the text interword spacing"
    },
    {
        "name": "ImagickDraw::getTextUnderColor",
        "url": "imagickdraw.gettextundercolor.php",
        "description": "Returns the text under color"
    },
    {
        "name": "ImagickDraw::line",
        "url": "imagickdraw.line.php",
        "description": "Draws a line"
    },
    {
        "name": "ImagickDraw::pathClose",
        "url": "imagickdraw.pathclose.php",
        "description": "Adds a path element to the current path"
    },
    {
        "name": "ImagickDraw::pathCurveToQuadraticBezierAbsolute",
        "url": "imagickdraw.pathcurvetoquadraticbezierabsolute.php",
        "description": "Draws a quadratic Bezier curve"
    },
    {
        "name": "ImagickDraw::pathCurveToQuadraticBezierSmoothAbsolute",
        "url": "imagickdraw.pathcurvetoquadraticbeziersmoothabsolute.php",
        "description": "Draws a quadratic Bezier curve"
    },
    {
        "name": "ImagickDraw::pathCurveToRelative",
        "url": "imagickdraw.pathcurvetorelative.php",
        "description": "Draws a cubic Bezier curve"
    },
    {
        "name": "ImagickDraw::pathCurveToSmoothRelative",
        "url": "imagickdraw.pathcurvetosmoothrelative.php",
        "description": "Draws a cubic Bezier curve"
    },
    {
        "name": "ImagickDraw::pathEllipticArcRelative",
        "url": "imagickdraw.pathellipticarcrelative.php",
        "description": "Draws an elliptical arc"
    },
    {
        "name": "ImagickDraw::pathLineToAbsolute",
        "url": "imagickdraw.pathlinetoabsolute.php",
        "description": "Draws a line path"
    },
    {
        "name": "ImagickDraw::pathLineToHorizontalRelative",
        "url": "imagickdraw.pathlinetohorizontalrelative.php",
        "description": "Draws a horizontal line"
    },
    {
        "name": "ImagickDraw::pathLineToVerticalAbsolute",
        "url": "imagickdraw.pathlinetoverticalabsolute.php",
        "description": "Draws a vertical line"
    },
    {
        "name": "ImagickDraw::pathMoveToAbsolute",
        "url": "imagickdraw.pathmovetoabsolute.php",
        "description": "Starts a new sub-path"
    },
    {
        "name": "ImagickDraw::pathStart",
        "url": "imagickdraw.pathstart.php",
        "description": "Declares the start of a path drawing list"
    },
    {
        "name": "ImagickDraw::polygon",
        "url": "imagickdraw.polygon.php",
        "description": "Draws a polygon"
    },
    {
        "name": "ImagickDraw::pop",
        "url": "imagickdraw.pop.php",
        "description": "Destroys the current ImagickDraw in the stack, and returns to the previously pushed ImagickDraw"
    },
    {
        "name": "ImagickDraw::popDefs",
        "url": "imagickdraw.popdefs.php",
        "description": "Terminates a definition list"
    },
    {
        "name": "ImagickDraw::push",
        "url": "imagickdraw.push.php",
        "description": "Clones the current ImagickDraw and pushes it to the stack"
    },
    {
        "name": "ImagickDraw::pushDefs",
        "url": "imagickdraw.pushdefs.php",
        "description": "Indicates that following commands create named elements for early processing"
    },
    {
        "name": "ImagickDraw::rectangle",
        "url": "imagickdraw.rectangle.php",
        "description": "Draws a rectangle"
    },
    {
        "name": "ImagickDraw::resetVectorGraphics",
        "url": "imagickdraw.resetvectorgraphics.php",
        "description": "Resets the vector graphics"
    },
    {
        "name": "ImagickDraw::roundRectangle",
        "url": "imagickdraw.roundrectangle.php",
        "description": "Draws a rounded rectangle"
    },
    {
        "name": "ImagickDraw::setClipPath",
        "url": "imagickdraw.setclippath.php",
        "description": "Associates a named clipping path with the image"
    },
    {
        "name": "ImagickDraw::setClipUnits",
        "url": "imagickdraw.setclipunits.php",
        "description": "Sets the interpretation of clip path units"
    },
    {
        "name": "ImagickDraw::setFillColor",
        "url": "imagickdraw.setfillcolor.php",
        "description": "Sets the fill color to be used for drawing filled objects"
    },
    {
        "name": "ImagickDraw::setFillPatternURL",
        "url": "imagickdraw.setfillpatternurl.php",
        "description": "Sets the URL to use as a fill pattern for filling objects"
    },
    {
        "name": "ImagickDraw::setFont",
        "url": "imagickdraw.setfont.php",
        "description": "Sets the fully-specified font to use when annotating with text"
    },
    {
        "name": "ImagickDraw::setFontSize",
        "url": "imagickdraw.setfontsize.php",
        "description": "Sets the font pointsize to use when annotating with text"
    },
    {
        "name": "ImagickDraw::setFontStyle",
        "url": "imagickdraw.setfontstyle.php",
        "description": "Sets the font style to use when annotating with text"
    },
    {
        "name": "ImagickDraw::setGravity",
        "url": "imagickdraw.setgravity.php",
        "description": "Sets the text placement gravity"
    },
    {
        "name": "ImagickDraw::setStrokeAlpha",
        "url": "imagickdraw.setstrokealpha.php",
        "description": "Specifies the opacity of stroked object outlines"
    },
    {
        "name": "ImagickDraw::setStrokeColor",
        "url": "imagickdraw.setstrokecolor.php",
        "description": "Sets the color used for stroking object outlines"
    },
    {
        "name": "ImagickDraw::setStrokeDashOffset",
        "url": "imagickdraw.setstrokedashoffset.php",
        "description": "Specifies the offset into the dash pattern to start the dash"
    },
    {
        "name": "ImagickDraw::setStrokeLineJoin",
        "url": "imagickdraw.setstrokelinejoin.php",
        "description": "Specifies the shape to be used at the corners of paths when they are stroked"
    },
    {
        "name": "ImagickDraw::setStrokeOpacity",
        "url": "imagickdraw.setstrokeopacity.php",
        "description": "Specifies the opacity of stroked object outlines"
    },
    {
        "name": "ImagickDraw::setStrokeWidth",
        "url": "imagickdraw.setstrokewidth.php",
        "description": "Sets the width of the stroke used to draw object outlines"
    },
    {
        "name": "ImagickDraw::setTextAntialias",
        "url": "imagickdraw.settextantialias.php",
        "description": "Controls whether text is antialiased"
    },
    {
        "name": "ImagickDraw::setTextEncoding",
        "url": "imagickdraw.settextencoding.php",
        "description": "Specifies the text code set"
    },
    {
        "name": "ImagickDraw::setTextInterwordSpacing",
        "url": "imagickdraw.settextinterwordspacing.php",
        "description": "Sets the text interword spacing"
    },
    {
        "name": "ImagickDraw::setTextUnderColor",
        "url": "imagickdraw.settextundercolor.php",
        "description": "Specifies the color of a background rectangle"
    },
    {
        "name": "ImagickDraw::setViewbox",
        "url": "imagickdraw.setviewbox.php",
        "description": "Sets the overall canvas size"
    },
    {
        "name": "ImagickDraw::skewY",
        "url": "imagickdraw.skewy.php",
        "description": "Skews the current coordinate system in the vertical direction"
    },
    {
        "name": "ImagickDraw::__construct",
        "url": "imagickdraw.construct.php",
        "description": "The ImagickDraw constructor"
    },
    {
        "name": "ImagickKernel::addUnityKernel",
        "url": "imagickkernel.addunitykernel.php",
        "description": "Adds a Unity Kernel to the kernel list"
    },
    {
        "name": "ImagickKernel::fromMatrix",
        "url": "imagickkernel.frommatrix.php",
        "description": "Create a kernel from a 2d matrix of values"
    },
    {
        "name": "ImagickKernel::scale",
        "url": "imagickkernel.scale.php",
        "description": "Scales a kernel list by the given amount"
    },
    {
        "name": "ImagickPixel::clear",
        "url": "imagickpixel.clear.php",
        "description": "Clears resources associated with this object"
    },
    {
        "name": "ImagickPixel::getColor",
        "url": "imagickpixel.getcolor.php",
        "description": "Returns the color"
    },
    {
        "name": "ImagickPixel::getColorCount",
        "url": "imagickpixel.getcolorcount.php",
        "description": "Returns the color count associated with this color"
    },
    {
        "name": "ImagickPixel::getColorValue",
        "url": "imagickpixel.getcolorvalue.php",
        "description": "Gets the normalized value of the provided color channel"
    },
    {
        "name": "ImagickPixel::getHSL",
        "url": "imagickpixel.gethsl.php",
        "description": "Returns the normalized HSL color of the ImagickPixel object"
    },
    {
        "name": "ImagickPixel::isPixelSimilar",
        "url": "imagickpixel.ispixelsimilar.php",
        "description": "Check the distance between this color and another"
    },
    {
        "name": "ImagickPixel::isSimilar",
        "url": "imagickpixel.issimilar.php",
        "description": "Check the distance between this color and another"
    },
    {
        "name": "ImagickPixel::setColorCount",
        "url": "imagickpixel.setcolorcount.php",
        "description": "Sets the color count associated with this color"
    },
    {
        "name": "ImagickPixel::setColorValueQuantum",
        "url": "imagickpixel.setcolorvaluequantum.php",
        "description": "Sets the quantum value of a color element of the ImagickPixel"
    },
    {
        "name": "ImagickPixel::setIndex",
        "url": "imagickpixel.setindex.php",
        "description": "Sets the colormap index of the pixel wand"
    },
    {
        "name": "ImagickPixelIterator::clear",
        "url": "imagickpixeliterator.clear.php",
        "description": "Clear resources associated with a PixelIterator"
    },
    {
        "name": "ImagickPixelIterator::getCurrentIteratorRow",
        "url": "imagickpixeliterator.getcurrentiteratorrow.php",
        "description": "Returns the current row of ImagickPixel objects"
    },
    {
        "name": "ImagickPixelIterator::getNextIteratorRow",
        "url": "imagickpixeliterator.getnextiteratorrow.php",
        "description": "Returns the next row of the pixel iterator"
    },
    {
        "name": "ImagickPixelIterator::newPixelIterator",
        "url": "imagickpixeliterator.newpixeliterator.php",
        "description": "Returns a new pixel iterator"
    },
    {
        "name": "ImagickPixelIterator::resetIterator",
        "url": "imagickpixeliterator.resetiterator.php",
        "description": "Resets the pixel iterator"
    },
    {
        "name": "ImagickPixelIterator::setIteratorLastRow",
        "url": "imagickpixeliterator.setiteratorlastrow.php",
        "description": "Sets the pixel iterator to the last pixel row"
    },
    {
        "name": "ImagickPixelIterator::syncIterator",
        "url": "imagickpixeliterator.synciterator.php",
        "description": "Syncs the pixel iterator"
    },
    {
        "name": "imap_8bit",
        "url": "function.imap-8bit.php",
        "description": "Convert an 8bit string to a quoted-printable string"
    },
    {
        "name": "imap_append",
        "url": "function.imap-append.php",
        "description": "Append a string message to a specified mailbox"
    },
    {
        "name": "imap_binary",
        "url": "function.imap-binary.php",
        "description": "Convert an 8bit string to a base64 string"
    },
    {
        "name": "imap_bodystruct",
        "url": "function.imap-bodystruct.php",
        "description": "Read the structure of a specified body section of a specific message"
    },
    {
        "name": "imap_clearflag_full",
        "url": "function.imap-clearflag-full.php",
        "description": "Clears flags on messages"
    },
    {
        "name": "imap_create",
        "url": "function.imap-create.php",
        "description": "Alias of imap_createmailbox"
    },
    {
        "name": "imap_delete",
        "url": "function.imap-delete.php",
        "description": "Mark a message for deletion from current mailbox"
    },
    {
        "name": "imap_errors",
        "url": "function.imap-errors.php",
        "description": "Returns all of the IMAP errors that have occurred"
    },
    {
        "name": "imap_fetchbody",
        "url": "function.imap-fetchbody.php",
        "description": "Fetch a particular section of the body of the message"
    },
    {
        "name": "imap_fetchmime",
        "url": "function.imap-fetchmime.php",
        "description": "Fetch MIME headers for a particular section of the message"
    },
    {
        "name": "imap_fetchtext",
        "url": "function.imap-fetchtext.php",
        "description": "Alias of imap_body"
    },
    {
        "name": "imap_gc",
        "url": "function.imap-gc.php",
        "description": "Clears IMAP cache"
    },
    {
        "name": "imap_getmailboxes",
        "url": "function.imap-getmailboxes.php",
        "description": "Read the list of mailboxes, returning detailed information on each one"
    },
    {
        "name": "imap_get_quota",
        "url": "function.imap-get-quota.php",
        "description": "Retrieve the quota level settings, and usage statics per mailbox"
    },
    {
        "name": "imap_header",
        "url": "function.imap-header.php",
        "description": "Alias of imap_headerinfo"
    },
    {
        "name": "imap_headers",
        "url": "function.imap-headers.php",
        "description": "Returns headers for all messages in a mailbox"
    },
    {
        "name": "imap_last_error",
        "url": "function.imap-last-error.php",
        "description": "Gets the last IMAP error that occurred during this page request"
    },
    {
        "name": "imap_listmailbox",
        "url": "function.imap-listmailbox.php",
        "description": "Alias of imap_list"
    },
    {
        "name": "imap_listsubscribed",
        "url": "function.imap-listsubscribed.php",
        "description": "Alias of imap_lsub"
    },
    {
        "name": "imap_mail",
        "url": "function.imap-mail.php",
        "description": "Send an email message"
    },
    {
        "name": "imap_mail_compose",
        "url": "function.imap-mail-compose.php",
        "description": "Create a MIME message based on given envelope and body sections"
    },
    {
        "name": "imap_mail_move",
        "url": "function.imap-mail-move.php",
        "description": "Move specified messages to a mailbox"
    },
    {
        "name": "imap_msgno",
        "url": "function.imap-msgno.php",
        "description": "Gets the message sequence number for the given UID"
    },
    {
        "name": "imap_num_msg",
        "url": "function.imap-num-msg.php",
        "description": "Gets the number of messages in the current mailbox"
    },
    {
        "name": "imap_open",
        "url": "function.imap-open.php",
        "description": "Open an IMAP stream to a mailbox"
    },
    {
        "name": "imap_qprint",
        "url": "function.imap-qprint.php",
        "description": "Convert a quoted-printable string to an 8 bit string"
    },
    {
        "name": "imap_renamemailbox",
        "url": "function.imap-renamemailbox.php",
        "description": "Rename an old mailbox to new mailbox"
    },
    {
        "name": "imap_rfc822_parse_adrlist",
        "url": "function.imap-rfc822-parse-adrlist.php",
        "description": "Parses an address string"
    },
    {
        "name": "imap_rfc822_write_address",
        "url": "function.imap-rfc822-write-address.php",
        "description": "Returns a properly formatted email address given the mailbox, host, and personal info"
    },
    {
        "name": "imap_scan",
        "url": "function.imap-scan.php",
        "description": "Alias of imap_listscan"
    },
    {
        "name": "imap_search",
        "url": "function.imap-search.php",
        "description": "This function returns an array of messages matching the given search criteria"
    },
    {
        "name": "imap_setflag_full",
        "url": "function.imap-setflag-full.php",
        "description": "Sets flags on messages"
    },
    {
        "name": "imap_sort",
        "url": "function.imap-sort.php",
        "description": "Gets and sort messages"
    },
    {
        "name": "imap_subscribe",
        "url": "function.imap-subscribe.php",
        "description": "Subscribe to a mailbox"
    },
    {
        "name": "imap_timeout",
        "url": "function.imap-timeout.php",
        "description": "Set or fetch imap timeout"
    },
    {
        "name": "imap_undelete",
        "url": "function.imap-undelete.php",
        "description": "Unmark the message which is marked deleted"
    },
    {
        "name": "imap_utf7_decode",
        "url": "function.imap-utf7-decode.php",
        "description": "Decodes a modified UTF-7 encoded string"
    },
    {
        "name": "imap_utf8",
        "url": "function.imap-utf8.php",
        "description": "Converts MIME-encoded text to UTF-8"
    },
    {
        "name": "implode",
        "url": "function.implode.php",
        "description": "Join array elements with a string"
    },
    {
        "name": "inet_pton",
        "url": "function.inet-pton.php",
        "description": "Converts a human readable IP address to its packed in_addr representation"
    },
    {
        "name": "InfiniteIterator::__construct",
        "url": "infiniteiterator.construct.php",
        "description": "Constructs an InfiniteIterator"
    },
    {
        "name": "inflate_get_read_len",
        "url": "function.inflate-get-read-len.php",
        "description": "Get number of bytes read so far"
    },
    {
        "name": "inflate_init",
        "url": "function.inflate-init.php",
        "description": "Initialize an incremental inflate context"
    },
    {
        "name": "ini_get",
        "url": "function.ini-get.php",
        "description": "Gets the value of a configuration option"
    },
    {
        "name": "ini_parse_quantity",
        "url": "function.ini-parse-quantity.php",
        "description": "Get interpreted size from ini shorthand syntax"
    },
    {
        "name": "ini_set",
        "url": "function.ini-set.php",
        "description": "Sets the value of a configuration option"
    },
    {
        "name": "inotify_init",
        "url": "function.inotify-init.php",
        "description": "Initialize an inotify instance"
    },
    {
        "name": "inotify_read",
        "url": "function.inotify-read.php",
        "description": "Read events from an inotify instance"
    },
    {
        "name": "intdiv",
        "url": "function.intdiv.php",
        "description": "Integer division"
    },
    {
        "name": "InternalIterator::current",
        "url": "internaliterator.current.php",
        "description": "Return the current element"
    },
    {
        "name": "InternalIterator::next",
        "url": "internaliterator.next.php",
        "description": "Move forward to next element"
    },
    {
        "name": "InternalIterator::valid",
        "url": "internaliterator.valid.php",
        "description": "Check if current position is valid"
    },
    {
        "name": "IntlBreakIterator::createCharacterInstance",
        "url": "intlbreakiterator.createcharacterinstance.php",
        "description": "Create break iterator for boundaries of combining character sequences"
    },
    {
        "name": "IntlBreakIterator::createLineInstance",
        "url": "intlbreakiterator.createlineinstance.php",
        "description": "Create break iterator for logically possible line breaks"
    },
    {
        "name": "IntlBreakIterator::createTitleInstance",
        "url": "intlbreakiterator.createtitleinstance.php",
        "description": "Create break iterator for title-casing breaks"
    },
    {
        "name": "IntlBreakIterator::current",
        "url": "intlbreakiterator.current.php",
        "description": "Get index of current position"
    },
    {
        "name": "IntlBreakIterator::following",
        "url": "intlbreakiterator.following.php",
        "description": "Advance the iterator to the first boundary following specified offset"
    },
    {
        "name": "IntlBreakIterator::getErrorMessage",
        "url": "intlbreakiterator.geterrormessage.php",
        "description": "Get last error message on the object"
    },
    {
        "name": "IntlBreakIterator::getPartsIterator",
        "url": "intlbreakiterator.getpartsiterator.php",
        "description": "Create iterator for navigating fragments between boundaries"
    },
    {
        "name": "IntlBreakIterator::isBoundary",
        "url": "intlbreakiterator.isboundary.php",
        "description": "Tell whether an offset is a boundary\u02bcs offset"
    },
    {
        "name": "IntlBreakIterator::next",
        "url": "intlbreakiterator.next.php",
        "description": "Advance the iterator the next boundary"
    },
    {
        "name": "IntlBreakIterator::previous",
        "url": "intlbreakiterator.previous.php",
        "description": "Set the iterator position to the boundary immediately before the current"
    },
    {
        "name": "IntlBreakIterator::__construct",
        "url": "intlbreakiterator.construct.php",
        "description": "Private constructor for disallowing instantiation"
    },
    {
        "name": "IntlCalendar::after",
        "url": "intlcalendar.after.php",
        "description": "Whether this object\u02bcs time is after that of the passed object"
    },
    {
        "name": "IntlCalendar::clear",
        "url": "intlcalendar.clear.php",
        "description": "Clear a field or all fields"
    },
    {
        "name": "IntlCalendar::equals",
        "url": "intlcalendar.equals.php",
        "description": "Compare time of two IntlCalendar objects for equality"
    },
    {
        "name": "IntlCalendar::fromDateTime",
        "url": "intlcalendar.fromdatetime.php",
        "description": "Create an IntlCalendar from a DateTime object or string"
    },
    {
        "name": "IntlCalendar::getActualMaximum",
        "url": "intlcalendar.getactualmaximum.php",
        "description": "The maximum value for a field, considering the object\u02bcs current time"
    },
    {
        "name": "IntlCalendar::getAvailableLocales",
        "url": "intlcalendar.getavailablelocales.php",
        "description": "Get array of locales for which there is data"
    },
    {
        "name": "IntlCalendar::getErrorCode",
        "url": "intlcalendar.geterrorcode.php",
        "description": "Get last error code on the object"
    },
    {
        "name": "IntlCalendar::getFirstDayOfWeek",
        "url": "intlcalendar.getfirstdayofweek.php",
        "description": "Get the first day of the week for the calendar\u02bcs locale"
    },
    {
        "name": "IntlCalendar::getKeywordValuesForLocale",
        "url": "intlcalendar.getkeywordvaluesforlocale.php",
        "description": "Get set of locale keyword values"
    },
    {
        "name": "IntlCalendar::getLocale",
        "url": "intlcalendar.getlocale.php",
        "description": "Get the locale associated with the object"
    },
    {
        "name": "IntlCalendar::getMinimalDaysInFirstWeek",
        "url": "intlcalendar.getminimaldaysinfirstweek.php",
        "description": "Get minimal number of days the first week in a year or month can have"
    },
    {
        "name": "IntlCalendar::getNow",
        "url": "intlcalendar.getnow.php",
        "description": "Get number representing the current time"
    },
    {
        "name": "IntlCalendar::getSkippedWallTimeOption",
        "url": "intlcalendar.getskippedwalltimeoption.php",
        "description": "Get behavior for handling skipped wall time"
    },
    {
        "name": "IntlCalendar::getTimeZone",
        "url": "intlcalendar.gettimezone.php",
        "description": "Get the object\u02bcs timezone"
    },
    {
        "name": "IntlCalendar::getWeekendTransition",
        "url": "intlcalendar.getweekendtransition.php",
        "description": "Get time of the day at which weekend begins or ends"
    },
    {
        "name": "IntlCalendar::isEquivalentTo",
        "url": "intlcalendar.isequivalentto.php",
        "description": "Whether another calendar is equal but for a different time"
    },
    {
        "name": "IntlCalendar::isSet",
        "url": "intlcalendar.isset.php",
        "description": "Whether a field is set"
    },
    {
        "name": "IntlCalendar::roll",
        "url": "intlcalendar.roll.php",
        "description": "Add value to field without carrying into more significant fields"
    },
    {
        "name": "IntlCalendar::setDate",
        "url": "intlcalendar.setdate.php",
        "description": "Set a date fields"
    },
    {
        "name": "IntlCalendar::setFirstDayOfWeek",
        "url": "intlcalendar.setfirstdayofweek.php",
        "description": "Set the day on which the week is deemed to start"
    },
    {
        "name": "IntlCalendar::setMinimalDaysInFirstWeek",
        "url": "intlcalendar.setminimaldaysinfirstweek.php",
        "description": "Set minimal number of days the first week in a year or month can have"
    },
    {
        "name": "IntlCalendar::setSkippedWallTimeOption",
        "url": "intlcalendar.setskippedwalltimeoption.php",
        "description": "Set behavior for handling skipped wall times at positive timezone offset transitions"
    },
    {
        "name": "IntlCalendar::setTimeZone",
        "url": "intlcalendar.settimezone.php",
        "description": "Set the timezone used by this calendar"
    },
    {
        "name": "IntlCalendar::__construct",
        "url": "intlcalendar.construct.php",
        "description": "Private constructor for disallowing instantiation"
    },
    {
        "name": "IntlChar::charDigitValue",
        "url": "intlchar.chardigitvalue.php",
        "description": "Get the decimal digit value of a decimal digit character"
    },
    {
        "name": "IntlChar::charFromName",
        "url": "intlchar.charfromname.php",
        "description": "Find Unicode character by name and return its code point value"
    },
    {
        "name": "IntlChar::charName",
        "url": "intlchar.charname.php",
        "description": "Retrieve the name of a Unicode character"
    },
    {
        "name": "IntlChar::chr",
        "url": "intlchar.chr.php",
        "description": "Return Unicode character by code point value"
    },
    {
        "name": "IntlChar::enumCharNames",
        "url": "intlchar.enumcharnames.php",
        "description": "Enumerate all assigned Unicode characters within a range"
    },
    {
        "name": "IntlChar::foldCase",
        "url": "intlchar.foldcase.php",
        "description": "Perform case folding on a code point"
    },
    {
        "name": "IntlChar::getBidiPairedBracket",
        "url": "intlchar.getbidipairedbracket.php",
        "description": "Get the paired bracket character for a code point"
    },
    {
        "name": "IntlChar::getCombiningClass",
        "url": "intlchar.getcombiningclass.php",
        "description": "Get the combining class of a code point"
    },
    {
        "name": "IntlChar::getIntPropertyMaxValue",
        "url": "intlchar.getintpropertymaxvalue.php",
        "description": "Get the max value for a Unicode property"
    },
    {
        "name": "IntlChar::getIntPropertyValue",
        "url": "intlchar.getintpropertyvalue.php",
        "description": "Get the value for a Unicode property for a code point"
    },
    {
        "name": "IntlChar::getPropertyEnum",
        "url": "intlchar.getpropertyenum.php",
        "description": "Get the property constant value for a given property name"
    },
    {
        "name": "IntlChar::getPropertyValueEnum",
        "url": "intlchar.getpropertyvalueenum.php",
        "description": "Get the property value for a given value name"
    },
    {
        "name": "IntlChar::getUnicodeVersion",
        "url": "intlchar.getunicodeversion.php",
        "description": "Get the Unicode version"
    },
    {
        "name": "IntlChar::isalnum",
        "url": "intlchar.isalnum.php",
        "description": "Check if code point is an alphanumeric character"
    },
    {
        "name": "IntlChar::isbase",
        "url": "intlchar.isbase.php",
        "description": "Check if code point is a base character"
    },
    {
        "name": "IntlChar::iscntrl",
        "url": "intlchar.iscntrl.php",
        "description": "Check if code point is a control character"
    },
    {
        "name": "IntlChar::isdigit",
        "url": "intlchar.isdigit.php",
        "description": "Check if code point is a digit character"
    },
    {
        "name": "IntlChar::isIDIgnorable",
        "url": "intlchar.isidignorable.php",
        "description": "Check if code point is an ignorable character"
    },
    {
        "name": "IntlChar::isIDStart",
        "url": "intlchar.isidstart.php",
        "description": "Check if code point is permissible as the first character in an identifier"
    },
    {
        "name": "IntlChar::isJavaIDPart",
        "url": "intlchar.isjavaidpart.php",
        "description": "Check if code point is permissible in a Java identifier"
    },
    {
        "name": "IntlChar::isJavaSpaceChar",
        "url": "intlchar.isjavaspacechar.php",
        "description": "Check if code point is a space character according to Java"
    },
    {
        "name": "IntlChar::isMirrored",
        "url": "intlchar.ismirrored.php",
        "description": "Check if code point has the Bidi_Mirrored property"
    },
    {
        "name": "IntlChar::ispunct",
        "url": "intlchar.ispunct.php",
        "description": "Check if code point is punctuation character"
    },
    {
        "name": "IntlChar::istitle",
        "url": "intlchar.istitle.php",
        "description": "Check if code point is a titlecase letter"
    },
    {
        "name": "IntlChar::isULowercase",
        "url": "intlchar.isulowercase.php",
        "description": "Check if code point has the Lowercase Unicode property"
    },
    {
        "name": "IntlChar::isUUppercase",
        "url": "intlchar.isuuppercase.php",
        "description": "Check if code point has the Uppercase Unicode property"
    },
    {
        "name": "IntlChar::isWhitespace",
        "url": "intlchar.iswhitespace.php",
        "description": "Check if code point is a whitespace character according to ICU"
    },
    {
        "name": "IntlChar::ord",
        "url": "intlchar.ord.php",
        "description": "Return Unicode code point value of character"
    },
    {
        "name": "IntlChar::totitle",
        "url": "intlchar.totitle.php",
        "description": "Make Unicode character titlecase"
    },
    {
        "name": "IntlCodePointBreakIterator::getLastCodePoint",
        "url": "intlcodepointbreakiterator.getlastcodepoint.php",
        "description": "Get last code point passed over after advancing or receding the iterator"
    },
    {
        "name": "IntlDateFormatter::format",
        "url": "intldateformatter.format.php",
        "description": "Format the date\/time value as a string"
    },
    {
        "name": "IntlDateFormatter::getCalendar",
        "url": "intldateformatter.getcalendar.php",
        "description": "Get the calendar type used for the IntlDateFormatter"
    },
    {
        "name": "IntlDateFormatter::getDateType",
        "url": "intldateformatter.getdatetype.php",
        "description": "Get the datetype used for the IntlDateFormatter"
    },
    {
        "name": "IntlDateFormatter::getErrorMessage",
        "url": "intldateformatter.geterrormessage.php",
        "description": "Get the error text from the last operation"
    },
    {
        "name": "IntlDateFormatter::getPattern",
        "url": "intldateformatter.getpattern.php",
        "description": "Get the pattern used for the IntlDateFormatter"
    },
    {
        "name": "IntlDateFormatter::getTimeZone",
        "url": "intldateformatter.gettimezone.php",
        "description": "Get formatter\u02bcs timezone"
    },
    {
        "name": "IntlDateFormatter::isLenient",
        "url": "intldateformatter.islenient.php",
        "description": "Get the lenient used for the IntlDateFormatter"
    },
    {
        "name": "IntlDateFormatter::parse",
        "url": "intldateformatter.parse.php",
        "description": "Parse string to a timestamp value"
    },
    {
        "name": "IntlDateFormatter::setLenient",
        "url": "intldateformatter.setlenient.php",
        "description": "Set the leniency of the parser"
    },
    {
        "name": "IntlDateFormatter::setTimeZone",
        "url": "intldateformatter.settimezone.php",
        "description": "Sets formatter\u02bcs timezone"
    },
    {
        "name": "IntlDatePatternGenerator::getBestPattern",
        "url": "intldatepatterngenerator.getbestpattern.php",
        "description": "Determines the most suitable date\/time format"
    },
    {
        "name": "IntlGregorianCalendar::createFromDateTime",
        "url": "intlgregoriancalendar.createfromdatetime.php",
        "description": "Create a new IntlGregorianCalendar instance from date and time"
    },
    {
        "name": "IntlGregorianCalendar::isLeapYear",
        "url": "intlgregoriancalendar.isleapyear.php",
        "description": "Determine if the given year is a leap year"
    },
    {
        "name": "IntlGregorianCalendar::__construct",
        "url": "intlgregoriancalendar.construct.php",
        "description": "Create the Gregorian Calendar class"
    },
    {
        "name": "IntlIterator::key",
        "url": "intliterator.key.php",
        "description": "Get the current key"
    },
    {
        "name": "IntlIterator::rewind",
        "url": "intliterator.rewind.php",
        "description": "Rewind the iterator to the first element"
    },
    {
        "name": "IntlPartsIterator::getBreakIterator",
        "url": "intlpartsiterator.getbreakiterator.php",
        "description": "Get IntlBreakIterator backing this parts iterator"
    },
    {
        "name": "IntlRuleBasedBreakIterator::getRules",
        "url": "intlrulebasedbreakiterator.getrules.php",
        "description": "Get the rule set used to create this object"
    },
    {
        "name": "IntlRuleBasedBreakIterator::getRuleStatusVec",
        "url": "intlrulebasedbreakiterator.getrulestatusvec.php",
        "description": "Get the status values from the break rules that determined the current break position"
    },
    {
        "name": "IntlTimeZone::countEquivalentIDs",
        "url": "intltimezone.countequivalentids.php",
        "description": "Get the number of IDs in the equivalency group that includes the given ID"
    },
    {
        "name": "IntlTimeZone::createEnumeration",
        "url": "intltimezone.createenumeration.php",
        "description": "Get an enumeration over time zone IDs associated with the   given country or offset"
    },
    {
        "name": "IntlTimeZone::createTimeZone",
        "url": "intltimezone.createtimezone.php",
        "description": "Create a timezone object for the given ID"
    },
    {
        "name": "IntlTimeZone::fromDateTimeZone",
        "url": "intltimezone.fromdatetimezone.php",
        "description": "Create a timezone object from DateTimeZone"
    },
    {
        "name": "IntlTimeZone::getDisplayName",
        "url": "intltimezone.getdisplayname.php",
        "description": "Get a name of this time zone suitable for presentation to the user"
    },
    {
        "name": "IntlTimeZone::getEquivalentID",
        "url": "intltimezone.getequivalentid.php",
        "description": "Get an ID in the equivalency group that includes the given ID"
    },
    {
        "name": "IntlTimeZone::getErrorMessage",
        "url": "intltimezone.geterrormessage.php",
        "description": "Get last error message on the object"
    },
    {
        "name": "IntlTimeZone::getID",
        "url": "intltimezone.getid.php",
        "description": "Get timezone ID"
    },
    {
        "name": "IntlTimeZone::getOffset",
        "url": "intltimezone.getoffset.php",
        "description": "Get the time zone raw and GMT offset for the given moment in time"
    },
    {
        "name": "IntlTimeZone::getRegion",
        "url": "intltimezone.getregion.php",
        "description": "Get the region code associated with the given system time zone ID"
    },
    {
        "name": "IntlTimeZone::getUnknown",
        "url": "intltimezone.getunknown.php",
        "description": "Get the &quot;unknown&quot; time zone"
    },
    {
        "name": "IntlTimeZone::hasSameRules",
        "url": "intltimezone.hassamerules.php",
        "description": "Check if this zone has the same rules and offset as another zone"
    },
    {
        "name": "IntlTimeZone::useDaylightTime",
        "url": "intltimezone.usedaylighttime.php",
        "description": "Check if this time zone uses daylight savings time"
    },
    {
        "name": "intl_error_name",
        "url": "function.intl-error-name.php",
        "description": "Get symbolic name for a given error code"
    },
    {
        "name": "intl_get_error_message",
        "url": "function.intl-get-error-message.php",
        "description": "Get description of the last error"
    },
    {
        "name": "intval",
        "url": "function.intval.php",
        "description": "Get the integer value of a variable"
    },
    {
        "name": "ip2long",
        "url": "function.ip2long.php",
        "description": "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer"
    },
    {
        "name": "iptcparse",
        "url": "function.iptcparse.php",
        "description": "Parse a binary IPTC block into single tags"
    },
    {
        "name": "is_a",
        "url": "function.is-a.php",
        "description": "Checks whether the object is of a given type or subtype"
    },
    {
        "name": "is_bool",
        "url": "function.is-bool.php",
        "description": "Finds out whether a variable is a boolean"
    },
    {
        "name": "is_countable",
        "url": "function.is-countable.php",
        "description": "Verify that the contents of a variable is a countable value"
    },
    {
        "name": "is_double",
        "url": "function.is-double.php",
        "description": "Alias of is_float"
    },
    {
        "name": "is_file",
        "url": "function.is-file.php",
        "description": "Tells whether the filename is a regular file"
    },
    {
        "name": "is_float",
        "url": "function.is-float.php",
        "description": "Finds whether the type of a variable is float"
    },
    {
        "name": "is_int",
        "url": "function.is-int.php",
        "description": "Find whether the type of a variable is integer"
    },
    {
        "name": "is_iterable",
        "url": "function.is-iterable.php",
        "description": "Verify that the contents of a variable is an iterable value"
    },
    {
        "name": "is_long",
        "url": "function.is-long.php",
        "description": "Alias of is_int"
    },
    {
        "name": "is_null",
        "url": "function.is-null.php",
        "description": "Finds whether a variable is null"
    },
    {
        "name": "is_object",
        "url": "function.is-object.php",
        "description": "Finds whether a variable is an object"
    },
    {
        "name": "is_real",
        "url": "function.is-real.php",
        "description": "Alias of is_float"
    },
    {
        "name": "is_scalar",
        "url": "function.is-scalar.php",
        "description": "Finds whether a variable is a scalar"
    },
    {
        "name": "is_string",
        "url": "function.is-string.php",
        "description": "Find whether the type of a variable is string"
    },
    {
        "name": "is_tainted",
        "url": "function.is-tainted.php",
        "description": "Checks whether a string is tainted"
    },
    {
        "name": "is_writable",
        "url": "function.is-writable.php",
        "description": "Tells whether the filename is writable"
    },
    {
        "name": "Iterator::current",
        "url": "iterator.current.php",
        "description": "Return the current element"
    },
    {
        "name": "Iterator::next",
        "url": "iterator.next.php",
        "description": "Move forward to next element"
    },
    {
        "name": "Iterator::valid",
        "url": "iterator.valid.php",
        "description": "Checks if current position is valid"
    },
    {
        "name": "IteratorIterator::current",
        "url": "iteratoriterator.current.php",
        "description": "Get the current value"
    },
    {
        "name": "IteratorIterator::key",
        "url": "iteratoriterator.key.php",
        "description": "Get the key of the current element"
    },
    {
        "name": "IteratorIterator::rewind",
        "url": "iteratoriterator.rewind.php",
        "description": "Rewind to the first element"
    },
    {
        "name": "IteratorIterator::__construct",
        "url": "iteratoriterator.construct.php",
        "description": "Create an iterator from anything that is traversable"
    },
    {
        "name": "iterator_count",
        "url": "function.iterator-count.php",
        "description": "Count the elements in an iterator"
    },
    {
        "name": "jddayofweek",
        "url": "function.jddayofweek.php",
        "description": "Returns the day of the week"
    },
    {
        "name": "jdtofrench",
        "url": "function.jdtofrench.php",
        "description": "Converts a Julian Day Count to the French Republican Calendar"
    },
    {
        "name": "jdtojewish",
        "url": "function.jdtojewish.php",
        "description": "Converts a Julian day count to a Jewish calendar date"
    },
    {
        "name": "jdtounix",
        "url": "function.jdtounix.php",
        "description": "Convert Julian Day to Unix timestamp"
    },
    {
        "name": "join",
        "url": "function.join.php",
        "description": "Alias of implode"
    },
    {
        "name": "JsonSerializable::jsonSerialize",
        "url": "jsonserializable.jsonserialize.php",
        "description": "Specify data which should be serialized to JSON"
    },
    {
        "name": "json_encode",
        "url": "function.json-encode.php",
        "description": "Returns the JSON representation of a value"
    },
    {
        "name": "json_last_error_msg",
        "url": "function.json-last-error-msg.php",
        "description": "Returns the error string of the last json_encode() or json_decode() call"
    },
    {
        "name": "juliantojd",
        "url": "function.juliantojd.php",
        "description": "Converts a Julian Calendar date to Julian Day Count"
    },
    {
        "name": "key",
        "url": "function.key.php",
        "description": "Fetch a key from an array"
    },
    {
        "name": "krsort",
        "url": "function.krsort.php",
        "description": "Sort an array by key in descending order"
    },
    {
        "name": "lcfirst",
        "url": "function.lcfirst.php",
        "description": "Make a string's first character lowercase"
    },
    {
        "name": "lchgrp",
        "url": "function.lchgrp.php",
        "description": "Changes group ownership of symlink"
    },
    {
        "name": "ldap_8859_to_t61",
        "url": "function.ldap-8859-to-t61.php",
        "description": "Translate 8859 characters to t61 characters"
    },
    {
        "name": "ldap_add_ext",
        "url": "function.ldap-add-ext.php",
        "description": "Add entries to LDAP directory"
    },
    {
        "name": "ldap_bind_ext",
        "url": "function.ldap-bind-ext.php",
        "description": "Bind to LDAP directory"
    },
    {
        "name": "ldap_compare",
        "url": "function.ldap-compare.php",
        "description": "Compare value of attribute found in entry specified with DN"
    },
    {
        "name": "ldap_connect_wallet",
        "url": "function.ldap-connect-wallet.php",
        "description": "Connect to an LDAP server"
    },
    {
        "name": "ldap_control_paged_result_response",
        "url": "function.ldap-control-paged-result-response.php",
        "description": "Retrieve the LDAP pagination cookie"
    },
    {
        "name": "ldap_count_references",
        "url": "function.ldap-count-references.php",
        "description": "Counts the number of references in a search result"
    },
    {
        "name": "ldap_delete_ext",
        "url": "function.ldap-delete-ext.php",
        "description": "Delete an entry from a directory"
    },
    {
        "name": "ldap_err2str",
        "url": "function.ldap-err2str.php",
        "description": "Convert LDAP error number into string error message"
    },
    {
        "name": "ldap_error",
        "url": "function.ldap-error.php",
        "description": "Return the LDAP error message of the last LDAP command"
    },
    {
        "name": "ldap_exop",
        "url": "function.ldap-exop.php",
        "description": "Performs an extended operation"
    },
    {
        "name": "ldap_exop_refresh",
        "url": "function.ldap-exop-refresh.php",
        "description": "Refresh extended operation helper"
    },
    {
        "name": "ldap_exop_whoami",
        "url": "function.ldap-exop-whoami.php",
        "description": "WHOAMI extended operation helper"
    },
    {
        "name": "ldap_first_attribute",
        "url": "function.ldap-first-attribute.php",
        "description": "Return first attribute"
    },
    {
        "name": "ldap_first_reference",
        "url": "function.ldap-first-reference.php",
        "description": "Return first reference"
    },
    {
        "name": "ldap_get_attributes",
        "url": "function.ldap-get-attributes.php",
        "description": "Get attributes from a search result entry"
    },
    {
        "name": "ldap_get_entries",
        "url": "function.ldap-get-entries.php",
        "description": "Get all result entries"
    },
    {
        "name": "ldap_get_values",
        "url": "function.ldap-get-values.php",
        "description": "Get all values from a result entry"
    },
    {
        "name": "ldap_list",
        "url": "function.ldap-list.php",
        "description": "Single-level search"
    },
    {
        "name": "ldap_modify_batch",
        "url": "function.ldap-modify-batch.php",
        "description": "Batch and execute modifications on an LDAP entry"
    },
    {
        "name": "ldap_mod_add_ext",
        "url": "function.ldap-mod_add-ext.php",
        "description": "Add attribute values to current attributes"
    },
    {
        "name": "ldap_mod_del_ext",
        "url": "function.ldap-mod_del-ext.php",
        "description": "Delete attribute values from current attributes"
    },
    {
        "name": "ldap_mod_replace_ext",
        "url": "function.ldap-mod_replace-ext.php",
        "description": "Replace attribute values with new ones"
    },
    {
        "name": "ldap_next_entry",
        "url": "function.ldap-next-entry.php",
        "description": "Get next result entry"
    },
    {
        "name": "ldap_parse_exop",
        "url": "function.ldap-parse-exop.php",
        "description": "Parse result object from an LDAP extended operation"
    },
    {
        "name": "ldap_parse_result",
        "url": "function.ldap-parse-result.php",
        "description": "Extract information from result"
    },
    {
        "name": "ldap_rename",
        "url": "function.ldap-rename.php",
        "description": "Modify the name of an entry"
    },
    {
        "name": "ldap_sasl_bind",
        "url": "function.ldap-sasl-bind.php",
        "description": "Bind to LDAP directory using SASL"
    },
    {
        "name": "ldap_set_option",
        "url": "function.ldap-set-option.php",
        "description": "Set the value of the given option"
    },
    {
        "name": "ldap_sort",
        "url": "function.ldap-sort.php",
        "description": "Sort LDAP result entries on the client side"
    },
    {
        "name": "ldap_t61_to_8859",
        "url": "function.ldap-t61-to-8859.php",
        "description": "Translate t61 characters to 8859 characters"
    },
    {
        "name": "levenshtein",
        "url": "function.levenshtein.php",
        "description": "Calculate Levenshtein distance between two strings"
    },
    {
        "name": "libxml_disable_entity_loader",
        "url": "function.libxml-disable-entity-loader.php",
        "description": "Disable the ability to load external entities"
    },
    {
        "name": "libxml_get_external_entity_loader",
        "url": "function.libxml-get-external-entity-loader.php",
        "description": "Get the current external entity loader"
    },
    {
        "name": "libxml_set_external_entity_loader",
        "url": "function.libxml-set-external-entity-loader.php",
        "description": "Changes the default external entity loader"
    },
    {
        "name": "libxml_use_internal_errors",
        "url": "function.libxml-use-internal-errors.php",
        "description": "Disable libxml errors and allow user to fetch error information as needed"
    },
    {
        "name": "LimitIterator::getPosition",
        "url": "limititerator.getposition.php",
        "description": "Return the current position"
    },
    {
        "name": "LimitIterator::next",
        "url": "limititerator.next.php",
        "description": "Move the iterator forward"
    },
    {
        "name": "LimitIterator::seek",
        "url": "limititerator.seek.php",
        "description": "Seek to the given position"
    },
    {
        "name": "LimitIterator::__construct",
        "url": "limititerator.construct.php",
        "description": "Construct a LimitIterator"
    },
    {
        "name": "linkinfo",
        "url": "function.linkinfo.php",
        "description": "Gets information about a link"
    },
    {
        "name": "Locale::acceptFromHttp",
        "url": "locale.acceptfromhttp.php",
        "description": "Tries to find out best available locale based on HTTP &quot;Accept-Language&quot; header"
    },
    {
        "name": "Locale::composeLocale",
        "url": "locale.composelocale.php",
        "description": "Returns a correctly ordered and delimited locale ID"
    },
    {
        "name": "Locale::getAllVariants",
        "url": "locale.getallvariants.php",
        "description": "Gets the variants for the input locale"
    },
    {
        "name": "Locale::getDisplayLanguage",
        "url": "locale.getdisplaylanguage.php",
        "description": "Returns an appropriately localized display name for language of the inputlocale"
    },
    {
        "name": "Locale::getDisplayRegion",
        "url": "locale.getdisplayregion.php",
        "description": "Returns an appropriately localized display name for region of the input locale"
    },
    {
        "name": "Locale::getDisplayVariant",
        "url": "locale.getdisplayvariant.php",
        "description": "Returns an appropriately localized display name for variants of the input locale"
    },
    {
        "name": "Locale::getPrimaryLanguage",
        "url": "locale.getprimarylanguage.php",
        "description": "Gets the primary language for the input locale"
    },
    {
        "name": "Locale::getScript",
        "url": "locale.getscript.php",
        "description": "Gets the script for the input locale"
    },
    {
        "name": "Locale::parseLocale",
        "url": "locale.parselocale.php",
        "description": "Returns a key-value array of locale ID subtag elements"
    },
    {
        "name": "localeconv",
        "url": "function.localeconv.php",
        "description": "Get numeric formatting information"
    },
    {
        "name": "log",
        "url": "function.log.php",
        "description": "Natural logarithm"
    },
    {
        "name": "log10",
        "url": "function.log10.php",
        "description": "Base-10 logarithm"
    },
    {
        "name": "lstat",
        "url": "function.lstat.php",
        "description": "Gives information about a file or symbolic link"
    },
    {
        "name": "Lua::assign",
        "url": "lua.assign.php",
        "description": "Assign a PHP variable to Lua"
    },
    {
        "name": "Lua::eval",
        "url": "lua.eval.php",
        "description": "Evaluate a string as Lua code"
    },
    {
        "name": "Lua::include",
        "url": "lua.include.php",
        "description": "Parse a Lua script file"
    },
    {
        "name": "Lua::__construct",
        "url": "lua.construct.php",
        "description": "Lua constructor"
    },
    {
        "name": "LuaSandbox::callFunction",
        "url": "luasandbox.callfunction.php",
        "description": "Call a function in a Lua global variable"
    },
    {
        "name": "LuaSandbox::enableProfiler",
        "url": "luasandbox.enableprofiler.php",
        "description": "Enable the profiler."
    },
    {
        "name": "LuaSandbox::getMemoryUsage",
        "url": "luasandbox.getmemoryusage.php",
        "description": "Fetch the current memory usage of the Lua environment"
    },
    {
        "name": "LuaSandbox::getProfilerFunctionReport",
        "url": "luasandbox.getprofilerfunctionreport.php",
        "description": "Fetch profiler data"
    },
    {
        "name": "LuaSandbox::loadBinary",
        "url": "luasandbox.loadbinary.php",
        "description": "Load a precompiled binary chunk into the Lua environment"
    },
    {
        "name": "LuaSandbox::pauseUsageTimer",
        "url": "luasandbox.pauseusagetimer.php",
        "description": "Pause the CPU usage timer"
    },
    {
        "name": "LuaSandbox::setCPULimit",
        "url": "luasandbox.setcpulimit.php",
        "description": "Set the CPU time limit for the Lua environment"
    },
    {
        "name": "LuaSandbox::unpauseUsageTimer",
        "url": "luasandbox.unpauseusagetimer.php",
        "description": "Unpause the timer paused by LuaSandbox::pauseUsageTimer"
    },
    {
        "name": "LuaSandboxFunction::call",
        "url": "luasandboxfunction.call.php",
        "description": "Call a Lua function"
    },
    {
        "name": "LuaSandboxFunction::__construct",
        "url": "luasandboxfunction.construct.php",
        "description": "Unused"
    },
    {
        "name": "lzf_decompress",
        "url": "function.lzf-decompress.php",
        "description": "LZF decompression"
    },
    {
        "name": "mail",
        "url": "function.mail.php",
        "description": "Send mail"
    },
    {
        "name": "mailparse_msg_create",
        "url": "function.mailparse-msg-create.php",
        "description": "Create a mime mail resource"
    },
    {
        "name": "mailparse_msg_extract_part_file",
        "url": "function.mailparse-msg-extract-part-file.php",
        "description": "Extracts\/decodes a message section"
    },
    {
        "name": "mailparse_msg_free",
        "url": "function.mailparse-msg-free.php",
        "description": "Frees a MIME resource"
    },
    {
        "name": "mailparse_msg_get_part_data",
        "url": "function.mailparse-msg-get-part-data.php",
        "description": "Returns an associative array of info about the message"
    },
    {
        "name": "mailparse_msg_parse",
        "url": "function.mailparse-msg-parse.php",
        "description": "Incrementally parse data into buffer"
    },
    {
        "name": "mailparse_rfc822_parse_addresses",
        "url": "function.mailparse-rfc822-parse-addresses.php",
        "description": "Parse RFC 822 compliant addresses"
    },
    {
        "name": "mailparse_uudecode_all",
        "url": "function.mailparse-uudecode-all.php",
        "description": "Scans the data from fp and extract each embedded uuencoded file"
    },
    {
        "name": "mb_check_encoding",
        "url": "function.mb-check-encoding.php",
        "description": "Check if strings are valid for the specified encoding"
    },
    {
        "name": "mb_convert_case",
        "url": "function.mb-convert-case.php",
        "description": "Perform case folding on a string"
    },
    {
        "name": "mb_convert_kana",
        "url": "function.mb-convert-kana.php",
        "description": "Convert &quot;kana&quot; one from another (&quot;zen-kaku&quot;, &quot;han-kaku&quot; and more)"
    },
    {
        "name": "mb_decode_mimeheader",
        "url": "function.mb-decode-mimeheader.php",
        "description": "Decode string in MIME header field"
    },
    {
        "name": "mb_detect_encoding",
        "url": "function.mb-detect-encoding.php",
        "description": "Detect character encoding"
    },
    {
        "name": "mb_encode_mimeheader",
        "url": "function.mb-encode-mimeheader.php",
        "description": "Encode string for MIME header"
    },
    {
        "name": "mb_encoding_aliases",
        "url": "function.mb-encoding-aliases.php",
        "description": "Get aliases of a known encoding type"
    },
    {
        "name": "mb_eregi",
        "url": "function.mb-eregi.php",
        "description": "Regular expression match ignoring case with multibyte support"
    },
    {
        "name": "mb_ereg_match",
        "url": "function.mb-ereg-match.php",
        "description": "Regular expression match for multibyte string"
    },
    {
        "name": "mb_ereg_replace_callback",
        "url": "function.mb-ereg-replace-callback.php",
        "description": "Perform a regular expression search and replace with multibyte support using a callback"
    },
    {
        "name": "mb_ereg_search_getpos",
        "url": "function.mb-ereg-search-getpos.php",
        "description": "Returns start point for next regular expression match"
    },
    {
        "name": "mb_ereg_search_init",
        "url": "function.mb-ereg-search-init.php",
        "description": "Setup string and regular expression for a multibyte regular expression match"
    },
    {
        "name": "mb_ereg_search_regs",
        "url": "function.mb-ereg-search-regs.php",
        "description": "Returns the matched part of a multibyte regular expression"
    },
    {
        "name": "mb_get_info",
        "url": "function.mb-get-info.php",
        "description": "Get internal settings of mbstring"
    },
    {
        "name": "mb_http_output",
        "url": "function.mb-http-output.php",
        "description": "Set\/Get HTTP output character encoding"
    },
    {
        "name": "mb_language",
        "url": "function.mb-language.php",
        "description": "Set\/Get current language"
    },
    {
        "name": "mb_ord",
        "url": "function.mb-ord.php",
        "description": "Get Unicode code point of character"
    },
    {
        "name": "mb_parse_str",
        "url": "function.mb-parse-str.php",
        "description": "Parse GET\/POST\/COOKIE data and set global variable"
    },
    {
        "name": "mb_regex_encoding",
        "url": "function.mb-regex-encoding.php",
        "description": "Set\/Get character encoding for multibyte regex"
    },
    {
        "name": "mb_scrub",
        "url": "function.mb-scrub.php",
        "description": "Replace ill-formed byte sequences with the substitute character"
    },
    {
        "name": "mb_split",
        "url": "function.mb-split.php",
        "description": "Split multibyte string using regular expression"
    },
    {
        "name": "mb_strimwidth",
        "url": "function.mb-strimwidth.php",
        "description": "Get truncated string with specified width"
    },
    {
        "name": "mb_stristr",
        "url": "function.mb-stristr.php",
        "description": "Finds first occurrence of a string within another, case insensitive"
    },
    {
        "name": "mb_strpos",
        "url": "function.mb-strpos.php",
        "description": "Find position of first occurrence of string in a string"
    },
    {
        "name": "mb_strrichr",
        "url": "function.mb-strrichr.php",
        "description": "Finds the last occurrence of a character in a string within another, case insensitive"
    },
    {
        "name": "mb_strrpos",
        "url": "function.mb-strrpos.php",
        "description": "Find position of last occurrence of a string in a string"
    },
    {
        "name": "mb_strtolower",
        "url": "function.mb-strtolower.php",
        "description": "Make a string lowercase"
    },
    {
        "name": "mb_strwidth",
        "url": "function.mb-strwidth.php",
        "description": "Return width of string"
    },
    {
        "name": "mb_str_split",
        "url": "function.mb-str-split.php",
        "description": "Given a multibyte string, return an array of its characters"
    },
    {
        "name": "mb_substr",
        "url": "function.mb-substr.php",
        "description": "Get part of string"
    },
    {
        "name": "mcrypt_create_iv",
        "url": "function.mcrypt-create-iv.php",
        "description": "Creates an initialization vector (IV) from a random source"
    },
    {
        "name": "mcrypt_encrypt",
        "url": "function.mcrypt-encrypt.php",
        "description": "Encrypts plaintext with given parameters"
    },
    {
        "name": "mcrypt_enc_get_block_size",
        "url": "function.mcrypt-enc-get-block-size.php",
        "description": "Returns the blocksize of the opened algorithm"
    },
    {
        "name": "mcrypt_enc_get_key_size",
        "url": "function.mcrypt-enc-get-key-size.php",
        "description": "Returns the maximum supported keysize of the opened mode"
    },
    {
        "name": "mcrypt_enc_get_supported_key_sizes",
        "url": "function.mcrypt-enc-get-supported-key-sizes.php",
        "description": "Returns an array with the supported keysizes of the opened algorithm"
    },
    {
        "name": "mcrypt_enc_is_block_algorithm_mode",
        "url": "function.mcrypt-enc-is-block-algorithm-mode.php",
        "description": "Checks whether the encryption of the opened mode works on blocks"
    },
    {
        "name": "mcrypt_enc_self_test",
        "url": "function.mcrypt-enc-self-test.php",
        "description": "Runs a self test on the opened module"
    },
    {
        "name": "mcrypt_generic_deinit",
        "url": "function.mcrypt-generic-deinit.php",
        "description": "This function deinitializes an encryption module"
    },
    {
        "name": "mcrypt_get_block_size",
        "url": "function.mcrypt-get-block-size.php",
        "description": "Gets the block size of the specified cipher"
    },
    {
        "name": "mcrypt_get_iv_size",
        "url": "function.mcrypt-get-iv-size.php",
        "description": "Returns the size of the IV belonging to a specific cipher\/mode combination"
    },
    {
        "name": "mcrypt_list_algorithms",
        "url": "function.mcrypt-list-algorithms.php",
        "description": "Gets an array of all supported ciphers"
    },
    {
        "name": "mcrypt_module_close",
        "url": "function.mcrypt-module-close.php",
        "description": "Closes the mcrypt module"
    },
    {
        "name": "mcrypt_module_get_algo_key_size",
        "url": "function.mcrypt-module-get-algo-key-size.php",
        "description": "Returns the maximum supported keysize of the opened mode"
    },
    {
        "name": "mcrypt_module_is_block_algorithm",
        "url": "function.mcrypt-module-is-block-algorithm.php",
        "description": "This function checks whether the specified algorithm is a block algorithm"
    },
    {
        "name": "mcrypt_module_is_block_mode",
        "url": "function.mcrypt-module-is-block-mode.php",
        "description": "Returns if the specified mode outputs blocks or not"
    },
    {
        "name": "mcrypt_module_self_test",
        "url": "function.mcrypt-module-self-test.php",
        "description": "This function runs a self test on the specified module"
    },
    {
        "name": "md5_file",
        "url": "function.md5-file.php",
        "description": "Calculates the md5 hash of a given file"
    },
    {
        "name": "Memcache::add",
        "url": "memcache.add.php",
        "description": "Add an item to the server"
    },
    {
        "name": "Memcache::close",
        "url": "memcache.close.php",
        "description": "Close memcached server connection"
    },
    {
        "name": "Memcache::decrement",
        "url": "memcache.decrement.php",
        "description": "Decrement item's value"
    },
    {
        "name": "Memcache::flush",
        "url": "memcache.flush.php",
        "description": "Flush all existing items at the server"
    },
    {
        "name": "Memcache::getExtendedStats",
        "url": "memcache.getextendedstats.php",
        "description": "Get statistics from all servers in pool"
    },
    {
        "name": "Memcache::getStats",
        "url": "memcache.getstats.php",
        "description": "Get statistics of the server"
    },
    {
        "name": "Memcache::increment",
        "url": "memcache.increment.php",
        "description": "Increment item's value"
    },
    {
        "name": "Memcache::replace",
        "url": "memcache.replace.php",
        "description": "Replace value of the existing item"
    },
    {
        "name": "Memcache::setCompressThreshold",
        "url": "memcache.setcompressthreshold.php",
        "description": "Enable automatic compression of large values"
    },
    {
        "name": "Memcached::add",
        "url": "memcached.add.php",
        "description": "Add an item under a new key"
    },
    {
        "name": "Memcached::addServer",
        "url": "memcached.addserver.php",
        "description": "Add a server to the server pool"
    },
    {
        "name": "Memcached::append",
        "url": "memcached.append.php",
        "description": "Append data to an existing item"
    },
    {
        "name": "Memcached::cas",
        "url": "memcached.cas.php",
        "description": "Compare and swap an item"
    },
    {
        "name": "Memcached::decrement",
        "url": "memcached.decrement.php",
        "description": "Decrement numeric item's value"
    },
    {
        "name": "Memcached::delete",
        "url": "memcached.delete.php",
        "description": "Delete an item"
    },
    {
        "name": "Memcached::deleteMulti",
        "url": "memcached.deletemulti.php",
        "description": "Delete multiple items"
    },
    {
        "name": "Memcached::fetch",
        "url": "memcached.fetch.php",
        "description": "Fetch the next result"
    },
    {
        "name": "Memcached::flush",
        "url": "memcached.flush.php",
        "description": "Invalidate all items in the cache"
    },
    {
        "name": "Memcached::getAllKeys",
        "url": "memcached.getallkeys.php",
        "description": "Gets the keys stored on all the servers"
    },
    {
        "name": "Memcached::getDelayed",
        "url": "memcached.getdelayed.php",
        "description": "Request multiple items"
    },
    {
        "name": "Memcached::getMulti",
        "url": "memcached.getmulti.php",
        "description": "Retrieve multiple items"
    },
    {
        "name": "Memcached::getOption",
        "url": "memcached.getoption.php",
        "description": "Retrieve a Memcached option value"
    },
    {
        "name": "Memcached::getResultMessage",
        "url": "memcached.getresultmessage.php",
        "description": "Return the message describing the result of the last operation"
    },
    {
        "name": "Memcached::getServerList",
        "url": "memcached.getserverlist.php",
        "description": "Get the list of the servers in the pool"
    },
    {
        "name": "Memcached::getVersion",
        "url": "memcached.getversion.php",
        "description": "Get server pool version info"
    },
    {
        "name": "Memcached::incrementByKey",
        "url": "memcached.incrementbykey.php",
        "description": "Increment numeric item's value, stored on a specific server"
    },
    {
        "name": "Memcached::isPristine",
        "url": "memcached.ispristine.php",
        "description": "Check if the instance was recently created"
    },
    {
        "name": "Memcached::prependByKey",
        "url": "memcached.prependbykey.php",
        "description": "Prepend data to an existing item on a specific server"
    },
    {
        "name": "Memcached::replace",
        "url": "memcached.replace.php",
        "description": "Replace the item under an existing key"
    },
    {
        "name": "Memcached::resetServerList",
        "url": "memcached.resetserverlist.php",
        "description": "Clears all servers from the server list"
    },
    {
        "name": "Memcached::setByKey",
        "url": "memcached.setbykey.php",
        "description": "Store an item on a specific server"
    },
    {
        "name": "Memcached::setMultiByKey",
        "url": "memcached.setmultibykey.php",
        "description": "Store multiple items on a specific server"
    },
    {
        "name": "Memcached::setOptions",
        "url": "memcached.setoptions.php",
        "description": "Set Memcached options"
    },
    {
        "name": "Memcached::touch",
        "url": "memcached.touch.php",
        "description": "Set a new expiration on an item"
    },
    {
        "name": "Memcached::__construct",
        "url": "memcached.construct.php",
        "description": "Create a Memcached instance"
    },
    {
        "name": "memory_get_peak_usage",
        "url": "function.memory-get-peak-usage.php",
        "description": "Returns the peak of memory allocated by PHP"
    },
    {
        "name": "memory_reset_peak_usage",
        "url": "function.memory-reset-peak-usage.php",
        "description": "Reset the peak memory usage"
    },
    {
        "name": "MessageFormatter::format",
        "url": "messageformatter.format.php",
        "description": "Format the message"
    },
    {
        "name": "MessageFormatter::getErrorCode",
        "url": "messageformatter.geterrorcode.php",
        "description": "Get the error code from last operation"
    },
    {
        "name": "MessageFormatter::getLocale",
        "url": "messageformatter.getlocale.php",
        "description": "Get the locale for which the formatter was created"
    },
    {
        "name": "MessageFormatter::parse",
        "url": "messageformatter.parse.php",
        "description": "Parse input string according to pattern"
    },
    {
        "name": "MessageFormatter::setPattern",
        "url": "messageformatter.setpattern.php",
        "description": "Set the pattern used by the formatter"
    },
    {
        "name": "method_exists",
        "url": "function.method-exists.php",
        "description": "Checks if the class method exists"
    },
    {
        "name": "mhash_count",
        "url": "function.mhash-count.php",
        "description": "Gets the highest available hash ID"
    },
    {
        "name": "mhash_get_hash_name",
        "url": "function.mhash-get-hash-name.php",
        "description": "Gets the name of the specified hash"
    },
    {
        "name": "microtime",
        "url": "function.microtime.php",
        "description": "Return current Unix timestamp with microseconds"
    },
    {
        "name": "min",
        "url": "function.min.php",
        "description": "Find lowest value"
    },
    {
        "name": "mktime",
        "url": "function.mktime.php",
        "description": "Get Unix timestamp for a date"
    },
    {
        "name": "MongoDB\\BSON\\Binary::getData",
        "url": "mongodb-bson-binary.getdata.php",
        "description": "Returns the Binary's data"
    },
    {
        "name": "MongoDB\\BSON\\Binary::jsonSerialize",
        "url": "mongodb-bson-binary.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "MongoDB\\BSON\\Binary::unserialize",
        "url": "mongodb-bson-binary.unserialize.php",
        "description": "Unserialize a Binary"
    },
    {
        "name": "MongoDB\\BSON\\Binary::__toString",
        "url": "mongodb-bson-binary.tostring.php",
        "description": "Returns the Binary's data"
    },
    {
        "name": "MongoDB\\BSON\\BinaryInterface::getType",
        "url": "mongodb-bson-binaryinterface.gettype.php",
        "description": "Returns the BinaryInterface's type"
    },
    {
        "name": "MongoDB\\BSON\\DBPointer::jsonSerialize",
        "url": "mongodb-bson-dbpointer.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "MongoDB\\BSON\\DBPointer::unserialize",
        "url": "mongodb-bson-dbpointer.unserialize.php",
        "description": "Unserialize a DBPointer"
    },
    {
        "name": "MongoDB\\BSON\\DBPointer::__toString",
        "url": "mongodb-bson-dbpointer.tostring.php",
        "description": "Returns an empty string"
    },
    {
        "name": "MongoDB\\BSON\\Decimal128::serialize",
        "url": "mongodb-bson-decimal128.serialize.php",
        "description": "Serialize a Decimal128"
    },
    {
        "name": "MongoDB\\BSON\\Decimal128::__construct",
        "url": "mongodb-bson-decimal128.construct.php",
        "description": "Construct a new Decimal128"
    },
    {
        "name": "MongoDB\\BSON\\Decimal128Interface::__toString",
        "url": "mongodb-bson-decimal128interface.tostring.php",
        "description": "Returns the string representation of this Decimal128Interface"
    },
    {
        "name": "MongoDB\\BSON\\Document::fromJSON",
        "url": "mongodb-bson-document.fromjson.php",
        "description": "Construct a new document instance from a JSON string"
    },
    {
        "name": "MongoDB\\BSON\\Document::get",
        "url": "mongodb-bson-document.get.php",
        "description": "Returns the value of a key in the document"
    },
    {
        "name": "MongoDB\\BSON\\Document::has",
        "url": "mongodb-bson-document.has.php",
        "description": "Returns whether a key is present in the document"
    },
    {
        "name": "MongoDB\\BSON\\Document::toCanonicalExtendedJSON",
        "url": "mongodb-bson-document.tocanonicalextendedjson.php",
        "description": "Returns the Canonical Extended JSON representation of the BSON document"
    },
    {
        "name": "MongoDB\\BSON\\Document::toRelaxedExtendedJSON",
        "url": "mongodb-bson-document.torelaxedextendedjson.php",
        "description": "Returns the Relaxed Extended JSON representation of the BSON document"
    },
    {
        "name": "MongoDB\\BSON\\Document::__construct",
        "url": "mongodb-bson-document.construct.php",
        "description": "Construct a new BSON document (unused)"
    },
    {
        "name": "MongoDB\\BSON\\fromJSON",
        "url": "function.mongodb.bson-fromjson.php",
        "description": "Returns the BSON representation of a JSON value"
    },
    {
        "name": "MongoDB\\BSON\\Int64::jsonSerialize",
        "url": "mongodb-bson-int64.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "MongoDB\\BSON\\Int64::unserialize",
        "url": "mongodb-bson-int64.unserialize.php",
        "description": "Unserialize an Int64"
    },
    {
        "name": "MongoDB\\BSON\\Int64::__toString",
        "url": "mongodb-bson-int64.tostring.php",
        "description": "Returns the string representation of this Int64"
    },
    {
        "name": "MongoDB\\BSON\\Iterator::key",
        "url": "mongodb-bson-iterator.key.php",
        "description": "Returns the key of the current element"
    },
    {
        "name": "MongoDB\\BSON\\Iterator::rewind",
        "url": "mongodb-bson-iterator.rewind.php",
        "description": "Rewinds the Iterator to the first element"
    },
    {
        "name": "MongoDB\\BSON\\Iterator::__construct",
        "url": "mongodb-bson-iterator.construct.php",
        "description": "Construct a new BSON iterator (unused)"
    },
    {
        "name": "MongoDB\\BSON\\Javascript::getScope",
        "url": "mongodb-bson-javascript.getscope.php",
        "description": "Returns the Javascript's scope document"
    },
    {
        "name": "MongoDB\\BSON\\Javascript::serialize",
        "url": "mongodb-bson-javascript.serialize.php",
        "description": "Serialize a Javascript"
    },
    {
        "name": "MongoDB\\BSON\\Javascript::__construct",
        "url": "mongodb-bson-javascript.construct.php",
        "description": "Construct a new Javascript"
    },
    {
        "name": "MongoDB\\BSON\\JavascriptInterface::getCode",
        "url": "mongodb-bson-javascriptinterface.getcode.php",
        "description": "Returns the JavascriptInterface's code"
    },
    {
        "name": "MongoDB\\BSON\\JavascriptInterface::__toString",
        "url": "mongodb-bson-javascriptinterface.tostring.php",
        "description": "Returns the JavascriptInterface's code"
    },
    {
        "name": "MongoDB\\BSON\\MaxKey::serialize",
        "url": "mongodb-bson-maxkey.serialize.php",
        "description": "Serialize a MaxKey"
    },
    {
        "name": "MongoDB\\BSON\\MaxKey::__construct",
        "url": "mongodb-bson-maxkey.construct.php",
        "description": "Construct a new MaxKey"
    },
    {
        "name": "MongoDB\\BSON\\MinKey::serialize",
        "url": "mongodb-bson-minkey.serialize.php",
        "description": "Serialize a MinKey"
    },
    {
        "name": "MongoDB\\BSON\\MinKey::__construct",
        "url": "mongodb-bson-minkey.construct.php",
        "description": "Construct a new MinKey"
    },
    {
        "name": "MongoDB\\BSON\\ObjectId::jsonSerialize",
        "url": "mongodb-bson-objectid.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "MongoDB\\BSON\\ObjectId::unserialize",
        "url": "mongodb-bson-objectid.unserialize.php",
        "description": "Unserialize an ObjectId"
    },
    {
        "name": "MongoDB\\BSON\\ObjectId::__toString",
        "url": "mongodb-bson-objectid.tostring.php",
        "description": "Returns the hexidecimal representation of this ObjectId"
    },
    {
        "name": "MongoDB\\BSON\\ObjectIdInterface::__toString",
        "url": "mongodb-bson-objectidinterface.tostring.php",
        "description": "Returns the hexidecimal representation of this ObjectIdInterface"
    },
    {
        "name": "MongoDB\\BSON\\PackedArray::get",
        "url": "mongodb-bson-packedarray.get.php",
        "description": "Returns the value of an index in the array"
    },
    {
        "name": "MongoDB\\BSON\\PackedArray::has",
        "url": "mongodb-bson-packedarray.has.php",
        "description": "Returns whether a index is present in the array"
    },
    {
        "name": "MongoDB\\BSON\\PackedArray::toPHP",
        "url": "mongodb-bson-packedarray.tophp.php",
        "description": "Returns the PHP representation of the BSON array"
    },
    {
        "name": "MongoDB\\BSON\\PackedArray::__construct",
        "url": "mongodb-bson-packedarray.construct.php",
        "description": "Construct a new BSON array (unused)"
    },
    {
        "name": "MongoDB\\BSON\\Persistable::bsonSerialize",
        "url": "mongodb-bson-persistable.bsonserialize.php",
        "description": "Provides an array or document to serialize as BSON"
    },
    {
        "name": "MongoDB\\BSON\\Regex::getPattern",
        "url": "mongodb-bson-regex.getpattern.php",
        "description": "Returns the Regex's pattern"
    },
    {
        "name": "MongoDB\\BSON\\Regex::serialize",
        "url": "mongodb-bson-regex.serialize.php",
        "description": "Serialize a Regex"
    },
    {
        "name": "MongoDB\\BSON\\Regex::__construct",
        "url": "mongodb-bson-regex.construct.php",
        "description": "Construct a new Regex"
    },
    {
        "name": "MongoDB\\BSON\\RegexInterface::getFlags",
        "url": "mongodb-bson-regexinterface.getflags.php",
        "description": "Returns the RegexInterface's flags"
    },
    {
        "name": "MongoDB\\BSON\\RegexInterface::__toString",
        "url": "mongodb-bson-regexinterface.tostring.php",
        "description": "Returns the string representation of this RegexInterface"
    },
    {
        "name": "MongoDB\\BSON\\Symbol::jsonSerialize",
        "url": "mongodb-bson-symbol.jsonserialize.php",
        "description": "Returns a representation that can be converted to JSON"
    },
    {
        "name": "MongoDB\\BSON\\Symbol::unserialize",
        "url": "mongodb-bson-symbol.unserialize.php",
        "description": "Unserialize a Symbol"
    },
    {
        "name": "MongoDB\\BSON\\Symbol::__toString",
        "url": "mongodb-bson-symbol.tostring.php",
        "description": "Returns the Symbol as a string"
    },
    {
        "name": "MongoDB\\BSON\\Timestamp::getTimestamp",
        "url": "mongodb-bson-timestamp.gettimestamp.php",
        "description": "Returns the timestamp component of this Timestamp"
    },
    {
        "name": "MongoDB\\BSON\\Timestamp::serialize",
        "url": "mongodb-bson-timestamp.serialize.php",
        "description": "Serialize a Timestamp"
    },
    {
        "name": "MongoDB\\BSON\\Timestamp::__construct",
        "url": "mongodb-bson-timestamp.construct.php",
        "description": "Construct a new Timestamp"
    },
    {
        "name": "MongoDB\\BSON\\TimestampInterface::getIncrement",
        "url": "mongodb-bson-timestampinterface.getincrement.php",
        "description": "Returns the increment component of this TimestampInterface"
    },
    {
        "name": "MongoDB\\BSON\\TimestampInterface::__toString",
        "url": "mongodb-bson-timestampinterface.tostring.php",
        "description": "Returns the string representation of this TimestampInterface"
    },
    {
        "name": "MongoDB\\BSON\\toJSON",
        "url": "function.mongodb.bson-tojson.php",
        "description": "Returns the Legacy Extended JSON representation of a BSON value"
    },
    {
        "name": "MongoDB\\BSON\\toRelaxedExtendedJSON",
        "url": "function.mongodb.bson-torelaxedextendedjson.php",
        "description": "Returns the Relaxed Extended JSON representation of a BSON value"
    },
    {
        "name": "MongoDB\\BSON\\Undefined::serialize",
        "url": "mongodb-bson-undefined.serialize.php",
        "description": "Serialize a Undefined"
    },
    {
        "name": "MongoDB\\BSON\\Undefined::__construct",
        "url": "mongodb-bson-undefined.construct.php",
        "description": "Construct a new Undefined (unused)"
    },
    {
        "name": "MongoDB\\BSON\\Unserializable::bsonUnserialize",
        "url": "mongodb-bson-unserializable.bsonunserialize.php",
        "description": "Constructs the object from a BSON array or document"
    },
    {
        "name": "MongoDB\\BSON\\UTCDateTime::serialize",
        "url": "mongodb-bson-utcdatetime.serialize.php",
        "description": "Serialize a UTCDateTime"
    },
    {
        "name": "MongoDB\\BSON\\UTCDateTime::unserialize",
        "url": "mongodb-bson-utcdatetime.unserialize.php",
        "description": "Unserialize a UTCDateTime"
    },
    {
        "name": "MongoDB\\BSON\\UTCDateTime::__toString",
        "url": "mongodb-bson-utcdatetime.tostring.php",
        "description": "Returns the string representation of this UTCDateTime"
    },
    {
        "name": "MongoDB\\BSON\\UTCDateTimeInterface::__toString",
        "url": "mongodb-bson-utcdatetimeinterface.tostring.php",
        "description": "Returns the string representation of this UTCDateTimeInterface"
    },
    {
        "name": "MongoDB\\Driver\\BulkWrite::delete",
        "url": "mongodb-driver-bulkwrite.delete.php",
        "description": "Add a delete operation to the bulk"
    },
    {
        "name": "MongoDB\\Driver\\BulkWrite::update",
        "url": "mongodb-driver-bulkwrite.update.php",
        "description": "Add an update operation to the bulk"
    },
    {
        "name": "MongoDB\\Driver\\ClientEncryption::addKeyAltName",
        "url": "mongodb-driver-clientencryption.addkeyaltname.php",
        "description": "Adds an alternate name to a key document"
    },
    {
        "name": "MongoDB\\Driver\\ClientEncryption::decrypt",
        "url": "mongodb-driver-clientencryption.decrypt.php",
        "description": "Decrypt a value"
    },
    {
        "name": "MongoDB\\Driver\\ClientEncryption::encrypt",
        "url": "mongodb-driver-clientencryption.encrypt.php",
        "description": "Encrypt a value"
    },
    {
        "name": "MongoDB\\Driver\\ClientEncryption::getKey",
        "url": "mongodb-driver-clientencryption.getkey.php",
        "description": "Gets a key document"
    },
    {
        "name": "MongoDB\\Driver\\ClientEncryption::getKeys",
        "url": "mongodb-driver-clientencryption.getkeys.php",
        "description": "Gets all key documents"
    },
    {
        "name": "MongoDB\\Driver\\ClientEncryption::rewrapManyDataKey",
        "url": "mongodb-driver-clientencryption.rewrapmanydatakey.php",
        "description": "Rewraps data keys"
    },
    {
        "name": "MongoDB\\Driver\\Command::__construct",
        "url": "mongodb-driver-command.construct.php",
        "description": "Create a new Command"
    },
    {
        "name": "MongoDB\\Driver\\Cursor::getId",
        "url": "mongodb-driver-cursor.getid.php",
        "description": "Returns the ID for this cursor"
    },
    {
        "name": "MongoDB\\Driver\\Cursor::isDead",
        "url": "mongodb-driver-cursor.isdead.php",
        "description": "Checks if the cursor is exhausted or may have additional results"
    },
    {
        "name": "MongoDB\\Driver\\Cursor::next",
        "url": "mongodb-driver-cursor.next.php",
        "description": "Advances the cursor to the next result"
    },
    {
        "name": "MongoDB\\Driver\\Cursor::setTypeMap",
        "url": "mongodb-driver-cursor.settypemap.php",
        "description": "Sets a type map to use for BSON unserialization"
    },
    {
        "name": "MongoDB\\Driver\\Cursor::valid",
        "url": "mongodb-driver-cursor.valid.php",
        "description": "Checks if the current position in the cursor is valid"
    },
    {
        "name": "MongoDB\\Driver\\CursorId::serialize",
        "url": "mongodb-driver-cursorid.serialize.php",
        "description": "Serialize a CursorId"
    },
    {
        "name": "MongoDB\\Driver\\CursorId::__construct",
        "url": "mongodb-driver-cursorid.construct.php",
        "description": "Create a new CursorId (not used)"
    },
    {
        "name": "MongoDB\\Driver\\CursorInterface::getId",
        "url": "mongodb-driver-cursorinterface.getid.php",
        "description": "Returns the ID for this cursor"
    },
    {
        "name": "MongoDB\\Driver\\CursorInterface::isDead",
        "url": "mongodb-driver-cursorinterface.isdead.php",
        "description": "Checks if the cursor may have additional results"
    },
    {
        "name": "MongoDB\\Driver\\CursorInterface::toArray",
        "url": "mongodb-driver-cursorinterface.toarray.php",
        "description": "Returns an array containing all results for this cursor"
    },
    {
        "name": "MongoDB\\Driver\\Exception\\RuntimeException::hasErrorLabel",
        "url": "mongodb-driver-runtimeexception.haserrorlabel.php",
        "description": "Returns whether an error label is associated with an exception"
    },
    {
        "name": "MongoDB\\Driver\\Manager::addSubscriber",
        "url": "mongodb-driver-manager.addsubscriber.php",
        "description": "Registers a monitoring event subscriber with this Manager"
    },
    {
        "name": "MongoDB\\Driver\\Manager::executeBulkWrite",
        "url": "mongodb-driver-manager.executebulkwrite.php",
        "description": "Execute one or more write operations"
    },
    {
        "name": "MongoDB\\Driver\\Manager::executeQuery",
        "url": "mongodb-driver-manager.executequery.php",
        "description": "Execute a database query"
    },
    {
        "name": "MongoDB\\Driver\\Manager::executeReadWriteCommand",
        "url": "mongodb-driver-manager.executereadwritecommand.php",
        "description": "Execute a database command that reads and writes"
    },
    {
        "name": "MongoDB\\Driver\\Manager::getEncryptedFieldsMap",
        "url": "mongodb-driver-manager.getencryptedfieldsmap.php",
        "description": "Return the encryptedFieldsMap auto encryption option for the Manager"
    },
    {
        "name": "MongoDB\\Driver\\Manager::getReadPreference",
        "url": "mongodb-driver-manager.getreadpreference.php",
        "description": "Return the ReadPreference for the Manager"
    },
    {
        "name": "MongoDB\\Driver\\Manager::getWriteConcern",
        "url": "mongodb-driver-manager.getwriteconcern.php",
        "description": "Return the WriteConcern for the Manager"
    },
    {
        "name": "MongoDB\\Driver\\Manager::selectServer",
        "url": "mongodb-driver-manager.selectserver.php",
        "description": "Select a server matching a read preference"
    },
    {
        "name": "MongoDB\\Driver\\Manager::__construct",
        "url": "mongodb-driver-manager.construct.php",
        "description": "Create new MongoDB Manager"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getCommandName",
        "url": "mongodb-driver-monitoring-commandfailedevent.getcommandname.php",
        "description": "Returns the command name"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getError",
        "url": "mongodb-driver-monitoring-commandfailedevent.geterror.php",
        "description": "Returns the Exception associated with the failed command"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getReply",
        "url": "mongodb-driver-monitoring-commandfailedevent.getreply.php",
        "description": "Returns the command reply document"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServer",
        "url": "mongodb-driver-monitoring-commandfailedevent.getserver.php",
        "description": "Returns the Server on which the command was executed"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandFailedEvent::getServiceId",
        "url": "mongodb-driver-monitoring-commandfailedevent.getserviceid.php",
        "description": "Returns the load balancer service ID for the command"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getCommandName",
        "url": "mongodb-driver-monitoring-commandstartedevent.getcommandname.php",
        "description": "Returns the command name"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getOperationId",
        "url": "mongodb-driver-monitoring-commandstartedevent.getoperationid.php",
        "description": "Returns the command's operation ID"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServer",
        "url": "mongodb-driver-monitoring-commandstartedevent.getserver.php",
        "description": "Returns the Server on which the command was executed"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandStartedEvent::getServiceId",
        "url": "mongodb-driver-monitoring-commandstartedevent.getserviceid.php",
        "description": "Returns the load balancer service ID for the command"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandSubscriber::commandStarted",
        "url": "mongodb-driver-monitoring-commandsubscriber.commandstarted.php",
        "description": "Notification method for a started command"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getCommandName",
        "url": "mongodb-driver-monitoring-commandsucceededevent.getcommandname.php",
        "description": "Returns the command name"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getOperationId",
        "url": "mongodb-driver-monitoring-commandsucceededevent.getoperationid.php",
        "description": "Returns the command's operation ID"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getRequestId",
        "url": "mongodb-driver-monitoring-commandsucceededevent.getrequestid.php",
        "description": "Returns the command's request ID"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\CommandSucceededEvent::getServerConnectionId",
        "url": "mongodb-driver-monitoring-commandsucceededevent.getserverconnectionid.php",
        "description": "Returns the server connection ID for the command"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\LogSubscriber::log",
        "url": "mongodb-driver-monitoring-logsubscriber.log.php",
        "description": "Notification method for a log message"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverChanged",
        "url": "mongodb-driver-monitoring-sdamsubscriber.serverchanged.php",
        "description": "Notification method for a server description change"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverHeartbeatFailed",
        "url": "mongodb-driver-monitoring-sdamsubscriber.serverheartbeatfailed.php",
        "description": "Notification method for a failed server heartbeat"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\SDAMSubscriber::serverHeartbeatSucceeded",
        "url": "mongodb-driver-monitoring-sdamsubscriber.serverheartbeatsucceeded.php",
        "description": "Notification method for a successful server heartbeat"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\SDAMSubscriber::topologyChanged",
        "url": "mongodb-driver-monitoring-sdamsubscriber.topologychanged.php",
        "description": "Notification method for a topology description change"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\SDAMSubscriber::topologyOpening",
        "url": "mongodb-driver-monitoring-sdamsubscriber.topologyopening.php",
        "description": "Notification method for opening the topology"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getNewDescription",
        "url": "mongodb-driver-monitoring-serverchangedevent.getnewdescription.php",
        "description": "Returns the new description for the server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerChangedEvent::getPreviousDescription",
        "url": "mongodb-driver-monitoring-serverchangedevent.getpreviousdescription.php",
        "description": "Returns the previous description for the server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerClosedEvent::getHost",
        "url": "mongodb-driver-monitoring-serverclosedevent.gethost.php",
        "description": "Returns the hostname of the server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerClosedEvent::getTopologyId",
        "url": "mongodb-driver-monitoring-serverclosedevent.gettopologyid.php",
        "description": "Returns the topology ID associated with this server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::getError",
        "url": "mongodb-driver-monitoring-serverheartbeatfailedevent.geterror.php",
        "description": "Returns the Exception associated with the failed heartbeat"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerHeartbeatFailedEvent::getPort",
        "url": "mongodb-driver-monitoring-serverheartbeatfailedevent.getport.php",
        "description": "Returns the port on which this server is listening"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent::getHost",
        "url": "mongodb-driver-monitoring-serverheartbeatstartedevent.gethost.php",
        "description": "Returns the hostname of the server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerHeartbeatStartedEvent::isAwaited",
        "url": "mongodb-driver-monitoring-serverheartbeatstartedevent.isawaited.php",
        "description": "Returns whether the heartbeat used a streaming protocol"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::getHost",
        "url": "mongodb-driver-monitoring-serverheartbeatsucceededevent.gethost.php",
        "description": "Returns the hostname of the server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerHeartbeatSucceededEvent::getReply",
        "url": "mongodb-driver-monitoring-serverheartbeatsucceededevent.getreply.php",
        "description": "Returns the heartbeat reply document"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerOpeningEvent::getHost",
        "url": "mongodb-driver-monitoring-serveropeningevent.gethost.php",
        "description": "Returns the hostname of the server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\ServerOpeningEvent::getTopologyId",
        "url": "mongodb-driver-monitoring-serveropeningevent.gettopologyid.php",
        "description": "Returns the topology ID associated with this server"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\TopologyChangedEvent::getPreviousDescription",
        "url": "mongodb-driver-monitoring-topologychangedevent.getpreviousdescription.php",
        "description": "Returns the previous description for the topology"
    },
    {
        "name": "MongoDB\\Driver\\Monitoring\\TopologyClosedEvent::getTopologyId",
        "url": "mongodb-driver-monitoring-topologyclosedevent.gettopologyid.php",
        "description": "Returns the topology ID"
    },
    {
        "name": "MongoDB\\Driver\\Query::__construct",
        "url": "mongodb-driver-query.construct.php",
        "description": "Create a new Query"
    },
    {
        "name": "MongoDB\\Driver\\ReadConcern::getLevel",
        "url": "mongodb-driver-readconcern.getlevel.php",
        "description": "Returns the ReadConcern's &quot;level&quot; option"
    },
    {
        "name": "MongoDB\\Driver\\ReadConcern::serialize",
        "url": "mongodb-driver-readconcern.serialize.php",
        "description": "Serialize a ReadConcern"
    },
    {
        "name": "MongoDB\\Driver\\ReadConcern::__construct",
        "url": "mongodb-driver-readconcern.construct.php",
        "description": "Create a new ReadConcern"
    },
    {
        "name": "MongoDB\\Driver\\ReadPreference::getHedge",
        "url": "mongodb-driver-readpreference.gethedge.php",
        "description": "Returns the ReadPreference's &quot;hedge&quot; option"
    },
    {
        "name": "MongoDB\\Driver\\ReadPreference::getMode",
        "url": "mongodb-driver-readpreference.getmode.php",
        "description": "Returns the ReadPreference's &quot;mode&quot; option"
    },
    {
        "name": "MongoDB\\Driver\\ReadPreference::getTagSets",
        "url": "mongodb-driver-readpreference.gettagsets.php",
        "description": "Returns the ReadPreference's &quot;tagSets&quot; option"
    },
    {
        "name": "MongoDB\\Driver\\ReadPreference::unserialize",
        "url": "mongodb-driver-readpreference.unserialize.php",
        "description": "Unserialize a ReadPreference"
    },
    {
        "name": "MongoDB\\Driver\\Server::executeBulkWrite",
        "url": "mongodb-driver-server.executebulkwrite.php",
        "description": "Execute one or more write operations on this server"
    },
    {
        "name": "MongoDB\\Driver\\Server::executeQuery",
        "url": "mongodb-driver-server.executequery.php",
        "description": "Execute a database query on this server"
    },
    {
        "name": "MongoDB\\Driver\\Server::executeReadWriteCommand",
        "url": "mongodb-driver-server.executereadwritecommand.php",
        "description": "Execute a database command that reads and writes on this server"
    },
    {
        "name": "MongoDB\\Driver\\Server::getHost",
        "url": "mongodb-driver-server.gethost.php",
        "description": "Returns the hostname of this server"
    },
    {
        "name": "MongoDB\\Driver\\Server::getLatency",
        "url": "mongodb-driver-server.getlatency.php",
        "description": "Returns the latency of this server in milliseconds"
    },
    {
        "name": "MongoDB\\Driver\\Server::getServerDescription",
        "url": "mongodb-driver-server.getserverdescription.php",
        "description": "Returns a ServerDescription for this server"
    },
    {
        "name": "MongoDB\\Driver\\Server::getType",
        "url": "mongodb-driver-server.gettype.php",
        "description": "Returns an integer denoting the type of this server"
    },
    {
        "name": "MongoDB\\Driver\\Server::isHidden",
        "url": "mongodb-driver-server.ishidden.php",
        "description": "Checks if this server is a hidden member of a replica set"
    },
    {
        "name": "MongoDB\\Driver\\Server::isPrimary",
        "url": "mongodb-driver-server.isprimary.php",
        "description": "Checks if this server is a primary member of a replica set"
    },
    {
        "name": "MongoDB\\Driver\\Server::__construct",
        "url": "mongodb-driver-server.construct.php",
        "description": "Create a new Server (not used)"
    },
    {
        "name": "MongoDB\\Driver\\ServerApi::serialize",
        "url": "mongodb-driver-serverapi.serialize.php",
        "description": "Serialize a ServerApi"
    },
    {
        "name": "MongoDB\\Driver\\ServerApi::__construct",
        "url": "mongodb-driver-serverapi.construct.php",
        "description": "Create a new ServerApi instance"
    },
    {
        "name": "MongoDB\\Driver\\ServerDescription::getHost",
        "url": "mongodb-driver-serverdescription.gethost.php",
        "description": "Returns the hostname of this server"
    },
    {
        "name": "MongoDB\\Driver\\ServerDescription::getPort",
        "url": "mongodb-driver-serverdescription.getport.php",
        "description": "Returns the port on which this server is listening"
    },
    {
        "name": "MongoDB\\Driver\\ServerDescription::getType",
        "url": "mongodb-driver-serverdescription.gettype.php",
        "description": "Returns a string denoting the type of this server"
    },
    {
        "name": "MongoDB\\Driver\\Session::advanceClusterTime",
        "url": "mongodb-driver-session.advanceclustertime.php",
        "description": "Advances the cluster time for this session"
    },
    {
        "name": "MongoDB\\Driver\\Session::commitTransaction",
        "url": "mongodb-driver-session.committransaction.php",
        "description": "Commits a transaction"
    },
    {
        "name": "MongoDB\\Driver\\Session::getClusterTime",
        "url": "mongodb-driver-session.getclustertime.php",
        "description": "Returns the cluster time for this session"
    },
    {
        "name": "MongoDB\\Driver\\Session::getOperationTime",
        "url": "mongodb-driver-session.getoperationtime.php",
        "description": "Returns the operation time for this session"
    },
    {
        "name": "MongoDB\\Driver\\Session::getTransactionOptions",
        "url": "mongodb-driver-session.gettransactionoptions.php",
        "description": "Returns options for the currently running transaction"
    },
    {
        "name": "MongoDB\\Driver\\Session::isDirty",
        "url": "mongodb-driver-session.isdirty.php",
        "description": "Returns whether the session has been marked as dirty"
    },
    {
        "name": "MongoDB\\Driver\\Session::startTransaction",
        "url": "mongodb-driver-session.starttransaction.php",
        "description": "Starts a transaction"
    },
    {
        "name": "MongoDB\\Driver\\TopologyDescription::getServers",
        "url": "mongodb-driver-topologydescription.getservers.php",
        "description": "Returns the servers in the topology"
    },
    {
        "name": "MongoDB\\Driver\\TopologyDescription::hasReadableServer",
        "url": "mongodb-driver-topologydescription.hasreadableserver.php",
        "description": "Returns whether the topology has a readable server"
    },
    {
        "name": "MongoDB\\Driver\\WriteConcern::bsonSerialize",
        "url": "mongodb-driver-writeconcern.bsonserialize.php",
        "description": "Returns an object for BSON serialization"
    },
    {
        "name": "MongoDB\\Driver\\WriteConcern::getW",
        "url": "mongodb-driver-writeconcern.getw.php",
        "description": "Returns the WriteConcern's &quot;w&quot; option"
    },
    {
        "name": "MongoDB\\Driver\\WriteConcern::isDefault",
        "url": "mongodb-driver-writeconcern.isdefault.php",
        "description": "Checks if this is the default write concern"
    },
    {
        "name": "MongoDB\\Driver\\WriteConcern::unserialize",
        "url": "mongodb-driver-writeconcern.unserialize.php",
        "description": "Unserialize a WriteConcern"
    },
    {
        "name": "MongoDB\\Driver\\WriteConcernError::getCode",
        "url": "mongodb-driver-writeconcernerror.getcode.php",
        "description": "Returns the WriteConcernError's error code"
    },
    {
        "name": "MongoDB\\Driver\\WriteConcernError::getMessage",
        "url": "mongodb-driver-writeconcernerror.getmessage.php",
        "description": "Returns the WriteConcernError's error message"
    },
    {
        "name": "MongoDB\\Driver\\WriteError::getIndex",
        "url": "mongodb-driver-writeerror.getindex.php",
        "description": "Returns the index of the write operation corresponding to this WriteError"
    },
    {
        "name": "MongoDB\\Driver\\WriteError::getMessage",
        "url": "mongodb-driver-writeerror.getmessage.php",
        "description": "Returns the WriteError's error message"
    },
    {
        "name": "MongoDB\\Driver\\WriteResult::getInsertedCount",
        "url": "mongodb-driver-writeresult.getinsertedcount.php",
        "description": "Returns the number of documents inserted (excluding upserts)"
    },
    {
        "name": "MongoDB\\Driver\\WriteResult::getModifiedCount",
        "url": "mongodb-driver-writeresult.getmodifiedcount.php",
        "description": "Returns the number of existing documents updated"
    },
    {
        "name": "MongoDB\\Driver\\WriteResult::getUpsertedCount",
        "url": "mongodb-driver-writeresult.getupsertedcount.php",
        "description": "Returns the number of documents inserted by an upsert"
    },
    {
        "name": "MongoDB\\Driver\\WriteResult::getWriteConcernError",
        "url": "mongodb-driver-writeresult.getwriteconcernerror.php",
        "description": "Returns any write concern error that occurred"
    },
    {
        "name": "MongoDB\\Driver\\WriteResult::isAcknowledged",
        "url": "mongodb-driver-writeresult.isacknowledged.php",
        "description": "Returns whether the write was acknowledged"
    },
    {
        "name": "mqseries_back",
        "url": "function.mqseries-back.php",
        "description": "MQSeries MQBACK"
    },
    {
        "name": "mqseries_close",
        "url": "function.mqseries-close.php",
        "description": "MQSeries MQCLOSE"
    },
    {
        "name": "mqseries_conn",
        "url": "function.mqseries-conn.php",
        "description": "MQSeries MQCONN"
    },
    {
        "name": "mqseries_disc",
        "url": "function.mqseries-disc.php",
        "description": "MQSeries MQDISC"
    },
    {
        "name": "mqseries_inq",
        "url": "function.mqseries-inq.php",
        "description": "MQSeries MQINQ"
    },
    {
        "name": "mqseries_put",
        "url": "function.mqseries-put.php",
        "description": "MQSeries MQPUT"
    },
    {
        "name": "mqseries_set",
        "url": "function.mqseries-set.php",
        "description": "MQSeries MQSET"
    },
    {
        "name": "msg_get_queue",
        "url": "function.msg-get-queue.php",
        "description": "Create or attach to a message queue"
    },
    {
        "name": "msg_receive",
        "url": "function.msg-receive.php",
        "description": "Receive a message from a message queue"
    },
    {
        "name": "msg_send",
        "url": "function.msg-send.php",
        "description": "Send a message to a message queue"
    },
    {
        "name": "msg_stat_queue",
        "url": "function.msg-stat-queue.php",
        "description": "Returns information from the message queue data structure"
    },
    {
        "name": "mt_rand",
        "url": "function.mt-rand.php",
        "description": "Generate a random value via the Mersenne Twister Random Number Generator"
    },
    {
        "name": "MultipleIterator::attachIterator",
        "url": "multipleiterator.attachiterator.php",
        "description": "Attaches iterator information"
    },
    {
        "name": "MultipleIterator::countIterators",
        "url": "multipleiterator.countiterators.php",
        "description": "Gets the number of attached iterator instances"
    },
    {
        "name": "MultipleIterator::detachIterator",
        "url": "multipleiterator.detachiterator.php",
        "description": "Detaches an iterator"
    },
    {
        "name": "MultipleIterator::key",
        "url": "multipleiterator.key.php",
        "description": "Gets the registered iterator instances"
    },
    {
        "name": "MultipleIterator::rewind",
        "url": "multipleiterator.rewind.php",
        "description": "Rewinds all attached iterator instances"
    },
    {
        "name": "MultipleIterator::valid",
        "url": "multipleiterator.valid.php",
        "description": "Checks the validity of sub iterators"
    },
    {
        "name": "mysqli::$affected_rows",
        "url": "mysqli.affected-rows.php",
        "description": "Gets the number of affected rows in a previous MySQL operation"
    },
    {
        "name": "mysqli::$client_version",
        "url": "mysqli.get-client-version.php",
        "description": "Returns the MySQL client version as an integer"
    },
    {
        "name": "mysqli::$connect_error",
        "url": "mysqli.connect-error.php",
        "description": "Returns a description of the last connection error"
    },
    {
        "name": "mysqli::$error",
        "url": "mysqli.error.php",
        "description": "Returns a string description of the last error"
    },
    {
        "name": "mysqli::$field_count",
        "url": "mysqli.field-count.php",
        "description": "Returns the number of columns for the most recent query"
    },
    {
        "name": "mysqli::$info",
        "url": "mysqli.info.php",
        "description": "Retrieves information about the most recently executed query"
    },
    {
        "name": "mysqli::$protocol_version",
        "url": "mysqli.get-proto-info.php",
        "description": "Returns the version of the MySQL protocol used"
    },
    {
        "name": "mysqli::$server_version",
        "url": "mysqli.get-server-version.php",
        "description": "Returns the version of the MySQL server as an integer"
    },
    {
        "name": "mysqli::$thread_id",
        "url": "mysqli.thread-id.php",
        "description": "Returns the thread ID for the current connection"
    },
    {
        "name": "mysqli::autocommit",
        "url": "mysqli.autocommit.php",
        "description": "Turns on or off auto-committing database modifications"
    },
    {
        "name": "mysqli::change_user",
        "url": "mysqli.change-user.php",
        "description": "Changes the user of the specified database connection"
    },
    {
        "name": "mysqli::close",
        "url": "mysqli.close.php",
        "description": "Closes a previously opened database connection"
    },
    {
        "name": "mysqli::debug",
        "url": "mysqli.debug.php",
        "description": "Performs debugging operations"
    },
    {
        "name": "mysqli::escape_string",
        "url": "function.mysqli-escape-string.php",
        "description": "Alias of mysqli_real_escape_string"
    },
    {
        "name": "mysqli::get_charset",
        "url": "mysqli.get-charset.php",
        "description": "Returns a character set object"
    },
    {
        "name": "mysqli::get_warnings",
        "url": "mysqli.get-warnings.php",
        "description": "Get result of SHOW WARNINGS"
    },
    {
        "name": "mysqli::kill",
        "url": "mysqli.kill.php",
        "description": "Asks the server to kill a MySQL thread"
    },
    {
        "name": "mysqli::multi_query",
        "url": "mysqli.multi-query.php",
        "description": "Performs one or more queries on the database"
    },
    {
        "name": "mysqli::options",
        "url": "mysqli.options.php",
        "description": "Set options"
    },
    {
        "name": "mysqli::poll",
        "url": "mysqli.poll.php",
        "description": "Poll connections"
    },
    {
        "name": "mysqli::query",
        "url": "mysqli.query.php",
        "description": "Performs a query on the database"
    },
    {
        "name": "mysqli::real_escape_string",
        "url": "mysqli.real-escape-string.php",
        "description": "Escapes special characters in a string for use in an SQL statement, taking into account the current charset of the connection"
    },
    {
        "name": "mysqli::reap_async_query",
        "url": "mysqli.reap-async-query.php",
        "description": "Get result from async query"
    },
    {
        "name": "mysqli::release_savepoint",
        "url": "mysqli.release-savepoint.php",
        "description": "Removes the named savepoint from the set of savepoints of the current transaction"
    },
    {
        "name": "mysqli::savepoint",
        "url": "mysqli.savepoint.php",
        "description": "Set a named transaction savepoint"
    },
    {
        "name": "mysqli::set_charset",
        "url": "mysqli.set-charset.php",
        "description": "Sets the client character set"
    },
    {
        "name": "mysqli::ssl_set",
        "url": "mysqli.ssl-set.php",
        "description": "Used for establishing secure connections using SSL"
    },
    {
        "name": "mysqli::stmt_init",
        "url": "mysqli.stmt-init.php",
        "description": "Initializes a statement and returns an object for use with mysqli_stmt_prepare"
    },
    {
        "name": "mysqli::thread_safe",
        "url": "mysqli.thread-safe.php",
        "description": "Returns whether thread safety is given or not"
    },
    {
        "name": "mysqli::__construct",
        "url": "mysqli.construct.php",
        "description": "Open a new connection to the MySQL server"
    },
    {
        "name": "mysqli_driver::$report_mode",
        "url": "mysqli-driver.report-mode.php",
        "description": "Sets mysqli error reporting mode"
    },
    {
        "name": "mysqli_driver::embedded_server_start",
        "url": "mysqli-driver.embedded-server-start.php",
        "description": "Initialize and start embedded server"
    },
    {
        "name": "mysqli_get_client_stats",
        "url": "function.mysqli-get-client-stats.php",
        "description": "Returns client per-process statistics"
    },
    {
        "name": "mysqli_report",
        "url": "function.mysqli-report.php",
        "description": "Alias of mysqli_driver-&gt;report_mode"
    },
    {
        "name": "mysqli_result::$field_count",
        "url": "mysqli-result.field-count.php",
        "description": "Gets the number of fields in the result set"
    },
    {
        "name": "mysqli_result::$num_rows",
        "url": "mysqli-result.num-rows.php",
        "description": "Gets the number of rows in the result set"
    },
    {
        "name": "mysqli_result::fetch_all",
        "url": "mysqli-result.fetch-all.php",
        "description": "Fetch all result rows as an associative array, a numeric array, or both"
    },
    {
        "name": "mysqli_result::fetch_assoc",
        "url": "mysqli-result.fetch-assoc.php",
        "description": "Fetch the next row of a result set as an associative array"
    },
    {
        "name": "mysqli_result::fetch_field",
        "url": "mysqli-result.fetch-field.php",
        "description": "Returns the next field in the result set"
    },
    {
        "name": "mysqli_result::fetch_field_direct",
        "url": "mysqli-result.fetch-field-direct.php",
        "description": "Fetch meta-data for a single field"
    },
    {
        "name": "mysqli_result::fetch_row",
        "url": "mysqli-result.fetch-row.php",
        "description": "Fetch the next row of a result set as an enumerated array"
    },
    {
        "name": "mysqli_result::free",
        "url": "mysqli-result.free.php",
        "description": "Frees the memory associated with a result"
    },
    {
        "name": "mysqli_result::__construct",
        "url": "mysqli-result.construct.php",
        "description": "Constructs a mysqli_result object"
    },
    {
        "name": "mysqli_stmt::$affected_rows",
        "url": "mysqli-stmt.affected-rows.php",
        "description": "Returns the total number of rows changed, deleted, inserted, or   matched by the last statement executed"
    },
    {
        "name": "mysqli_stmt::$errno",
        "url": "mysqli-stmt.errno.php",
        "description": "Returns the error code for the most recent statement call"
    },
    {
        "name": "mysqli_stmt::$error_list",
        "url": "mysqli-stmt.error-list.php",
        "description": "Returns a list of errors from the last statement executed"
    },
    {
        "name": "mysqli_stmt::$insert_id",
        "url": "mysqli-stmt.insert-id.php",
        "description": "Get the ID generated from the previous INSERT operation"
    },
    {
        "name": "mysqli_stmt::$param_count",
        "url": "mysqli-stmt.param-count.php",
        "description": "Returns the number of parameters for the given statement"
    },
    {
        "name": "mysqli_stmt::attr_get",
        "url": "mysqli-stmt.attr-get.php",
        "description": "Used to get the current value of a statement attribute"
    },
    {
        "name": "mysqli_stmt::bind_param",
        "url": "mysqli-stmt.bind-param.php",
        "description": "Binds variables to a prepared statement as parameters"
    },
    {
        "name": "mysqli_stmt::close",
        "url": "mysqli-stmt.close.php",
        "description": "Closes a prepared statement"
    },
    {
        "name": "mysqli_stmt::execute",
        "url": "mysqli-stmt.execute.php",
        "description": "Executes a prepared statement"
    },
    {
        "name": "mysqli_stmt::free_result",
        "url": "mysqli-stmt.free-result.php",
        "description": "Frees stored result memory for the given statement handle"
    },
    {
        "name": "mysqli_stmt::get_warnings",
        "url": "mysqli-stmt.get-warnings.php",
        "description": "Get result of SHOW WARNINGS"
    },
    {
        "name": "mysqli_stmt::next_result",
        "url": "mysqli-stmt.next-result.php",
        "description": "Reads the next result from a multiple query"
    },
    {
        "name": "mysqli_stmt::reset",
        "url": "mysqli-stmt.reset.php",
        "description": "Resets a prepared statement"
    },
    {
        "name": "mysqli_stmt::send_long_data",
        "url": "mysqli-stmt.send-long-data.php",
        "description": "Send data in blocks"
    },
    {
        "name": "mysqli_stmt::__construct",
        "url": "mysqli-stmt.construct.php",
        "description": "Constructs a new mysqli_stmt object"
    },
    {
        "name": "mysqli_warning::__construct",
        "url": "mysqli-warning.construct.php",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "name": "mysql_client_encoding",
        "url": "function.mysql-client-encoding.php",
        "description": "Returns the name of the character set"
    },
    {
        "name": "mysql_connect",
        "url": "function.mysql-connect.php",
        "description": "Open a connection to a MySQL Server"
    },
    {
        "name": "mysql_data_seek",
        "url": "function.mysql-data-seek.php",
        "description": "Move internal result pointer"
    },
    {
        "name": "mysql_db_query",
        "url": "function.mysql-db-query.php",
        "description": "Selects a database and executes a query on it"
    },
    {
        "name": "mysql_errno",
        "url": "function.mysql-errno.php",
        "description": "Returns the numerical value of the error message from previous MySQL operation"
    },
    {
        "name": "mysql_escape_string",
        "url": "function.mysql-escape-string.php",
        "description": "Escapes a string for use in a mysql_query"
    },
    {
        "name": "mysql_fetch_assoc",
        "url": "function.mysql-fetch-assoc.php",
        "description": "Fetch a result row as an associative array"
    },
    {
        "name": "mysql_fetch_lengths",
        "url": "function.mysql-fetch-lengths.php",
        "description": "Get the length of each output in a result"
    },
    {
        "name": "mysql_fetch_row",
        "url": "function.mysql-fetch-row.php",
        "description": "Get a result row as an enumerated array"
    },
    {
        "name": "mysql_field_len",
        "url": "function.mysql-field-len.php",
        "description": "Returns the length of the specified field"
    },
    {
        "name": "mysql_field_seek",
        "url": "function.mysql-field-seek.php",
        "description": "Set result pointer to a specified field offset"
    },
    {
        "name": "mysql_field_type",
        "url": "function.mysql-field-type.php",
        "description": "Get the type of the specified field in a result"
    },
    {
        "name": "mysql_get_client_info",
        "url": "function.mysql-get-client-info.php",
        "description": "Get MySQL client info"
    },
    {
        "name": "mysql_get_proto_info",
        "url": "function.mysql-get-proto-info.php",
        "description": "Get MySQL protocol info"
    },
    {
        "name": "mysql_info",
        "url": "function.mysql-info.php",
        "description": "Get information about the most recent query"
    },
    {
        "name": "mysql_list_dbs",
        "url": "function.mysql-list-dbs.php",
        "description": "List databases available on a MySQL server"
    },
    {
        "name": "mysql_list_processes",
        "url": "function.mysql-list-processes.php",
        "description": "List MySQL processes"
    },
    {
        "name": "mysql_num_fields",
        "url": "function.mysql-num-fields.php",
        "description": "Get number of fields in result"
    },
    {
        "name": "mysql_pconnect",
        "url": "function.mysql-pconnect.php",
        "description": "Open a persistent connection to a MySQL server"
    },
    {
        "name": "mysql_query",
        "url": "function.mysql-query.php",
        "description": "Send a MySQL query"
    },
    {
        "name": "mysql_result",
        "url": "function.mysql-result.php",
        "description": "Get result data"
    },
    {
        "name": "mysql_set_charset",
        "url": "function.mysql-set-charset.php",
        "description": "Sets the client character set"
    },
    {
        "name": "mysql_tablename",
        "url": "function.mysql-tablename.php",
        "description": "Get table name of field"
    },
    {
        "name": "mysql_unbuffered_query",
        "url": "function.mysql-unbuffered-query.php",
        "description": "Send an SQL query to MySQL without fetching and buffering the result rows"
    },
    {
        "name": "natcasesort",
        "url": "function.natcasesort.php",
        "description": "Sort an array using a case insensitive &quot;natural order&quot; algorithm"
    },
    {
        "name": "net_get_interfaces",
        "url": "function.net-get-interfaces.php",
        "description": "Get network interfaces"
    },
    {
        "name": "ngettext",
        "url": "function.ngettext.php",
        "description": "Plural version of gettext"
    },
    {
        "name": "nl_langinfo",
        "url": "function.nl-langinfo.php",
        "description": "Query language and locale information"
    },
    {
        "name": "NoRewindIterator::key",
        "url": "norewinditerator.key.php",
        "description": "Get the current key"
    },
    {
        "name": "NoRewindIterator::rewind",
        "url": "norewinditerator.rewind.php",
        "description": "Prevents the rewind operation on the inner iterator"
    },
    {
        "name": "NoRewindIterator::__construct",
        "url": "norewinditerator.construct.php",
        "description": "Construct a NoRewindIterator"
    },
    {
        "name": "Normalizer::isNormalized",
        "url": "normalizer.isnormalized.php",
        "description": "Checks if the provided string is already in the specified normalization    form"
    },
    {
        "name": "Normalizer::normalize",
        "url": "normalizer.normalize.php",
        "description": "Normalizes the input provided and returns the normalized string"
    },
    {
        "name": "NumberFormatter::format",
        "url": "numberformatter.format.php",
        "description": "Format a number"
    },
    {
        "name": "NumberFormatter::getAttribute",
        "url": "numberformatter.getattribute.php",
        "description": "Get an attribute"
    },
    {
        "name": "NumberFormatter::getErrorMessage",
        "url": "numberformatter.geterrormessage.php",
        "description": "Get formatter's last error message"
    },
    {
        "name": "NumberFormatter::getPattern",
        "url": "numberformatter.getpattern.php",
        "description": "Get formatter pattern"
    },
    {
        "name": "NumberFormatter::getTextAttribute",
        "url": "numberformatter.gettextattribute.php",
        "description": "Get a text attribute"
    },
    {
        "name": "NumberFormatter::parseCurrency",
        "url": "numberformatter.parsecurrency.php",
        "description": "Parse a currency number"
    },
    {
        "name": "NumberFormatter::setPattern",
        "url": "numberformatter.setpattern.php",
        "description": "Set formatter pattern"
    },
    {
        "name": "NumberFormatter::setTextAttribute",
        "url": "numberformatter.settextattribute.php",
        "description": "Set a text attribute"
    },
    {
        "name": "OAuth::disableDebug",
        "url": "oauth.disabledebug.php",
        "description": "Turn off verbose debugging"
    },
    {
        "name": "OAuth::disableSSLChecks",
        "url": "oauth.disablesslchecks.php",
        "description": "Turn off SSL checks"
    },
    {
        "name": "OAuth::enableRedirects",
        "url": "oauth.enableredirects.php",
        "description": "Turn on redirects"
    },
    {
        "name": "OAuth::fetch",
        "url": "oauth.fetch.php",
        "description": "Fetch an OAuth protected resource"
    },
    {
        "name": "OAuth::getAccessToken",
        "url": "oauth.getaccesstoken.php",
        "description": "Fetch an access token"
    },
    {
        "name": "OAuth::getLastResponse",
        "url": "oauth.getlastresponse.php",
        "description": "Get the last response"
    },
    {
        "name": "OAuth::getLastResponseInfo",
        "url": "oauth.getlastresponseinfo.php",
        "description": "Get HTTP information about the last response"
    },
    {
        "name": "OAuth::getRequestToken",
        "url": "oauth.getrequesttoken.php",
        "description": "Fetch a request token"
    },
    {
        "name": "OAuth::setCAPath",
        "url": "oauth.setcapath.php",
        "description": "Set CA path and info"
    },
    {
        "name": "OAuth::setRequestEngine",
        "url": "oauth.setrequestengine.php",
        "description": "The setRequestEngine purpose"
    },
    {
        "name": "OAuth::setSSLChecks",
        "url": "oauth.setsslchecks.php",
        "description": "Tweak specific SSL checks for requests"
    },
    {
        "name": "OAuth::setToken",
        "url": "oauth.settoken.php",
        "description": "Sets the token and secret"
    },
    {
        "name": "OAuth::__construct",
        "url": "oauth.construct.php",
        "description": "Create a new OAuth object"
    },
    {
        "name": "OAuthProvider::addRequiredParameter",
        "url": "oauthprovider.addrequiredparameter.php",
        "description": "Add required parameters"
    },
    {
        "name": "OAuthProvider::callTimestampNonceHandler",
        "url": "oauthprovider.calltimestampnoncehandler.php",
        "description": "Calls the timestampNonceHandler callback"
    },
    {
        "name": "OAuthProvider::checkOAuthRequest",
        "url": "oauthprovider.checkoauthrequest.php",
        "description": "Check an oauth request"
    },
    {
        "name": "OAuthProvider::generateToken",
        "url": "oauthprovider.generatetoken.php",
        "description": "Generate a random token"
    },
    {
        "name": "OAuthProvider::isRequestTokenEndpoint",
        "url": "oauthprovider.isrequesttokenendpoint.php",
        "description": "Sets isRequestTokenEndpoint"
    },
    {
        "name": "OAuthProvider::reportProblem",
        "url": "oauthprovider.reportproblem.php",
        "description": "Report a problem"
    },
    {
        "name": "OAuthProvider::setRequestTokenPath",
        "url": "oauthprovider.setrequesttokenpath.php",
        "description": "Set request token path"
    },
    {
        "name": "OAuthProvider::tokenHandler",
        "url": "oauthprovider.tokenhandler.php",
        "description": "Set the tokenHandler handler callback"
    },
    {
        "name": "oauth_get_sbs",
        "url": "function.oauth-get-sbs.php",
        "description": "Generate a Signature Base String"
    },
    {
        "name": "ob_clean",
        "url": "function.ob-clean.php",
        "description": "Clean (erase) the contents of the active output buffer"
    },
    {
        "name": "ob_end_flush",
        "url": "function.ob-end-flush.php",
        "description": "Flush (send) the return value of the active output handler    and turn the active output buffer off"
    },
    {
        "name": "ob_flush",
        "url": "function.ob-flush.php",
        "description": "Flush (send) the return value of the active output handler"
    },
    {
        "name": "ob_get_contents",
        "url": "function.ob-get-contents.php",
        "description": "Return the contents of the output buffer"
    },
    {
        "name": "ob_get_length",
        "url": "function.ob-get-length.php",
        "description": "Return the length of the output buffer"
    },
    {
        "name": "ob_get_status",
        "url": "function.ob-get-status.php",
        "description": "Get status of output buffers"
    },
    {
        "name": "ob_iconv_handler",
        "url": "function.ob-iconv-handler.php",
        "description": "Convert character encoding as output buffer handler"
    },
    {
        "name": "ob_list_handlers",
        "url": "function.ob-list-handlers.php",
        "description": "List all output handlers in use"
    },
    {
        "name": "ob_tidyhandler",
        "url": "function.ob-tidyhandler.php",
        "description": "ob_start callback function to repair the buffer"
    },
    {
        "name": "ocicancel",
        "url": "function.ocicancel.php",
        "description": "Alias of oci_cancel"
    },
    {
        "name": "ocicollappend",
        "url": "function.ocicollappend.php",
        "description": "Alias of OCICollection::append"
    },
    {
        "name": "ocicollassignelem",
        "url": "function.ocicollassignelem.php",
        "description": "Alias of OCICollection::assignElem"
    },
    {
        "name": "OCICollection::assign",
        "url": "ocicollection.assign.php",
        "description": "Assigns a value to the collection from another existing collection"
    },
    {
        "name": "OCICollection::free",
        "url": "ocicollection.free.php",
        "description": "Frees the resources associated with the collection object"
    },
    {
        "name": "OCICollection::max",
        "url": "ocicollection.max.php",
        "description": "Returns the maximum number of elements in the collection"
    },
    {
        "name": "OCICollection::trim",
        "url": "ocicollection.trim.php",
        "description": "Trims elements from the end of the collection"
    },
    {
        "name": "ocicollmax",
        "url": "function.ocicollmax.php",
        "description": "Alias of OCICollection::max"
    },
    {
        "name": "ocicolltrim",
        "url": "function.ocicolltrim.php",
        "description": "Alias of OCICollection::trim"
    },
    {
        "name": "ocicolumnname",
        "url": "function.ocicolumnname.php",
        "description": "Alias of oci_field_name"
    },
    {
        "name": "ocicolumnscale",
        "url": "function.ocicolumnscale.php",
        "description": "Alias of oci_field_scale"
    },
    {
        "name": "ocicolumntype",
        "url": "function.ocicolumntype.php",
        "description": "Alias of oci_field_type"
    },
    {
        "name": "ocicommit",
        "url": "function.ocicommit.php",
        "description": "Alias of oci_commit"
    },
    {
        "name": "ocierror",
        "url": "function.ocierror.php",
        "description": "Alias of oci_error"
    },
    {
        "name": "ocifetch",
        "url": "function.ocifetch.php",
        "description": "Alias of oci_fetch"
    },
    {
        "name": "ocifetchstatement",
        "url": "function.ocifetchstatement.php",
        "description": "Alias of oci_fetch_all"
    },
    {
        "name": "ocifreecursor",
        "url": "function.ocifreecursor.php",
        "description": "Alias of oci_free_statement"
    },
    {
        "name": "ocifreestatement",
        "url": "function.ocifreestatement.php",
        "description": "Alias of oci_free_statement"
    },
    {
        "name": "ociloadlob",
        "url": "function.ociloadlob.php",
        "description": "Alias of OCILob::load"
    },
    {
        "name": "OCILob::close",
        "url": "ocilob.close.php",
        "description": "Closes LOB descriptor"
    },
    {
        "name": "OCILob::erase",
        "url": "ocilob.erase.php",
        "description": "Erases a specified portion of the internal LOB data"
    },
    {
        "name": "OCILob::flush",
        "url": "ocilob.flush.php",
        "description": "Flushes\/writes buffer of the LOB to the server"
    },
    {
        "name": "OCILob::getBuffering",
        "url": "ocilob.getbuffering.php",
        "description": "Returns current state of buffering for the large object"
    },
    {
        "name": "OCILob::load",
        "url": "ocilob.load.php",
        "description": "Returns large object's contents"
    },
    {
        "name": "OCILob::rewind",
        "url": "ocilob.rewind.php",
        "description": "Moves the internal pointer to the beginning of the large object"
    },
    {
        "name": "OCILob::saveFile",
        "url": "ocilob.savefile.php",
        "description": "Alias of OCILob::import"
    },
    {
        "name": "OCILob::setBuffering",
        "url": "ocilob.setbuffering.php",
        "description": "Changes current state of buffering for the large object"
    },
    {
        "name": "OCILob::tell",
        "url": "ocilob.tell.php",
        "description": "Returns the current position of internal pointer of large object"
    },
    {
        "name": "OCILob::write",
        "url": "ocilob.write.php",
        "description": "Writes data to the large object"
    },
    {
        "name": "OCILob::writeToFile",
        "url": "ocilob.writetofile.php",
        "description": "Alias of OCILob::export"
    },
    {
        "name": "ocilogon",
        "url": "function.ocilogon.php",
        "description": "Alias of oci_connect"
    },
    {
        "name": "ocinewcursor",
        "url": "function.ocinewcursor.php",
        "description": "Alias of oci_new_cursor"
    },
    {
        "name": "ocinlogon",
        "url": "function.ocinlogon.php",
        "description": "Alias of oci_new_connect"
    },
    {
        "name": "ociparse",
        "url": "function.ociparse.php",
        "description": "Alias of oci_parse"
    },
    {
        "name": "ociresult",
        "url": "function.ociresult.php",
        "description": "Alias of oci_result"
    },
    {
        "name": "ocirowcount",
        "url": "function.ocirowcount.php",
        "description": "Alias of oci_num_rows"
    },
    {
        "name": "ocisavelobfile",
        "url": "function.ocisavelobfile.php",
        "description": "Alias of OCILob::import"
    },
    {
        "name": "ocisetprefetch",
        "url": "function.ocisetprefetch.php",
        "description": "Alias of oci_set_prefetch"
    },
    {
        "name": "ociwritelobtofile",
        "url": "function.ociwritelobtofile.php",
        "description": "Alias of OCILob::export"
    },
    {
        "name": "oci_bind_array_by_name",
        "url": "function.oci-bind-array-by-name.php",
        "description": "Binds a PHP array to an Oracle PL\/SQL array parameter"
    },
    {
        "name": "oci_cancel",
        "url": "function.oci-cancel.php",
        "description": "Cancels reading from cursor"
    },
    {
        "name": "oci_close",
        "url": "function.oci-close.php",
        "description": "Closes an Oracle connection"
    },
    {
        "name": "oci_connect",
        "url": "function.oci-connect.php",
        "description": "Connect to an Oracle database"
    },
    {
        "name": "oci_error",
        "url": "function.oci-error.php",
        "description": "Returns the last error found"
    },
    {
        "name": "oci_fetch",
        "url": "function.oci-fetch.php",
        "description": "Fetches the next row from a query into internal buffers"
    },
    {
        "name": "oci_fetch_array",
        "url": "function.oci-fetch-array.php",
        "description": "Returns the next row from a query as an associative or numeric array"
    },
    {
        "name": "oci_fetch_object",
        "url": "function.oci-fetch-object.php",
        "description": "Returns the next row from a query as an object"
    },
    {
        "name": "oci_field_is_null",
        "url": "function.oci-field-is-null.php",
        "description": "Checks if a field in the currently fetched row is null"
    },
    {
        "name": "oci_field_precision",
        "url": "function.oci-field-precision.php",
        "description": "Tell the precision of a field"
    },
    {
        "name": "oci_field_size",
        "url": "function.oci-field-size.php",
        "description": "Returns field's size"
    },
    {
        "name": "oci_field_type_raw",
        "url": "function.oci-field-type-raw.php",
        "description": "Tell the raw Oracle data type of the field"
    },
    {
        "name": "oci_free_statement",
        "url": "function.oci-free-statement.php",
        "description": "Frees all resources associated with statement or cursor"
    },
    {
        "name": "oci_internal_debug",
        "url": "function.oci-internal-debug.php",
        "description": "Enables or disables internal debug output"
    },
    {
        "name": "oci_lob_is_equal",
        "url": "function.oci-lob-is-equal.php",
        "description": "Compares two LOB\/FILE locators for equality"
    },
    {
        "name": "oci_new_connect",
        "url": "function.oci-new-connect.php",
        "description": "Connect to the Oracle server using a unique connection"
    },
    {
        "name": "oci_new_descriptor",
        "url": "function.oci-new-descriptor.php",
        "description": "Initializes a new empty LOB or FILE descriptor"
    },
    {
        "name": "oci_num_rows",
        "url": "function.oci-num-rows.php",
        "description": "Returns number of rows affected during statement execution"
    },
    {
        "name": "oci_password_change",
        "url": "function.oci-password-change.php",
        "description": "Changes password of Oracle's user"
    },
    {
        "name": "oci_register_taf_callback",
        "url": "function.oci-register-taf-callback.php",
        "description": "Register a user-defined callback function for Oracle Database TAF"
    },
    {
        "name": "oci_rollback",
        "url": "function.oci-rollback.php",
        "description": "Rolls back the outstanding database transaction"
    },
    {
        "name": "oci_set_action",
        "url": "function.oci-set-action.php",
        "description": "Sets the action name"
    },
    {
        "name": "oci_set_client_identifier",
        "url": "function.oci-set-client-identifier.php",
        "description": "Sets the client identifier"
    },
    {
        "name": "oci_set_db_operation",
        "url": "function.oci-set-db-operation.php",
        "description": "Sets the database operation"
    },
    {
        "name": "oci_set_module_name",
        "url": "function.oci-set-module-name.php",
        "description": "Sets the module name"
    },
    {
        "name": "oci_set_prefetch_lob",
        "url": "function.oci-set-prefetch-lob.php",
        "description": "Sets the amount of data prefetched for each CLOB or BLOB."
    },
    {
        "name": "oci_unregister_taf_callback",
        "url": "function.oci-unregister-taf-callback.php",
        "description": "Unregister a user-defined callback function for Oracle Database TAF"
    },
    {
        "name": "odbc_autocommit",
        "url": "function.odbc-autocommit.php",
        "description": "Toggle autocommit behaviour"
    },
    {
        "name": "odbc_close",
        "url": "function.odbc-close.php",
        "description": "Close an ODBC connection"
    },
    {
        "name": "odbc_columnprivileges",
        "url": "function.odbc-columnprivileges.php",
        "description": "Lists columns and associated privileges for the given table"
    },
    {
        "name": "odbc_commit",
        "url": "function.odbc-commit.php",
        "description": "Commit an ODBC transaction"
    },
    {
        "name": "odbc_connection_string_is_quoted",
        "url": "function.odbc-connection-string-is-quoted.php",
        "description": "Determines if an ODBC connection string value is quoted"
    },
    {
        "name": "odbc_connection_string_should_quote",
        "url": "function.odbc-connection-string-should-quote.php",
        "description": "Determines if an ODBC connection string value should be quoted"
    },
    {
        "name": "odbc_data_source",
        "url": "function.odbc-data-source.php",
        "description": "Returns information about available DSNs"
    },
    {
        "name": "odbc_error",
        "url": "function.odbc-error.php",
        "description": "Get the last error code"
    },
    {
        "name": "odbc_exec",
        "url": "function.odbc-exec.php",
        "description": "Directly execute an SQL statement"
    },
    {
        "name": "odbc_fetch_array",
        "url": "function.odbc-fetch-array.php",
        "description": "Fetch a result row as an associative array"
    },
    {
        "name": "odbc_fetch_object",
        "url": "function.odbc-fetch-object.php",
        "description": "Fetch a result row as an object"
    },
    {
        "name": "odbc_field_len",
        "url": "function.odbc-field-len.php",
        "description": "Get the length (precision) of a field"
    },
    {
        "name": "odbc_field_num",
        "url": "function.odbc-field-num.php",
        "description": "Return column number"
    },
    {
        "name": "odbc_field_scale",
        "url": "function.odbc-field-scale.php",
        "description": "Get the scale of a field"
    },
    {
        "name": "odbc_foreignkeys",
        "url": "function.odbc-foreignkeys.php",
        "description": "Retrieves a list of foreign keys"
    },
    {
        "name": "odbc_gettypeinfo",
        "url": "function.odbc-gettypeinfo.php",
        "description": "Retrieves information about data types supported by the data source"
    },
    {
        "name": "odbc_next_result",
        "url": "function.odbc-next-result.php",
        "description": "Checks if multiple results are available"
    },
    {
        "name": "odbc_num_rows",
        "url": "function.odbc-num-rows.php",
        "description": "Number of rows in a result"
    },
    {
        "name": "odbc_prepare",
        "url": "function.odbc-prepare.php",
        "description": "Prepares a statement for execution"
    },
    {
        "name": "odbc_procedurecolumns",
        "url": "function.odbc-procedurecolumns.php",
        "description": "Retrieve information about parameters to procedures"
    },
    {
        "name": "odbc_result",
        "url": "function.odbc-result.php",
        "description": "Get result data"
    },
    {
        "name": "odbc_rollback",
        "url": "function.odbc-rollback.php",
        "description": "Rollback a transaction"
    },
    {
        "name": "odbc_specialcolumns",
        "url": "function.odbc-specialcolumns.php",
        "description": "Retrieves special columns"
    },
    {
        "name": "odbc_tableprivileges",
        "url": "function.odbc-tableprivileges.php",
        "description": "Lists tables and the privileges associated with each table"
    },
    {
        "name": "ogg:\/\/",
        "url": "wrappers.audio.php",
        "description": "Audio streams"
    },
    {
        "name": "opcache_get_configuration",
        "url": "function.opcache-get-configuration.php",
        "description": "Get configuration information about the cache"
    },
    {
        "name": "opcache_invalidate",
        "url": "function.opcache-invalidate.php",
        "description": "Invalidates a cached script"
    },
    {
        "name": "opcache_reset",
        "url": "function.opcache-reset.php",
        "description": "Resets the contents of the opcode cache"
    },
    {
        "name": "openal_buffer_data",
        "url": "function.openal-buffer-data.php",
        "description": "Load a buffer with data"
    },
    {
        "name": "openal_buffer_get",
        "url": "function.openal-buffer-get.php",
        "description": "Retrieve an OpenAL buffer property"
    },
    {
        "name": "openal_context_create",
        "url": "function.openal-context-create.php",
        "description": "Create an audio processing context"
    },
    {
        "name": "openal_context_destroy",
        "url": "function.openal-context-destroy.php",
        "description": "Destroys a context"
    },
    {
        "name": "openal_context_suspend",
        "url": "function.openal-context-suspend.php",
        "description": "Suspend the specified context"
    },
    {
        "name": "openal_device_open",
        "url": "function.openal-device-open.php",
        "description": "Initialize the OpenAL audio layer"
    },
    {
        "name": "openal_listener_set",
        "url": "function.openal-listener-set.php",
        "description": "Set a listener property"
    },
    {
        "name": "openal_source_destroy",
        "url": "function.openal-source-destroy.php",
        "description": "Destroy a source resource"
    },
    {
        "name": "openal_source_pause",
        "url": "function.openal-source-pause.php",
        "description": "Pause the source"
    },
    {
        "name": "openal_source_rewind",
        "url": "function.openal-source-rewind.php",
        "description": "Rewind the source"
    },
    {
        "name": "openal_source_stop",
        "url": "function.openal-source-stop.php",
        "description": "Stop playing the source"
    },
    {
        "name": "opendir",
        "url": "function.opendir.php",
        "description": "Open directory handle"
    },
    {
        "name": "openssl_cipher_iv_length",
        "url": "function.openssl-cipher-iv-length.php",
        "description": "Gets the cipher iv length"
    },
    {
        "name": "openssl_cms_decrypt",
        "url": "function.openssl-cms-decrypt.php",
        "description": "Decrypt a CMS message"
    },
    {
        "name": "openssl_cms_read",
        "url": "function.openssl-cms-read.php",
        "description": "Export the CMS file to an array of PEM certificates"
    },
    {
        "name": "openssl_cms_verify",
        "url": "function.openssl-cms-verify.php",
        "description": "Verify a CMS signature"
    },
    {
        "name": "openssl_csr_export_to_file",
        "url": "function.openssl-csr-export-to-file.php",
        "description": "Exports a CSR to a file"
    },
    {
        "name": "openssl_csr_get_subject",
        "url": "function.openssl-csr-get-subject.php",
        "description": "Returns the subject of a CSR"
    },
    {
        "name": "openssl_csr_sign",
        "url": "function.openssl-csr-sign.php",
        "description": "Sign a CSR with another certificate (or itself) and generate a certificate"
    },
    {
        "name": "openssl_dh_compute_key",
        "url": "function.openssl-dh-compute-key.php",
        "description": "Computes shared secret for public value of remote DH public key and local DH key"
    },
    {
        "name": "openssl_encrypt",
        "url": "function.openssl-encrypt.php",
        "description": "Encrypts data"
    },
    {
        "name": "openssl_free_key",
        "url": "function.openssl-free-key.php",
        "description": "Free key resource"
    },
    {
        "name": "openssl_get_cipher_methods",
        "url": "function.openssl-get-cipher-methods.php",
        "description": "Gets available cipher methods"
    },
    {
        "name": "openssl_get_md_methods",
        "url": "function.openssl-get-md-methods.php",
        "description": "Gets available digest methods"
    },
    {
        "name": "openssl_get_publickey",
        "url": "function.openssl-get-publickey.php",
        "description": "Alias of openssl_pkey_get_public"
    },
    {
        "name": "openssl_pbkdf2",
        "url": "function.openssl-pbkdf2.php",
        "description": "Generates a PKCS5 v2 PBKDF2 string"
    },
    {
        "name": "openssl_pkcs7_encrypt",
        "url": "function.openssl-pkcs7-encrypt.php",
        "description": "Encrypt an S\/MIME message"
    },
    {
        "name": "openssl_pkcs7_sign",
        "url": "function.openssl-pkcs7-sign.php",
        "description": "Sign an S\/MIME message"
    },
    {
        "name": "openssl_pkcs12_export",
        "url": "function.openssl-pkcs12-export.php",
        "description": "Exports a PKCS#12 Compatible Certificate Store File to variable"
    },
    {
        "name": "openssl_pkcs12_read",
        "url": "function.openssl-pkcs12-read.php",
        "description": "Parse a PKCS#12 Certificate Store into an array"
    },
    {
        "name": "openssl_pkey_export",
        "url": "function.openssl-pkey-export.php",
        "description": "Gets an exportable representation of a key into a string"
    },
    {
        "name": "openssl_pkey_free",
        "url": "function.openssl-pkey-free.php",
        "description": "Frees a private key"
    },
    {
        "name": "openssl_pkey_get_private",
        "url": "function.openssl-pkey-get-private.php",
        "description": "Get a private key"
    },
    {
        "name": "openssl_pkey_new",
        "url": "function.openssl-pkey-new.php",
        "description": "Generates a new private key"
    },
    {
        "name": "openssl_private_encrypt",
        "url": "function.openssl-private-encrypt.php",
        "description": "Encrypts data with private key"
    },
    {
        "name": "openssl_public_encrypt",
        "url": "function.openssl-public-encrypt.php",
        "description": "Encrypts data with public key"
    },
    {
        "name": "openssl_seal",
        "url": "function.openssl-seal.php",
        "description": "Seal (encrypt) data"
    },
    {
        "name": "openssl_spki_export",
        "url": "function.openssl-spki-export.php",
        "description": "Exports a valid PEM formatted public key signed public key and challenge"
    },
    {
        "name": "openssl_spki_new",
        "url": "function.openssl-spki-new.php",
        "description": "Generate a new signed public key and challenge"
    },
    {
        "name": "openssl_verify",
        "url": "function.openssl-verify.php",
        "description": "Verify signature"
    },
    {
        "name": "openssl_x509_check_private_key",
        "url": "function.openssl-x509-check-private-key.php",
        "description": "Checks if a private key corresponds to a certificate"
    },
    {
        "name": "openssl_x509_export_to_file",
        "url": "function.openssl-x509-export-to-file.php",
        "description": "Exports a certificate to file"
    },
    {
        "name": "openssl_x509_free",
        "url": "function.openssl-x509-free.php",
        "description": "Free certificate resource"
    },
    {
        "name": "openssl_x509_read",
        "url": "function.openssl-x509-read.php",
        "description": "Parse an X.509 certificate and return an object for   it"
    },
    {
        "name": "openssl_x509_verify",
        "url": "function.openssl-x509-verify.php",
        "description": "Verifies digital signature of x509 certificate against a public key"
    },
    {
        "name": "OuterIterator::getInnerIterator",
        "url": "outeriterator.getinneriterator.php",
        "description": "Returns the inner iterator for the current entry"
    },
    {
        "name": "output_reset_rewrite_vars",
        "url": "function.output-reset-rewrite-vars.php",
        "description": "Reset URL rewriter values"
    },
    {
        "name": "pack",
        "url": "function.pack.php",
        "description": "Pack data into binary string"
    },
    {
        "name": "parallel\\Channel::close",
        "url": "parallel-channel.close.php",
        "description": "Closing"
    },
    {
        "name": "parallel\\Channel::open",
        "url": "parallel-channel.open.php",
        "description": "Access"
    },
    {
        "name": "parallel\\Channel::send",
        "url": "parallel-channel.send.php",
        "description": "Sharing"
    },
    {
        "name": "parallel\\Events::addChannel",
        "url": "parallel-events.addchannel.php",
        "description": "Targets"
    },
    {
        "name": "parallel\\Events::poll",
        "url": "parallel-events.poll.php",
        "description": "Polling"
    },
    {
        "name": "parallel\\Events::setBlocking",
        "url": "parallel-events.setblocking.php",
        "description": "Behaviour"
    },
    {
        "name": "parallel\\Events::setTimeout",
        "url": "parallel-events.settimeout.php",
        "description": "Behaviour"
    },
    {
        "name": "parallel\\Events\\Input::clear",
        "url": "parallel-events-input.clear.php",
        "description": "Inputs"
    },
    {
        "name": "parallel\\Future::cancel",
        "url": "parallel-future.cancel.php",
        "description": "Cancellation"
    },
    {
        "name": "parallel\\Future::done",
        "url": "parallel-future.done.php",
        "description": "State Detection"
    },
    {
        "name": "parallel\\run",
        "url": "parallel.run.php",
        "description": "Execution"
    },
    {
        "name": "parallel\\Runtime::kill",
        "url": "parallel-runtime.kill.php",
        "description": "Runtime Join"
    },
    {
        "name": "parallel\\Runtime::__construct",
        "url": "parallel-runtime.construct.php",
        "description": "Runtime Construction"
    },
    {
        "name": "parallel\\Sync::notify",
        "url": "parallel-sync.notify.php",
        "description": "Synchronization"
    },
    {
        "name": "parallel\\Sync::wait",
        "url": "parallel-sync.wait.php",
        "description": "Synchronization"
    },
    {
        "name": "parallel\\Sync::__invoke",
        "url": "parallel-sync.invoke.php",
        "description": "Synchronization"
    },
    {
        "name": "ParentIterator::getChildren",
        "url": "parentiterator.getchildren.php",
        "description": "Return the inner iterator's children contained in a ParentIterator"
    },
    {
        "name": "ParentIterator::next",
        "url": "parentiterator.next.php",
        "description": "Move the iterator forward"
    },
    {
        "name": "ParentIterator::__construct",
        "url": "parentiterator.construct.php",
        "description": "Constructs a ParentIterator"
    },
    {
        "name": "Parle\\Lexer::build",
        "url": "parle-lexer.build.php",
        "description": "Finalize the lexer rule set"
    },
    {
        "name": "Parle\\Lexer::consume",
        "url": "parle-lexer.consume.php",
        "description": "Pass the data for processing"
    },
    {
        "name": "Parle\\Lexer::getToken",
        "url": "parle-lexer.gettoken.php",
        "description": "Retrieve the current token"
    },
    {
        "name": "Parle\\Lexer::push",
        "url": "parle-lexer.push.php",
        "description": "Add a lexer rule"
    },
    {
        "name": "Parle\\Parser::advance",
        "url": "parle-parser.advance.php",
        "description": "Process next parser rule"
    },
    {
        "name": "Parle\\Parser::consume",
        "url": "parle-parser.consume.php",
        "description": "Consume the data for processing"
    },
    {
        "name": "Parle\\Parser::errorInfo",
        "url": "parle-parser.errorinfo.php",
        "description": "Retrieve the error information"
    },
    {
        "name": "Parle\\Parser::nonassoc",
        "url": "parle-parser.nonassoc.php",
        "description": "Declare a token with no associativity"
    },
    {
        "name": "Parle\\Parser::push",
        "url": "parle-parser.push.php",
        "description": "Add a grammar rule"
    },
    {
        "name": "Parle\\Parser::right",
        "url": "parle-parser.right.php",
        "description": "Declare a token with right-associativity"
    },
    {
        "name": "Parle\\Parser::sigilCount",
        "url": "parle-parser.sigilcount.php",
        "description": "Number of elements in matched rule"
    },
    {
        "name": "Parle\\Parser::token",
        "url": "parle-parser.token.php",
        "description": "Declare a token"
    },
    {
        "name": "Parle\\Parser::trace",
        "url": "parle-parser.trace.php",
        "description": "Trace the parser operation"
    },
    {
        "name": "Parle\\RLexer::advance",
        "url": "parle-rlexer.advance.php",
        "description": "Process next lexer rule"
    },
    {
        "name": "Parle\\RLexer::callout",
        "url": "parle-rlexer.callout.php",
        "description": "Define token callback"
    },
    {
        "name": "Parle\\RLexer::dump",
        "url": "parle-rlexer.dump.php",
        "description": "Dump the state machine"
    },
    {
        "name": "Parle\\RLexer::insertMacro",
        "url": "parle-rlexer.insertmacro.php",
        "description": "Insert regex macro"
    },
    {
        "name": "Parle\\RLexer::pushState",
        "url": "parle-rlexer.pushstate.php",
        "description": "Push a new start state"
    },
    {
        "name": "Parle\\RParser::advance",
        "url": "parle-rparser.advance.php",
        "description": "Process next parser rule"
    },
    {
        "name": "Parle\\RParser::consume",
        "url": "parle-rparser.consume.php",
        "description": "Consume the data for processing"
    },
    {
        "name": "Parle\\RParser::errorInfo",
        "url": "parle-rparser.errorinfo.php",
        "description": "Retrieve the error information"
    },
    {
        "name": "Parle\\RParser::nonassoc",
        "url": "parle-rparser.nonassoc.php",
        "description": "Declare a token with no associativity"
    },
    {
        "name": "Parle\\RParser::push",
        "url": "parle-rparser.push.php",
        "description": "Add a grammar rule"
    },
    {
        "name": "Parle\\RParser::right",
        "url": "parle-rparser.right.php",
        "description": "Declare a token with right-associativity"
    },
    {
        "name": "Parle\\RParser::sigilCount",
        "url": "parle-rparser.sigilcount.php",
        "description": "Number of elements in matched rule"
    },
    {
        "name": "Parle\\RParser::token",
        "url": "parle-rparser.token.php",
        "description": "Declare a token"
    },
    {
        "name": "Parle\\RParser::trace",
        "url": "parle-rparser.trace.php",
        "description": "Trace the parser operation"
    },
    {
        "name": "Parle\\Stack::pop",
        "url": "parle-stack.pop.php",
        "description": "Pop an item from the stack"
    },
    {
        "name": "parse_ini_file",
        "url": "function.parse-ini-file.php",
        "description": "Parse a configuration file"
    },
    {
        "name": "parse_str",
        "url": "function.parse-str.php",
        "description": "Parses the string into variables"
    },
    {
        "name": "passthru",
        "url": "function.passthru.php",
        "description": "Execute an external program and display raw output"
    },
    {
        "name": "password_get_info",
        "url": "function.password-get-info.php",
        "description": "Returns information about the given hash"
    },
    {
        "name": "password_needs_rehash",
        "url": "function.password-needs-rehash.php",
        "description": "Checks if the given hash matches the given options"
    },
    {
        "name": "pathinfo",
        "url": "function.pathinfo.php",
        "description": "Returns information about a file path"
    },
    {
        "name": "pcntl_alarm",
        "url": "function.pcntl-alarm.php",
        "description": "Set an alarm clock for delivery of a signal"
    },
    {
        "name": "pcntl_errno",
        "url": "function.pcntl-errno.php",
        "description": "Alias of pcntl_get_last_error"
    },
    {
        "name": "pcntl_fork",
        "url": "function.pcntl-fork.php",
        "description": "Forks the currently running process"
    },
    {
        "name": "pcntl_get_last_error",
        "url": "function.pcntl-get-last-error.php",
        "description": "Retrieve the error number set by the last pcntl function which failed"
    },
    {
        "name": "pcntl_setpriority",
        "url": "function.pcntl-setpriority.php",
        "description": "Change the priority of any process"
    },
    {
        "name": "pcntl_signal_dispatch",
        "url": "function.pcntl-signal-dispatch.php",
        "description": "Calls signal handlers for pending signals"
    },
    {
        "name": "pcntl_sigprocmask",
        "url": "function.pcntl-sigprocmask.php",
        "description": "Sets and retrieves blocked signals"
    },
    {
        "name": "pcntl_sigwaitinfo",
        "url": "function.pcntl-sigwaitinfo.php",
        "description": "Waits for signals"
    },
    {
        "name": "pcntl_unshare",
        "url": "function.pcntl-unshare.php",
        "description": "Dissociates parts of the process execution context"
    },
    {
        "name": "pcntl_waitpid",
        "url": "function.pcntl-waitpid.php",
        "description": "Waits on or returns the status of a forked child"
    },
    {
        "name": "pcntl_wifexited",
        "url": "function.pcntl-wifexited.php",
        "description": "Checks if status code represents a normal exit"
    },
    {
        "name": "pcntl_wifstopped",
        "url": "function.pcntl-wifstopped.php",
        "description": "Checks whether the child process is currently stopped"
    },
    {
        "name": "pcntl_wtermsig",
        "url": "function.pcntl-wtermsig.php",
        "description": "Returns the signal which caused the child to terminate"
    },
    {
        "name": "PDO::commit",
        "url": "pdo.commit.php",
        "description": "Commits a transaction"
    },
    {
        "name": "PDO::errorCode",
        "url": "pdo.errorcode.php",
        "description": "Fetch the SQLSTATE associated with the last operation on the database handle"
    },
    {
        "name": "PDO::exec",
        "url": "pdo.exec.php",
        "description": "Execute an SQL statement and return the number of affected rows"
    },
    {
        "name": "PDO::getAvailableDrivers",
        "url": "pdo.getavailabledrivers.php",
        "description": "Return an array of available PDO drivers"
    },
    {
        "name": "PDO::lastInsertId",
        "url": "pdo.lastinsertid.php",
        "description": "Returns the ID of the last inserted row or sequence value"
    },
    {
        "name": "PDO::pgsqlCopyFromFile",
        "url": "pdo.pgsqlcopyfromfile.php",
        "description": "Copy data from file into table"
    },
    {
        "name": "PDO::pgsqlCopyToFile",
        "url": "pdo.pgsqlcopytofile.php",
        "description": "Copy data from table into file"
    },
    {
        "name": "PDO::pgsqlGetPid",
        "url": "pdo.pgsqlgetpid.php",
        "description": "Get the server PID"
    },
    {
        "name": "PDO::pgsqlLOBOpen",
        "url": "pdo.pgsqllobopen.php",
        "description": "Opens an existing large object stream"
    },
    {
        "name": "PDO::prepare",
        "url": "pdo.prepare.php",
        "description": "Prepares a statement for execution and returns a statement object"
    },
    {
        "name": "PDO::quote",
        "url": "pdo.quote.php",
        "description": "Quotes a string for use in a query"
    },
    {
        "name": "PDO::setAttribute",
        "url": "pdo.setattribute.php",
        "description": "Set an attribute"
    },
    {
        "name": "PDO::sqliteCreateCollation",
        "url": "pdo.sqlitecreatecollation.php",
        "description": "Registers a User Defined Function for use as a collating function in SQL statements"
    },
    {
        "name": "PDO::__construct",
        "url": "pdo.construct.php",
        "description": "Creates a PDO instance representing a connection to a database"
    },
    {
        "name": "PDOStatement::bindParam",
        "url": "pdostatement.bindparam.php",
        "description": "Binds a parameter to the specified variable name"
    },
    {
        "name": "PDOStatement::closeCursor",
        "url": "pdostatement.closecursor.php",
        "description": "Closes the cursor, enabling the statement to be executed again"
    },
    {
        "name": "PDOStatement::debugDumpParams",
        "url": "pdostatement.debugdumpparams.php",
        "description": "Dump an SQL prepared command"
    },
    {
        "name": "PDOStatement::errorInfo",
        "url": "pdostatement.errorinfo.php",
        "description": "Fetch extended error information associated with the last operation on the statement handle"
    },
    {
        "name": "PDOStatement::fetch",
        "url": "pdostatement.fetch.php",
        "description": "Fetches the next row from a result set"
    },
    {
        "name": "PDOStatement::fetchColumn",
        "url": "pdostatement.fetchcolumn.php",
        "description": "Returns a single column from the next row of a result set"
    },
    {
        "name": "PDOStatement::getAttribute",
        "url": "pdostatement.getattribute.php",
        "description": "Retrieve a statement attribute"
    },
    {
        "name": "PDOStatement::getIterator",
        "url": "pdostatement.getiterator.php",
        "description": "Gets result set iterator"
    },
    {
        "name": "PDOStatement::rowCount",
        "url": "pdostatement.rowcount.php",
        "description": "Returns the number of rows affected by the last SQL statement"
    },
    {
        "name": "PDOStatement::setFetchMode",
        "url": "pdostatement.setfetchmode.php",
        "description": "Set the default fetch mode for this statement"
    },
    {
        "name": "PDO_DBLIB DSN",
        "url": "ref.pdo-dblib.connection.php",
        "description": "Connecting to Microsoft SQL Server and Sybase databases"
    },
    {
        "name": "PDO_IBM DSN",
        "url": "ref.pdo-ibm.connection.php",
        "description": "Connecting to IBM databases"
    },
    {
        "name": "PDO_MYSQL DSN",
        "url": "ref.pdo-mysql.connection.php",
        "description": "Connecting to MySQL databases"
    },
    {
        "name": "PDO_ODBC DSN",
        "url": "ref.pdo-odbc.connection.php",
        "description": "Connecting to ODBC or DB2 databases"
    },
    {
        "name": "PDO_SQLITE DSN",
        "url": "ref.pdo-sqlite.connection.php",
        "description": "Connecting to SQLite databases"
    },
    {
        "name": "pfsockopen",
        "url": "function.pfsockopen.php",
        "description": "Open persistent Internet or Unix domain socket connection"
    },
    {
        "name": "pg_cancel_query",
        "url": "function.pg-cancel-query.php",
        "description": "Cancel an asynchronous query"
    },
    {
        "name": "pg_close",
        "url": "function.pg-close.php",
        "description": "Closes a PostgreSQL connection"
    },
    {
        "name": "pg_connection_busy",
        "url": "function.pg-connection-busy.php",
        "description": "Get connection is busy or not"
    },
    {
        "name": "pg_connection_status",
        "url": "function.pg-connection-status.php",
        "description": "Get connection status"
    },
    {
        "name": "pg_consume_input",
        "url": "function.pg-consume-input.php",
        "description": "Reads input on the connection"
    },
    {
        "name": "pg_copy_from",
        "url": "function.pg-copy-from.php",
        "description": "Insert records into a table from an array"
    },
    {
        "name": "pg_dbname",
        "url": "function.pg-dbname.php",
        "description": "Get the database name"
    },
    {
        "name": "pg_end_copy",
        "url": "function.pg-end-copy.php",
        "description": "Sync with PostgreSQL backend"
    },
    {
        "name": "pg_escape_identifier",
        "url": "function.pg-escape-identifier.php",
        "description": "Escape a identifier for insertion into a text field"
    },
    {
        "name": "pg_escape_string",
        "url": "function.pg-escape-string.php",
        "description": "Escape a string for query"
    },
    {
        "name": "pg_fetch_all",
        "url": "function.pg-fetch-all.php",
        "description": "Fetches all rows from a result as an array"
    },
    {
        "name": "pg_fetch_array",
        "url": "function.pg-fetch-array.php",
        "description": "Fetch a row as an array"
    },
    {
        "name": "pg_fetch_object",
        "url": "function.pg-fetch-object.php",
        "description": "Fetch a row as an object"
    },
    {
        "name": "pg_fetch_row",
        "url": "function.pg-fetch-row.php",
        "description": "Get a row as an enumerated array"
    },
    {
        "name": "pg_field_name",
        "url": "function.pg-field-name.php",
        "description": "Returns the name of a field"
    },
    {
        "name": "pg_field_prtlen",
        "url": "function.pg-field-prtlen.php",
        "description": "Returns the printed length"
    },
    {
        "name": "pg_field_table",
        "url": "function.pg-field-table.php",
        "description": "Returns the name or oid of the tables field"
    },
    {
        "name": "pg_field_type_oid",
        "url": "function.pg-field-type-oid.php",
        "description": "Returns the type ID (OID) for the corresponding field number"
    },
    {
        "name": "pg_free_result",
        "url": "function.pg-free-result.php",
        "description": "Free result memory"
    },
    {
        "name": "pg_get_pid",
        "url": "function.pg-get-pid.php",
        "description": "Gets the backend's process ID"
    },
    {
        "name": "pg_host",
        "url": "function.pg-host.php",
        "description": "Returns the host name associated with the connection"
    },
    {
        "name": "pg_last_error",
        "url": "function.pg-last-error.php",
        "description": "Get the last error message string of a connection"
    },
    {
        "name": "pg_last_oid",
        "url": "function.pg-last-oid.php",
        "description": "Returns the last row's OID"
    },
    {
        "name": "pg_lo_create",
        "url": "function.pg-lo-create.php",
        "description": "Create a large object"
    },
    {
        "name": "pg_lo_import",
        "url": "function.pg-lo-import.php",
        "description": "Import a large object from file"
    },
    {
        "name": "pg_lo_read",
        "url": "function.pg-lo-read.php",
        "description": "Read a large object"
    },
    {
        "name": "pg_lo_seek",
        "url": "function.pg-lo-seek.php",
        "description": "Seeks position within a large object"
    },
    {
        "name": "pg_lo_truncate",
        "url": "function.pg-lo-truncate.php",
        "description": "Truncates a large object"
    },
    {
        "name": "pg_lo_write",
        "url": "function.pg-lo-write.php",
        "description": "Write to a large object"
    },
    {
        "name": "pg_num_fields",
        "url": "function.pg-num-fields.php",
        "description": "Returns the number of fields in a result"
    },
    {
        "name": "pg_options",
        "url": "function.pg-options.php",
        "description": "Get the options associated with the connection"
    },
    {
        "name": "pg_pconnect",
        "url": "function.pg-pconnect.php",
        "description": "Open a persistent PostgreSQL connection"
    },
    {
        "name": "pg_port",
        "url": "function.pg-port.php",
        "description": "Return the port number associated with the connection"
    },
    {
        "name": "pg_put_line",
        "url": "function.pg-put-line.php",
        "description": "Send a NULL-terminated string to PostgreSQL backend"
    },
    {
        "name": "pg_query_params",
        "url": "function.pg-query-params.php",
        "description": "Submits a command to the server and waits for the result, with the ability to pass parameters separately from the SQL command text"
    },
    {
        "name": "pg_result_error_field",
        "url": "function.pg-result-error-field.php",
        "description": "Returns an individual field of an error report"
    },
    {
        "name": "pg_result_status",
        "url": "function.pg-result-status.php",
        "description": "Get status of query result"
    },
    {
        "name": "pg_send_execute",
        "url": "function.pg-send-execute.php",
        "description": "Sends a request to execute a prepared statement with given parameters, without waiting for the result(s)"
    },
    {
        "name": "pg_send_query",
        "url": "function.pg-send-query.php",
        "description": "Sends asynchronous query"
    },
    {
        "name": "pg_set_client_encoding",
        "url": "function.pg-set-client-encoding.php",
        "description": "Set the client encoding"
    },
    {
        "name": "pg_set_error_verbosity",
        "url": "function.pg-set-error-verbosity.php",
        "description": "Determines the verbosity of messages returned by pg_last_error     and pg_result_error"
    },
    {
        "name": "pg_socket",
        "url": "function.pg-socket.php",
        "description": "Get a read only handle to the socket underlying a PostgreSQL connection"
    },
    {
        "name": "pg_transaction_status",
        "url": "function.pg-transaction-status.php",
        "description": "Returns the current in-transaction status of the server"
    },
    {
        "name": "pg_unescape_bytea",
        "url": "function.pg-unescape-bytea.php",
        "description": "Unescape binary for bytea type"
    },
    {
        "name": "pg_update",
        "url": "function.pg-update.php",
        "description": "Update table"
    },
    {
        "name": "phar:\/\/",
        "url": "wrappers.phar.php",
        "description": "PHP Archive"
    },
    {
        "name": "Phar::addFile",
        "url": "phar.addfile.php",
        "description": "Add a file from the filesystem to the phar archive"
    },
    {
        "name": "Phar::apiVersion",
        "url": "phar.apiversion.php",
        "description": "Returns the api version"
    },
    {
        "name": "Phar::buildFromIterator",
        "url": "phar.buildfromiterator.php",
        "description": "Construct a phar archive from an iterator"
    },
    {
        "name": "Phar::canWrite",
        "url": "phar.canwrite.php",
        "description": "Returns whether phar extension supports writing and creating phars"
    },
    {
        "name": "Phar::compressFiles",
        "url": "phar.compressfiles.php",
        "description": "Compresses all files in the current Phar archive"
    },
    {
        "name": "Phar::convertToExecutable",
        "url": "phar.converttoexecutable.php",
        "description": "Convert a phar archive to another executable phar archive file format"
    },
    {
        "name": "Phar::count",
        "url": "phar.count.php",
        "description": "Returns the number of entries (files) in the Phar archive"
    },
    {
        "name": "Phar::decompress",
        "url": "phar.decompress.php",
        "description": "Decompresses the entire Phar archive"
    },
    {
        "name": "Phar::delete",
        "url": "phar.delete.php",
        "description": "Delete a file within a phar archive"
    },
    {
        "name": "Phar::extractTo",
        "url": "phar.extractto.php",
        "description": "Extract the contents of a phar archive to a directory"
    },
    {
        "name": "Phar::getMetadata",
        "url": "phar.getmetadata.php",
        "description": "Returns phar archive meta-data"
    },
    {
        "name": "Phar::getPath",
        "url": "phar.getpath.php",
        "description": "Get the real path to the Phar archive on disk"
    },
    {
        "name": "Phar::getStub",
        "url": "phar.getstub.php",
        "description": "Return the PHP loader or bootstrap stub of a Phar archive"
    },
    {
        "name": "Phar::getSupportedSignatures",
        "url": "phar.getsupportedsignatures.php",
        "description": "Return array of supported signature types"
    },
    {
        "name": "Phar::hasMetadata",
        "url": "phar.hasmetadata.php",
        "description": "Returns whether phar has global meta-data"
    },
    {
        "name": "Phar::isBuffering",
        "url": "phar.isbuffering.php",
        "description": "Used to determine whether Phar write operations are being buffered, or are flushing directly to disk"
    },
    {
        "name": "Phar::isFileFormat",
        "url": "phar.isfileformat.php",
        "description": "Returns true if the phar archive is based on the tar\/phar\/zip file format depending on the parameter"
    },
    {
        "name": "Phar::isWritable",
        "url": "phar.iswritable.php",
        "description": "Returns true if the phar archive can be modified"
    },
    {
        "name": "Phar::mapPhar",
        "url": "phar.mapphar.php",
        "description": "Reads the currently executed file (a phar) and registers its manifest"
    },
    {
        "name": "Phar::mungServer",
        "url": "phar.mungserver.php",
        "description": "Defines a list of up to 4 $_SERVER variables that should be modified for execution"
    },
    {
        "name": "Phar::offsetGet",
        "url": "phar.offsetget.php",
        "description": "Gets a PharFileInfo object for a specific file"
    },
    {
        "name": "Phar::offsetUnset",
        "url": "phar.offsetunset.php",
        "description": "Remove a file from a phar"
    },
    {
        "name": "Phar::setAlias",
        "url": "phar.setalias.php",
        "description": "Set the alias for the Phar archive"
    },
    {
        "name": "Phar::setMetadata",
        "url": "phar.setmetadata.php",
        "description": "Sets phar archive meta-data"
    },
    {
        "name": "Phar::setStub",
        "url": "phar.setstub.php",
        "description": "Used to set the PHP loader or bootstrap stub of a Phar archive"
    },
    {
        "name": "Phar::stopBuffering",
        "url": "phar.stopbuffering.php",
        "description": "Stop buffering write requests to the Phar archive, and save changes to disk"
    },
    {
        "name": "Phar::webPhar",
        "url": "phar.webphar.php",
        "description": "Routes a request from a web browser to an internal file within the phar archive"
    },
    {
        "name": "Phar::__destruct",
        "url": "phar.destruct.php",
        "description": "Destructs a Phar archive object"
    },
    {
        "name": "PharData::addEmptyDir",
        "url": "phardata.addemptydir.php",
        "description": "Add an empty directory to the tar\/zip archive"
    },
    {
        "name": "PharData::addFromString",
        "url": "phardata.addfromstring.php",
        "description": "Add a file from a string to the tar\/zip archive"
    },
    {
        "name": "PharData::buildFromIterator",
        "url": "phardata.buildfromiterator.php",
        "description": "Construct a tar or zip archive from an iterator"
    },
    {
        "name": "PharData::compressFiles",
        "url": "phardata.compressfiles.php",
        "description": "Compresses all files in the current tar\/zip archive"
    },
    {
        "name": "PharData::convertToExecutable",
        "url": "phardata.converttoexecutable.php",
        "description": "Convert a non-executable tar\/zip archive to an executable phar archive"
    },
    {
        "name": "PharData::decompress",
        "url": "phardata.decompress.php",
        "description": "Decompresses the entire Phar archive"
    },
    {
        "name": "PharData::delete",
        "url": "phardata.delete.php",
        "description": "Delete a file within a tar\/zip archive"
    },
    {
        "name": "PharData::extractTo",
        "url": "phardata.extractto.php",
        "description": "Extract the contents of a tar\/zip archive to a directory"
    },
    {
        "name": "PharData::offsetSet",
        "url": "phardata.offsetset.php",
        "description": "Set the contents of a file within the tar\/zip to those of an external file or string"
    },
    {
        "name": "PharData::setAlias",
        "url": "phardata.setalias.php",
        "description": "Dummy function (Phar::setAlias is not valid for PharData)"
    },
    {
        "name": "PharData::setMetadata",
        "url": "phardata.setmetadata.php",
        "description": "Sets phar archive meta-data"
    },
    {
        "name": "PharData::setStub",
        "url": "phardata.setstub.php",
        "description": "Dummy function (Phar::setStub is not valid for PharData)"
    },
    {
        "name": "PharData::__destruct",
        "url": "phardata.destruct.php",
        "description": "Destructs a non-executable tar or zip archive object"
    },
    {
        "name": "PharFileInfo::compress",
        "url": "pharfileinfo.compress.php",
        "description": "Compresses the current Phar entry with either zlib or bzip2 compression"
    },
    {
        "name": "PharFileInfo::delMetadata",
        "url": "pharfileinfo.delmetadata.php",
        "description": "Deletes the metadata of the entry"
    },
    {
        "name": "PharFileInfo::getContent",
        "url": "pharfileinfo.getcontent.php",
        "description": "Get the complete file contents of the entry"
    },
    {
        "name": "PharFileInfo::getMetadata",
        "url": "pharfileinfo.getmetadata.php",
        "description": "Returns file-specific meta-data saved with a file"
    },
    {
        "name": "PharFileInfo::hasMetadata",
        "url": "pharfileinfo.hasmetadata.php",
        "description": "Returns the metadata of the entry"
    },
    {
        "name": "PharFileInfo::isCRCChecked",
        "url": "pharfileinfo.iscrcchecked.php",
        "description": "Returns whether file entry has had its CRC verified"
    },
    {
        "name": "PharFileInfo::__construct",
        "url": "pharfileinfo.construct.php",
        "description": "Construct a Phar entry object"
    },
    {
        "name": "php:\/\/",
        "url": "wrappers.php.php",
        "description": "Accessing various I\/O streams"
    },
    {
        "name": "phpdbg_break_file",
        "url": "function.phpdbg-break-file.php",
        "description": "Inserts a breakpoint at a line in a file"
    },
    {
        "name": "phpdbg_break_method",
        "url": "function.phpdbg-break-method.php",
        "description": "Inserts a breakpoint at entry to a method"
    },
    {
        "name": "phpdbg_clear",
        "url": "function.phpdbg-clear.php",
        "description": "Clears all breakpoints"
    },
    {
        "name": "phpdbg_end_oplog",
        "url": "function.phpdbg-end-oplog.php",
        "description": "Description"
    },
    {
        "name": "phpdbg_get_executable",
        "url": "function.phpdbg-get-executable.php",
        "description": "Description"
    },
    {
        "name": "phpdbg_start_oplog",
        "url": "function.phpdbg-start-oplog.php",
        "description": "Description"
    },
    {
        "name": "PhpToken::getTokenName",
        "url": "phptoken.gettokenname.php",
        "description": "Returns the name of the token."
    },
    {
        "name": "PhpToken::isIgnorable",
        "url": "phptoken.isignorable.php",
        "description": "Tells whether the token would be ignored by the PHP parser."
    },
    {
        "name": "PhpToken::__construct",
        "url": "phptoken.construct.php",
        "description": "Returns a new PhpToken object"
    },
    {
        "name": "phpversion",
        "url": "function.phpversion.php",
        "description": "Gets the current PHP version"
    },
    {
        "name": "php_ini_scanned_files",
        "url": "function.php-ini-scanned-files.php",
        "description": "Return a list of .ini files parsed from the additional ini dir"
    },
    {
        "name": "php_strip_whitespace",
        "url": "function.php-strip-whitespace.php",
        "description": "Return source with stripped comments and whitespace"
    },
    {
        "name": "php_user_filter::filter",
        "url": "php-user-filter.filter.php",
        "description": "Called when applying the filter"
    },
    {
        "name": "php_user_filter::onCreate",
        "url": "php-user-filter.oncreate.php",
        "description": "Called when creating the filter"
    },
    {
        "name": "png2wbmp",
        "url": "function.png2wbmp.php",
        "description": "Convert PNG image file to WBMP image file"
    },
    {
        "name": "Pool::resize",
        "url": "pool.resize.php",
        "description": "Resize the Pool"
    },
    {
        "name": "Pool::submit",
        "url": "pool.submit.php",
        "description": "Submits an object for execution"
    },
    {
        "name": "Pool::__construct",
        "url": "pool.construct.php",
        "description": "Creates a new Pool of Workers"
    },
    {
        "name": "pos",
        "url": "function.pos.php",
        "description": "Alias of current"
    },
    {
        "name": "posix_ctermid",
        "url": "function.posix-ctermid.php",
        "description": "Get path name of controlling terminal"
    },
    {
        "name": "posix_errno",
        "url": "function.posix-errno.php",
        "description": "Alias of posix_get_last_error"
    },
    {
        "name": "posix_getcwd",
        "url": "function.posix-getcwd.php",
        "description": "Pathname of current directory"
    },
    {
        "name": "posix_geteuid",
        "url": "function.posix-geteuid.php",
        "description": "Return the effective user ID of the current process"
    },
    {
        "name": "posix_getgrgid",
        "url": "function.posix-getgrgid.php",
        "description": "Return info about a group by group id"
    },
    {
        "name": "posix_getgroups",
        "url": "function.posix-getgroups.php",
        "description": "Return the group set of the current process"
    },
    {
        "name": "posix_getpgid",
        "url": "function.posix-getpgid.php",
        "description": "Get process group id for job control"
    },
    {
        "name": "posix_getpid",
        "url": "function.posix-getpid.php",
        "description": "Return the current process identifier"
    },
    {
        "name": "posix_getpwnam",
        "url": "function.posix-getpwnam.php",
        "description": "Return info about a user by username"
    },
    {
        "name": "posix_getrlimit",
        "url": "function.posix-getrlimit.php",
        "description": "Return info about system resource limits"
    },
    {
        "name": "posix_getuid",
        "url": "function.posix-getuid.php",
        "description": "Return the real user ID of the current process"
    },
    {
        "name": "posix_initgroups",
        "url": "function.posix-initgroups.php",
        "description": "Calculate the group access list"
    },
    {
        "name": "posix_kill",
        "url": "function.posix-kill.php",
        "description": "Send a signal to a process"
    },
    {
        "name": "posix_mknod",
        "url": "function.posix-mknod.php",
        "description": "Create a special or ordinary file (POSIX.1)"
    },
    {
        "name": "posix_setegid",
        "url": "function.posix-setegid.php",
        "description": "Set the effective GID of the current process"
    },
    {
        "name": "posix_setgid",
        "url": "function.posix-setgid.php",
        "description": "Set the GID of the current process"
    },
    {
        "name": "posix_setrlimit",
        "url": "function.posix-setrlimit.php",
        "description": "Set system resource limits"
    },
    {
        "name": "posix_setuid",
        "url": "function.posix-setuid.php",
        "description": "Set the UID of the current process"
    },
    {
        "name": "posix_sysconf",
        "url": "function.posix-sysconf.php",
        "description": "Returns system runtime information"
    },
    {
        "name": "posix_ttyname",
        "url": "function.posix-ttyname.php",
        "description": "Determine terminal device name"
    },
    {
        "name": "pow",
        "url": "function.pow.php",
        "description": "Exponential expression"
    },
    {
        "name": "preg_grep",
        "url": "function.preg-grep.php",
        "description": "Return array entries that match the pattern"
    },
    {
        "name": "preg_last_error_msg",
        "url": "function.preg-last-error-msg.php",
        "description": "Returns the error message of the last PCRE regex execution"
    },
    {
        "name": "preg_match_all",
        "url": "function.preg-match-all.php",
        "description": "Perform a global regular expression match"
    },
    {
        "name": "preg_replace",
        "url": "function.preg-replace.php",
        "description": "Perform a regular expression search and replace"
    },
    {
        "name": "preg_replace_callback_array",
        "url": "function.preg-replace-callback-array.php",
        "description": "Perform a regular expression search and replace using callbacks"
    },
    {
        "name": "prev",
        "url": "function.prev.php",
        "description": "Rewind the internal array pointer"
    },
    {
        "name": "printf",
        "url": "function.printf.php",
        "description": "Output a formatted string"
    },
    {
        "name": "proc_close",
        "url": "function.proc-close.php",
        "description": "Close a process opened by proc_open and return the exit code of that process"
    },
    {
        "name": "proc_nice",
        "url": "function.proc-nice.php",
        "description": "Change the priority of the current process"
    },
    {
        "name": "proc_terminate",
        "url": "function.proc-terminate.php",
        "description": "Kills a process opened by proc_open"
    },
    {
        "name": "pspell_add_to_personal",
        "url": "function.pspell-add-to-personal.php",
        "description": "Add the word to a personal wordlist"
    },
    {
        "name": "pspell_check",
        "url": "function.pspell-check.php",
        "description": "Check a word"
    },
    {
        "name": "pspell_config_create",
        "url": "function.pspell-config-create.php",
        "description": "Create a config used to open a dictionary"
    },
    {
        "name": "pspell_config_dict_dir",
        "url": "function.pspell-config-dict-dir.php",
        "description": "Location of the main word list"
    },
    {
        "name": "pspell_config_mode",
        "url": "function.pspell-config-mode.php",
        "description": "Change the mode number of suggestions returned"
    },
    {
        "name": "pspell_config_repl",
        "url": "function.pspell-config-repl.php",
        "description": "Set a file that contains replacement pairs"
    },
    {
        "name": "pspell_config_save_repl",
        "url": "function.pspell-config-save-repl.php",
        "description": "Determine whether to save a replacement pairs list   along with the wordlist"
    },
    {
        "name": "pspell_new",
        "url": "function.pspell-new.php",
        "description": "Load a new dictionary"
    },
    {
        "name": "pspell_new_personal",
        "url": "function.pspell-new-personal.php",
        "description": "Load a new dictionary with personal wordlist"
    },
    {
        "name": "pspell_store_replacement",
        "url": "function.pspell-store-replacement.php",
        "description": "Store a replacement pair for a word"
    },
    {
        "name": "ps_add_bookmark",
        "url": "function.ps-add-bookmark.php",
        "description": "Add bookmark to current page"
    },
    {
        "name": "ps_add_locallink",
        "url": "function.ps-add-locallink.php",
        "description": "Adds link to a page in the same document"
    },
    {
        "name": "ps_add_pdflink",
        "url": "function.ps-add-pdflink.php",
        "description": "Adds link to a page in a second pdf document"
    },
    {
        "name": "ps_arc",
        "url": "function.ps-arc.php",
        "description": "Draws an arc counterclockwise"
    },
    {
        "name": "ps_begin_page",
        "url": "function.ps-begin-page.php",
        "description": "Start a new page"
    },
    {
        "name": "ps_begin_template",
        "url": "function.ps-begin-template.php",
        "description": "Start a new template"
    },
    {
        "name": "ps_clip",
        "url": "function.ps-clip.php",
        "description": "Clips drawing to current path"
    },
    {
        "name": "ps_closepath",
        "url": "function.ps-closepath.php",
        "description": "Closes path"
    },
    {
        "name": "ps_close_image",
        "url": "function.ps-close-image.php",
        "description": "Closes image and frees memory"
    },
    {
        "name": "ps_curveto",
        "url": "function.ps-curveto.php",
        "description": "Draws a curve"
    },
    {
        "name": "ps_end_page",
        "url": "function.ps-end-page.php",
        "description": "End a page"
    },
    {
        "name": "ps_end_template",
        "url": "function.ps-end-template.php",
        "description": "End a template"
    },
    {
        "name": "ps_fill_stroke",
        "url": "function.ps-fill-stroke.php",
        "description": "Fills and strokes the current path"
    },
    {
        "name": "ps_get_buffer",
        "url": "function.ps-get-buffer.php",
        "description": "Fetches the full buffer containig the generated PS data"
    },
    {
        "name": "ps_get_value",
        "url": "function.ps-get-value.php",
        "description": "Gets certain values"
    },
    {
        "name": "ps_include_file",
        "url": "function.ps-include-file.php",
        "description": "Reads an external file with raw PostScript code"
    },
    {
        "name": "ps_makespotcolor",
        "url": "function.ps-makespotcolor.php",
        "description": "Create spot color"
    },
    {
        "name": "ps_new",
        "url": "function.ps-new.php",
        "description": "Creates a new PostScript document object"
    },
    {
        "name": "ps_open_image",
        "url": "function.ps-open-image.php",
        "description": "Reads an image for later placement"
    },
    {
        "name": "ps_open_memory_image",
        "url": "function.ps-open-memory-image.php",
        "description": "Takes an GD image and returns an image for placement in a PS document"
    },
    {
        "name": "ps_rect",
        "url": "function.ps-rect.php",
        "description": "Draws a rectangle"
    },
    {
        "name": "ps_rotate",
        "url": "function.ps-rotate.php",
        "description": "Sets rotation factor"
    },
    {
        "name": "ps_scale",
        "url": "function.ps-scale.php",
        "description": "Sets scaling factor"
    },
    {
        "name": "ps_setdash",
        "url": "function.ps-setdash.php",
        "description": "Sets appearance of a dashed line"
    },
    {
        "name": "ps_setfont",
        "url": "function.ps-setfont.php",
        "description": "Sets font to use for following output"
    },
    {
        "name": "ps_setlinecap",
        "url": "function.ps-setlinecap.php",
        "description": "Sets appearance of line ends"
    },
    {
        "name": "ps_setlinewidth",
        "url": "function.ps-setlinewidth.php",
        "description": "Sets width of a line"
    },
    {
        "name": "ps_setoverprintmode",
        "url": "function.ps-setoverprintmode.php",
        "description": "Sets overprint mode"
    },
    {
        "name": "ps_set_border_color",
        "url": "function.ps-set-border-color.php",
        "description": "Sets color of border for annotations"
    },
    {
        "name": "ps_set_border_style",
        "url": "function.ps-set-border-style.php",
        "description": "Sets border style of annotations"
    },
    {
        "name": "ps_set_parameter",
        "url": "function.ps-set-parameter.php",
        "description": "Sets certain parameters"
    },
    {
        "name": "ps_set_value",
        "url": "function.ps-set-value.php",
        "description": "Sets certain values"
    },
    {
        "name": "ps_shading_pattern",
        "url": "function.ps-shading-pattern.php",
        "description": "Creates a pattern based on a shading"
    },
    {
        "name": "ps_show",
        "url": "function.ps-show.php",
        "description": "Output text"
    },
    {
        "name": "ps_show_boxed",
        "url": "function.ps-show-boxed.php",
        "description": "Output text in a box"
    },
    {
        "name": "ps_show_xy2",
        "url": "function.ps-show-xy2.php",
        "description": "Output text at position"
    },
    {
        "name": "ps_string_geometry",
        "url": "function.ps-string-geometry.php",
        "description": "Gets geometry of a string"
    },
    {
        "name": "ps_symbol",
        "url": "function.ps-symbol.php",
        "description": "Output a glyph"
    },
    {
        "name": "ps_symbol_width",
        "url": "function.ps-symbol-width.php",
        "description": "Gets width of a glyph"
    },
    {
        "name": "putenv",
        "url": "function.putenv.php",
        "description": "Sets the value of an environment variable"
    },
    {
        "name": "QuickHashIntHash::add",
        "url": "quickhashinthash.add.php",
        "description": "This method adds a new entry to the hash"
    },
    {
        "name": "QuickHashIntHash::exists",
        "url": "quickhashinthash.exists.php",
        "description": "This method checks whether a key is part of the hash"
    },
    {
        "name": "QuickHashIntHash::getSize",
        "url": "quickhashinthash.getsize.php",
        "description": "Returns the number of elements in the hash"
    },
    {
        "name": "QuickHashIntHash::loadFromString",
        "url": "quickhashinthash.loadfromstring.php",
        "description": "This factory method creates a hash from a string"
    },
    {
        "name": "QuickHashIntHash::saveToString",
        "url": "quickhashinthash.savetostring.php",
        "description": "This method returns a serialized version of the hash"
    },
    {
        "name": "QuickHashIntHash::update",
        "url": "quickhashinthash.update.php",
        "description": "This method updates an entry in the hash with a new value"
    },
    {
        "name": "QuickHashIntSet::add",
        "url": "quickhashintset.add.php",
        "description": "This method adds a new entry to the set"
    },
    {
        "name": "QuickHashIntSet::exists",
        "url": "quickhashintset.exists.php",
        "description": "This method checks whether a key is part of the set"
    },
    {
        "name": "QuickHashIntSet::loadFromFile",
        "url": "quickhashintset.loadfromfile.php",
        "description": "This factory method creates a set from a file"
    },
    {
        "name": "QuickHashIntSet::saveToFile",
        "url": "quickhashintset.savetofile.php",
        "description": "This method stores an in-memory set to disk"
    },
    {
        "name": "QuickHashIntSet::__construct",
        "url": "quickhashintset.construct.php",
        "description": "Creates a new QuickHashIntSet object"
    },
    {
        "name": "QuickHashIntStringHash::delete",
        "url": "quickhashintstringhash.delete.php",
        "description": "This method deletes an entry from the hash"
    },
    {
        "name": "QuickHashIntStringHash::get",
        "url": "quickhashintstringhash.get.php",
        "description": "This method retrieves a value from the hash by its key"
    },
    {
        "name": "QuickHashIntStringHash::loadFromFile",
        "url": "quickhashintstringhash.loadfromfile.php",
        "description": "This factory method creates a hash from a file"
    },
    {
        "name": "QuickHashIntStringHash::saveToFile",
        "url": "quickhashintstringhash.savetofile.php",
        "description": "This method stores an in-memory hash to disk"
    },
    {
        "name": "QuickHashIntStringHash::set",
        "url": "quickhashintstringhash.set.php",
        "description": "This method updates an entry in the hash with a new value, or   adds a new one if the entry doesn't exist"
    },
    {
        "name": "QuickHashIntStringHash::update",
        "url": "quickhashintstringhash.update.php",
        "description": "This method updates an entry in the hash with a new value"
    },
    {
        "name": "QuickHashStringIntHash::add",
        "url": "quickhashstringinthash.add.php",
        "description": "This method adds a new entry to the hash"
    },
    {
        "name": "QuickHashStringIntHash::exists",
        "url": "quickhashstringinthash.exists.php",
        "description": "This method checks whether a key is part of the hash"
    },
    {
        "name": "QuickHashStringIntHash::getSize",
        "url": "quickhashstringinthash.getsize.php",
        "description": "Returns the number of elements in the hash"
    },
    {
        "name": "QuickHashStringIntHash::loadFromString",
        "url": "quickhashstringinthash.loadfromstring.php",
        "description": "This factory method creates a hash from a string"
    },
    {
        "name": "QuickHashStringIntHash::saveToString",
        "url": "quickhashstringinthash.savetostring.php",
        "description": "This method returns a serialized version of the hash"
    },
    {
        "name": "QuickHashStringIntHash::update",
        "url": "quickhashstringinthash.update.php",
        "description": "This method updates an entry in the hash with a new value"
    },
    {
        "name": "quoted_printable_decode",
        "url": "function.quoted-printable-decode.php",
        "description": "Convert a quoted-printable string to an 8 bit string"
    },
    {
        "name": "quotemeta",
        "url": "function.quotemeta.php",
        "description": "Quote meta characters"
    },
    {
        "name": "rad2deg",
        "url": "function.rad2deg.php",
        "description": "Converts the radian number to the equivalent number in degrees"
    },
    {
        "name": "radius_add_server",
        "url": "function.radius-add-server.php",
        "description": "Adds a server"
    },
    {
        "name": "radius_close",
        "url": "function.radius-close.php",
        "description": "Frees all ressources"
    },
    {
        "name": "radius_create_request",
        "url": "function.radius-create-request.php",
        "description": "Create accounting or authentication request"
    },
    {
        "name": "radius_cvt_int",
        "url": "function.radius-cvt-int.php",
        "description": "Converts raw data to integer"
    },
    {
        "name": "radius_demangle",
        "url": "function.radius-demangle.php",
        "description": "Demangles data"
    },
    {
        "name": "radius_get_attr",
        "url": "function.radius-get-attr.php",
        "description": "Extracts an attribute"
    },
    {
        "name": "radius_get_tagged_attr_tag",
        "url": "function.radius-get-tagged-attr-tag.php",
        "description": "Extracts the tag from a tagged attribute"
    },
    {
        "name": "radius_put_addr",
        "url": "function.radius-put-addr.php",
        "description": "Attaches an IP address attribute"
    },
    {
        "name": "radius_put_int",
        "url": "function.radius-put-int.php",
        "description": "Attaches an integer attribute"
    },
    {
        "name": "radius_put_vendor_addr",
        "url": "function.radius-put-vendor-addr.php",
        "description": "Attaches a vendor specific IP address attribute"
    },
    {
        "name": "radius_put_vendor_int",
        "url": "function.radius-put-vendor-int.php",
        "description": "Attaches a vendor specific integer attribute"
    },
    {
        "name": "radius_request_authenticator",
        "url": "function.radius-request-authenticator.php",
        "description": "Returns the request authenticator"
    },
    {
        "name": "radius_send_request",
        "url": "function.radius-send-request.php",
        "description": "Sends the request and waits for a reply"
    },
    {
        "name": "radius_strerror",
        "url": "function.radius-strerror.php",
        "description": "Returns an error message"
    },
    {
        "name": "Random\\Engine::generate",
        "url": "random-engine.generate.php",
        "description": "Generates randomness"
    },
    {
        "name": "Random\\Engine\\Mt19937::__construct",
        "url": "random-engine-mt19937.construct.php",
        "description": "Constructs a new Mt19937 engine"
    },
    {
        "name": "Random\\Engine\\Mt19937::__serialize",
        "url": "random-engine-mt19937.serialize.php",
        "description": "Serializes the Mt19937 object"
    },
    {
        "name": "Random\\Engine\\PcgOneseq128XslRr64::generate",
        "url": "random-engine-pcgoneseq128xslrr64.generate.php",
        "description": "Generate 64 bits of randomness"
    },
    {
        "name": "Random\\Engine\\PcgOneseq128XslRr64::__construct",
        "url": "random-engine-pcgoneseq128xslrr64.construct.php",
        "description": "Constructs a new PCG Oneseq 128 XSL RR 64 engine"
    },
    {
        "name": "Random\\Engine\\PcgOneseq128XslRr64::__serialize",
        "url": "random-engine-pcgoneseq128xslrr64.serialize.php",
        "description": "Serializes the PcgOneseq128XslRr64 object"
    },
    {
        "name": "Random\\Engine\\Secure::generate",
        "url": "random-engine-secure.generate.php",
        "description": "Generate cryptographically secure randomness"
    },
    {
        "name": "Random\\Engine\\Xoshiro256StarStar::jump",
        "url": "random-engine-xoshiro256starstar.jump.php",
        "description": "Efficiently move the engine ahead by 2^128 steps"
    },
    {
        "name": "Random\\Engine\\Xoshiro256StarStar::__construct",
        "url": "random-engine-xoshiro256starstar.construct.php",
        "description": "Constructs a new xoshiro256** engine"
    },
    {
        "name": "Random\\Engine\\Xoshiro256StarStar::__serialize",
        "url": "random-engine-xoshiro256starstar.serialize.php",
        "description": "Serializes the Xoshiro256StarStar object"
    },
    {
        "name": "Random\\Randomizer::getBytes",
        "url": "random-randomizer.getbytes.php",
        "description": "Get random bytes"
    },
    {
        "name": "Random\\Randomizer::getFloat",
        "url": "random-randomizer.getfloat.php",
        "description": "Get a uniformly selected float"
    },
    {
        "name": "Random\\Randomizer::nextFloat",
        "url": "random-randomizer.nextfloat.php",
        "description": "Get a float from the right-open interval [0.0, 1.0)"
    },
    {
        "name": "Random\\Randomizer::pickArrayKeys",
        "url": "random-randomizer.pickarraykeys.php",
        "description": "Select random array keys"
    },
    {
        "name": "Random\\Randomizer::shuffleBytes",
        "url": "random-randomizer.shufflebytes.php",
        "description": "Get a byte-wise permutation of a string"
    },
    {
        "name": "Random\\Randomizer::__serialize",
        "url": "random-randomizer.serialize.php",
        "description": "Serializes the Randomizer object"
    },
    {
        "name": "random_bytes",
        "url": "function.random-bytes.php",
        "description": "Get cryptographically secure random bytes"
    },
    {
        "name": "range",
        "url": "function.range.php",
        "description": "Create an array containing a range of elements"
    },
    {
        "name": "RarArchive::close",
        "url": "rararchive.close.php",
        "description": "Close RAR archive and free all resources"
    },
    {
        "name": "RarArchive::getEntries",
        "url": "rararchive.getentries.php",
        "description": "Get full list of entries from the RAR archive"
    },
    {
        "name": "RarArchive::isBroken",
        "url": "rararchive.isbroken.php",
        "description": "Test whether an archive is broken (incomplete)"
    },
    {
        "name": "RarArchive::open",
        "url": "rararchive.open.php",
        "description": "Open RAR archive"
    },
    {
        "name": "RarArchive::__toString",
        "url": "rararchive.tostring.php",
        "description": "Get text representation"
    },
    {
        "name": "RarEntry::getAttr",
        "url": "rarentry.getattr.php",
        "description": "Get attributes of the entry"
    },
    {
        "name": "RarEntry::getFileTime",
        "url": "rarentry.getfiletime.php",
        "description": "Get entry last modification time"
    },
    {
        "name": "RarEntry::getMethod",
        "url": "rarentry.getmethod.php",
        "description": "Get pack method of the entry"
    },
    {
        "name": "RarEntry::getPackedSize",
        "url": "rarentry.getpackedsize.php",
        "description": "Get packed size of the entry"
    },
    {
        "name": "RarEntry::getUnpackedSize",
        "url": "rarentry.getunpackedsize.php",
        "description": "Get unpacked size of the entry"
    },
    {
        "name": "RarEntry::isDirectory",
        "url": "rarentry.isdirectory.php",
        "description": "Test whether an entry represents a directory"
    },
    {
        "name": "RarEntry::__toString",
        "url": "rarentry.tostring.php",
        "description": "Get text representation of entry"
    },
    {
        "name": "RarException::setUsingExceptions",
        "url": "rarexception.setusingexceptions.php",
        "description": "Activate and deactivate error handling with exceptions"
    },
    {
        "name": "rawurldecode",
        "url": "function.rawurldecode.php",
        "description": "Decode URL-encoded strings"
    },
    {
        "name": "readdir",
        "url": "function.readdir.php",
        "description": "Read entry from directory handle"
    },
    {
        "name": "readgzfile",
        "url": "function.readgzfile.php",
        "description": "Output a gz-file"
    },
    {
        "name": "readline_add_history",
        "url": "function.readline-add-history.php",
        "description": "Adds a line to the history"
    },
    {
        "name": "readline_callback_handler_remove",
        "url": "function.readline-callback-handler-remove.php",
        "description": "Removes a previously installed callback handler and restores terminal settings"
    },
    {
        "name": "readline_clear_history",
        "url": "function.readline-clear-history.php",
        "description": "Clears the history"
    },
    {
        "name": "readline_info",
        "url": "function.readline-info.php",
        "description": "Gets\/sets various internal readline variables"
    },
    {
        "name": "readline_on_new_line",
        "url": "function.readline-on-new-line.php",
        "description": "Inform readline that the cursor has moved to a new line"
    },
    {
        "name": "readline_redisplay",
        "url": "function.readline-redisplay.php",
        "description": "Redraws the display"
    },
    {
        "name": "readlink",
        "url": "function.readlink.php",
        "description": "Returns the target of a symbolic link"
    },
    {
        "name": "realpath",
        "url": "function.realpath.php",
        "description": "Returns canonicalized absolute pathname"
    },
    {
        "name": "realpath_cache_size",
        "url": "function.realpath-cache-size.php",
        "description": "Get realpath cache size"
    },
    {
        "name": "recode_file",
        "url": "function.recode-file.php",
        "description": "Recode from file to file according to recode request"
    },
    {
        "name": "RecursiveArrayIterator::getChildren",
        "url": "recursivearrayiterator.getchildren.php",
        "description": "Returns an iterator for the current entry if it is an array or an object"
    },
    {
        "name": "RecursiveCachingIterator::getChildren",
        "url": "recursivecachingiterator.getchildren.php",
        "description": "Return the inner iterator's children as a RecursiveCachingIterator"
    },
    {
        "name": "RecursiveCachingIterator::__construct",
        "url": "recursivecachingiterator.construct.php",
        "description": "Construct"
    },
    {
        "name": "RecursiveCallbackFilterIterator::hasChildren",
        "url": "recursivecallbackfilteriterator.haschildren.php",
        "description": "Check whether the inner iterator's current element has children"
    },
    {
        "name": "RecursiveDirectoryIterator::getChildren",
        "url": "recursivedirectoryiterator.getchildren.php",
        "description": "Returns an iterator for the current entry if it is a directory"
    },
    {
        "name": "RecursiveDirectoryIterator::getSubPathname",
        "url": "recursivedirectoryiterator.getsubpathname.php",
        "description": "Get sub path and name"
    },
    {
        "name": "RecursiveDirectoryIterator::key",
        "url": "recursivedirectoryiterator.key.php",
        "description": "Return path and filename of current dir entry"
    },
    {
        "name": "RecursiveDirectoryIterator::rewind",
        "url": "recursivedirectoryiterator.rewind.php",
        "description": "Rewind dir back to the start"
    },
    {
        "name": "RecursiveFilterIterator::getChildren",
        "url": "recursivefilteriterator.getchildren.php",
        "description": "Return the inner iterator's children contained in a RecursiveFilterIterator"
    },
    {
        "name": "RecursiveFilterIterator::__construct",
        "url": "recursivefilteriterator.construct.php",
        "description": "Create a RecursiveFilterIterator from a RecursiveIterator"
    },
    {
        "name": "RecursiveIterator::hasChildren",
        "url": "recursiveiterator.haschildren.php",
        "description": "Returns if an iterator can be created for the current entry"
    },
    {
        "name": "RecursiveIteratorIterator::beginIteration",
        "url": "recursiveiteratoriterator.beginiteration.php",
        "description": "Begin Iteration"
    },
    {
        "name": "RecursiveIteratorIterator::callHasChildren",
        "url": "recursiveiteratoriterator.callhaschildren.php",
        "description": "Has children"
    },
    {
        "name": "RecursiveIteratorIterator::endChildren",
        "url": "recursiveiteratoriterator.endchildren.php",
        "description": "End children"
    },
    {
        "name": "RecursiveIteratorIterator::getDepth",
        "url": "recursiveiteratoriterator.getdepth.php",
        "description": "Get the current depth of the recursive iteration"
    },
    {
        "name": "RecursiveIteratorIterator::getMaxDepth",
        "url": "recursiveiteratoriterator.getmaxdepth.php",
        "description": "Get max depth"
    },
    {
        "name": "RecursiveIteratorIterator::key",
        "url": "recursiveiteratoriterator.key.php",
        "description": "Access the current key"
    },
    {
        "name": "RecursiveIteratorIterator::nextElement",
        "url": "recursiveiteratoriterator.nextelement.php",
        "description": "Next element"
    },
    {
        "name": "RecursiveIteratorIterator::setMaxDepth",
        "url": "recursiveiteratoriterator.setmaxdepth.php",
        "description": "Set max depth"
    },
    {
        "name": "RecursiveIteratorIterator::__construct",
        "url": "recursiveiteratoriterator.construct.php",
        "description": "Construct a RecursiveIteratorIterator"
    },
    {
        "name": "RecursiveRegexIterator::hasChildren",
        "url": "recursiveregexiterator.haschildren.php",
        "description": "Returns whether an iterator can be obtained for the current entry"
    },
    {
        "name": "RecursiveTreeIterator::beginChildren",
        "url": "recursivetreeiterator.beginchildren.php",
        "description": "Begin children"
    },
    {
        "name": "RecursiveTreeIterator::callGetChildren",
        "url": "recursivetreeiterator.callgetchildren.php",
        "description": "Get children"
    },
    {
        "name": "RecursiveTreeIterator::current",
        "url": "recursivetreeiterator.current.php",
        "description": "Get current element"
    },
    {
        "name": "RecursiveTreeIterator::endIteration",
        "url": "recursivetreeiterator.enditeration.php",
        "description": "End iteration"
    },
    {
        "name": "RecursiveTreeIterator::getPostfix",
        "url": "recursivetreeiterator.getpostfix.php",
        "description": "Get the postfix"
    },
    {
        "name": "RecursiveTreeIterator::key",
        "url": "recursivetreeiterator.key.php",
        "description": "Get the key of the current element"
    },
    {
        "name": "RecursiveTreeIterator::nextElement",
        "url": "recursivetreeiterator.nextelement.php",
        "description": "Next element"
    },
    {
        "name": "RecursiveTreeIterator::setPostfix",
        "url": "recursivetreeiterator.setpostfix.php",
        "description": "Set postfix"
    },
    {
        "name": "RecursiveTreeIterator::valid",
        "url": "recursivetreeiterator.valid.php",
        "description": "Check validity"
    },
    {
        "name": "Reflection::export",
        "url": "reflection.export.php",
        "description": "Exports"
    },
    {
        "name": "ReflectionAttribute::getArguments",
        "url": "reflectionattribute.getarguments.php",
        "description": "Gets arguments passed to attribute"
    },
    {
        "name": "ReflectionAttribute::getTarget",
        "url": "reflectionattribute.gettarget.php",
        "description": "Returns the target of the attribute as bitmask"
    },
    {
        "name": "ReflectionAttribute::newInstance",
        "url": "reflectionattribute.newinstance.php",
        "description": "Instantiates the attribute class represented by this ReflectionAttribute class and arguments"
    },
    {
        "name": "ReflectionClass::export",
        "url": "reflectionclass.export.php",
        "description": "Exports a class"
    },
    {
        "name": "ReflectionClass::getConstant",
        "url": "reflectionclass.getconstant.php",
        "description": "Gets defined constant"
    },
    {
        "name": "ReflectionClass::getConstructor",
        "url": "reflectionclass.getconstructor.php",
        "description": "Gets the constructor of the class"
    },
    {
        "name": "ReflectionClass::getDocComment",
        "url": "reflectionclass.getdoccomment.php",
        "description": "Gets doc comments"
    },
    {
        "name": "ReflectionClass::getExtension",
        "url": "reflectionclass.getextension.php",
        "description": "Gets a ReflectionExtension object for the extension which defined the class"
    },
    {
        "name": "ReflectionClass::getFileName",
        "url": "reflectionclass.getfilename.php",
        "description": "Gets the filename of the file in which the class has been defined"
    },
    {
        "name": "ReflectionClass::getInterfaces",
        "url": "reflectionclass.getinterfaces.php",
        "description": "Gets the interfaces"
    },
    {
        "name": "ReflectionClass::getMethods",
        "url": "reflectionclass.getmethods.php",
        "description": "Gets an array of methods"
    },
    {
        "name": "ReflectionClass::getName",
        "url": "reflectionclass.getname.php",
        "description": "Gets class name"
    },
    {
        "name": "ReflectionClass::getParentClass",
        "url": "reflectionclass.getparentclass.php",
        "description": "Gets parent class"
    },
    {
        "name": "ReflectionClass::getProperty",
        "url": "reflectionclass.getproperty.php",
        "description": "Gets a ReflectionProperty for a class's property"
    },
    {
        "name": "ReflectionClass::getReflectionConstants",
        "url": "reflectionclass.getreflectionconstants.php",
        "description": "Gets class constants"
    },
    {
        "name": "ReflectionClass::getStartLine",
        "url": "reflectionclass.getstartline.php",
        "description": "Gets starting line number"
    },
    {
        "name": "ReflectionClass::getStaticPropertyValue",
        "url": "reflectionclass.getstaticpropertyvalue.php",
        "description": "Gets static property value"
    },
    {
        "name": "ReflectionClass::getTraitNames",
        "url": "reflectionclass.gettraitnames.php",
        "description": "Returns an array of names of traits used by this class"
    },
    {
        "name": "ReflectionClass::hasConstant",
        "url": "reflectionclass.hasconstant.php",
        "description": "Checks if constant is defined"
    },
    {
        "name": "ReflectionClass::hasProperty",
        "url": "reflectionclass.hasproperty.php",
        "description": "Checks if property is defined"
    },
    {
        "name": "ReflectionClass::inNamespace",
        "url": "reflectionclass.innamespace.php",
        "description": "Checks if in namespace"
    },
    {
        "name": "ReflectionClass::isAnonymous",
        "url": "reflectionclass.isanonymous.php",
        "description": "Checks if class is anonymous"
    },
    {
        "name": "ReflectionClass::isEnum",
        "url": "reflectionclass.isenum.php",
        "description": "Returns whether this is an enum"
    },
    {
        "name": "ReflectionClass::isInstance",
        "url": "reflectionclass.isinstance.php",
        "description": "Checks class for instance"
    },
    {
        "name": "ReflectionClass::isInterface",
        "url": "reflectionclass.isinterface.php",
        "description": "Checks if the class is an interface"
    },
    {
        "name": "ReflectionClass::isIterable",
        "url": "reflectionclass.isiterable.php",
        "description": "Check whether this class is iterable"
    },
    {
        "name": "ReflectionClass::isReadOnly",
        "url": "reflectionclass.isreadonly.php",
        "description": "Checks if class is readonly"
    },
    {
        "name": "ReflectionClass::isTrait",
        "url": "reflectionclass.istrait.php",
        "description": "Returns whether this is a trait"
    },
    {
        "name": "ReflectionClass::newInstance",
        "url": "reflectionclass.newinstance.php",
        "description": "Creates a new class instance from given arguments"
    },
    {
        "name": "ReflectionClass::newInstanceWithoutConstructor",
        "url": "reflectionclass.newinstancewithoutconstructor.php",
        "description": "Creates a new class instance without invoking the constructor"
    },
    {
        "name": "ReflectionClass::__construct",
        "url": "reflectionclass.construct.php",
        "description": "Constructs a ReflectionClass"
    },
    {
        "name": "ReflectionClassConstant::export",
        "url": "reflectionclassconstant.export.php",
        "description": "Export"
    },
    {
        "name": "ReflectionClassConstant::getDeclaringClass",
        "url": "reflectionclassconstant.getdeclaringclass.php",
        "description": "Gets declaring class"
    },
    {
        "name": "ReflectionClassConstant::getModifiers",
        "url": "reflectionclassconstant.getmodifiers.php",
        "description": "Gets the class constant modifiers"
    },
    {
        "name": "ReflectionClassConstant::getValue",
        "url": "reflectionclassconstant.getvalue.php",
        "description": "Gets value"
    },
    {
        "name": "ReflectionClassConstant::isFinal",
        "url": "reflectionclassconstant.isfinal.php",
        "description": "Checks if class constant is final"
    },
    {
        "name": "ReflectionClassConstant::isProtected",
        "url": "reflectionclassconstant.isprotected.php",
        "description": "Checks if class constant is protected"
    },
    {
        "name": "ReflectionClassConstant::__construct",
        "url": "reflectionclassconstant.construct.php",
        "description": "Constructs a ReflectionClassConstant"
    },
    {
        "name": "ReflectionEnum::getBackingType",
        "url": "reflectionenum.getbackingtype.php",
        "description": "Gets the backing type of an Enum, if any"
    },
    {
        "name": "ReflectionEnum::getCases",
        "url": "reflectionenum.getcases.php",
        "description": "Returns a list of all cases on an Enum"
    },
    {
        "name": "ReflectionEnum::isBacked",
        "url": "reflectionenum.isbacked.php",
        "description": "Determines if an Enum is a Backed Enum"
    },
    {
        "name": "ReflectionEnumBackedCase::getBackingValue",
        "url": "reflectionenumbackedcase.getbackingvalue.php",
        "description": "Gets the scalar value backing this Enum case"
    },
    {
        "name": "ReflectionEnumUnitCase::getEnum",
        "url": "reflectionenumunitcase.getenum.php",
        "description": "Gets the reflection of the enum of this case"
    },
    {
        "name": "ReflectionEnumUnitCase::__construct",
        "url": "reflectionenumunitcase.construct.php",
        "description": "Instantiates a ReflectionEnumUnitCase object"
    },
    {
        "name": "ReflectionExtension::getClasses",
        "url": "reflectionextension.getclasses.php",
        "description": "Gets classes"
    },
    {
        "name": "ReflectionExtension::getConstants",
        "url": "reflectionextension.getconstants.php",
        "description": "Gets constants"
    },
    {
        "name": "ReflectionExtension::getFunctions",
        "url": "reflectionextension.getfunctions.php",
        "description": "Gets extension functions"
    },
    {
        "name": "ReflectionExtension::getName",
        "url": "reflectionextension.getname.php",
        "description": "Gets extension name"
    },
    {
        "name": "ReflectionExtension::info",
        "url": "reflectionextension.info.php",
        "description": "Print extension info"
    },
    {
        "name": "ReflectionExtension::isTemporary",
        "url": "reflectionextension.istemporary.php",
        "description": "Returns whether this extension is temporary"
    },
    {
        "name": "ReflectionExtension::__construct",
        "url": "reflectionextension.construct.php",
        "description": "Constructs a ReflectionExtension"
    },
    {
        "name": "ReflectionFiber::getCallable",
        "url": "reflectionfiber.getcallable.php",
        "description": "Gets the callable used to create the Fiber"
    },
    {
        "name": "ReflectionFiber::getExecutingLine",
        "url": "reflectionfiber.getexecutingline.php",
        "description": "Get the line number of the current execution point"
    },
    {
        "name": "ReflectionFiber::getTrace",
        "url": "reflectionfiber.gettrace.php",
        "description": "Get the backtrace of the current execution point"
    },
    {
        "name": "ReflectionFunction::export",
        "url": "reflectionfunction.export.php",
        "description": "Exports function"
    },
    {
        "name": "ReflectionFunction::invoke",
        "url": "reflectionfunction.invoke.php",
        "description": "Invokes function"
    },
    {
        "name": "ReflectionFunction::isAnonymous",
        "url": "reflectionfunction.isanonymous.php",
        "description": "Checks if a function is anonymous"
    },
    {
        "name": "ReflectionFunction::__construct",
        "url": "reflectionfunction.construct.php",
        "description": "Constructs a ReflectionFunction object"
    },
    {
        "name": "ReflectionFunctionAbstract::getAttributes",
        "url": "reflectionfunctionabstract.getattributes.php",
        "description": "Gets Attributes"
    },
    {
        "name": "ReflectionFunctionAbstract::getClosureThis",
        "url": "reflectionfunctionabstract.getclosurethis.php",
        "description": "Returns this pointer bound to closure"
    },
    {
        "name": "ReflectionFunctionAbstract::getDocComment",
        "url": "reflectionfunctionabstract.getdoccomment.php",
        "description": "Gets doc comment"
    },
    {
        "name": "ReflectionFunctionAbstract::getExtension",
        "url": "reflectionfunctionabstract.getextension.php",
        "description": "Gets extension info"
    },
    {
        "name": "ReflectionFunctionAbstract::getFileName",
        "url": "reflectionfunctionabstract.getfilename.php",
        "description": "Gets file name"
    },
    {
        "name": "ReflectionFunctionAbstract::getNamespaceName",
        "url": "reflectionfunctionabstract.getnamespacename.php",
        "description": "Gets namespace name"
    },
    {
        "name": "ReflectionFunctionAbstract::getNumberOfRequiredParameters",
        "url": "reflectionfunctionabstract.getnumberofrequiredparameters.php",
        "description": "Gets number of required parameters"
    },
    {
        "name": "ReflectionFunctionAbstract::getReturnType",
        "url": "reflectionfunctionabstract.getreturntype.php",
        "description": "Gets the specified return type of a function"
    },
    {
        "name": "ReflectionFunctionAbstract::getStartLine",
        "url": "reflectionfunctionabstract.getstartline.php",
        "description": "Gets starting line number"
    },
    {
        "name": "ReflectionFunctionAbstract::getTentativeReturnType",
        "url": "reflectionfunctionabstract.gettentativereturntype.php",
        "description": "Returns the tentative return type associated with the function"
    },
    {
        "name": "ReflectionFunctionAbstract::hasTentativeReturnType",
        "url": "reflectionfunctionabstract.hastentativereturntype.php",
        "description": "Returns whether the function has a tentative return type"
    },
    {
        "name": "ReflectionFunctionAbstract::isClosure",
        "url": "reflectionfunctionabstract.isclosure.php",
        "description": "Checks if closure"
    },
    {
        "name": "ReflectionFunctionAbstract::isGenerator",
        "url": "reflectionfunctionabstract.isgenerator.php",
        "description": "Returns whether this function is a generator"
    },
    {
        "name": "ReflectionFunctionAbstract::isStatic",
        "url": "reflectiofunctionabstract.isstatic.php",
        "description": "Checks if the function is static"
    },
    {
        "name": "ReflectionFunctionAbstract::isVariadic",
        "url": "reflectionfunctionabstract.isvariadic.php",
        "description": "Checks if the function is variadic"
    },
    {
        "name": "ReflectionFunctionAbstract::__clone",
        "url": "reflectionfunctionabstract.clone.php",
        "description": "Clones function"
    },
    {
        "name": "ReflectionGenerator::getExecutingFile",
        "url": "reflectiongenerator.getexecutingfile.php",
        "description": "Gets the file name of the currently executing generator"
    },
    {
        "name": "ReflectionGenerator::getExecutingLine",
        "url": "reflectiongenerator.getexecutingline.php",
        "description": "Gets the currently executing line of the generator"
    },
    {
        "name": "ReflectionGenerator::getThis",
        "url": "reflectiongenerator.getthis.php",
        "description": "Gets the $this value of the generator"
    },
    {
        "name": "ReflectionGenerator::__construct",
        "url": "reflectiongenerator.construct.php",
        "description": "Constructs a ReflectionGenerator object"
    },
    {
        "name": "ReflectionMethod::createFromMethodName",
        "url": "reflectionmethod.createfrommethodname.php",
        "description": "Creates a new ReflectionMethod"
    },
    {
        "name": "ReflectionMethod::getClosure",
        "url": "reflectionmethod.getclosure.php",
        "description": "Returns a dynamically created closure for the method"
    },
    {
        "name": "ReflectionMethod::getModifiers",
        "url": "reflectionmethod.getmodifiers.php",
        "description": "Gets the method modifiers"
    },
    {
        "name": "ReflectionMethod::hasPrototype",
        "url": "reflectionmethod.hasprototype.php",
        "description": "Returns whether a method has a prototype"
    },
    {
        "name": "ReflectionMethod::invokeArgs",
        "url": "reflectionmethod.invokeargs.php",
        "description": "Invoke args"
    },
    {
        "name": "ReflectionMethod::isConstructor",
        "url": "reflectionmethod.isconstructor.php",
        "description": "Checks if method is a constructor"
    },
    {
        "name": "ReflectionMethod::isFinal",
        "url": "reflectionmethod.isfinal.php",
        "description": "Checks if method is final"
    },
    {
        "name": "ReflectionMethod::isProtected",
        "url": "reflectionmethod.isprotected.php",
        "description": "Checks if method is protected"
    },
    {
        "name": "ReflectionMethod::setAccessible",
        "url": "reflectionmethod.setaccessible.php",
        "description": "Set method accessibility"
    },
    {
        "name": "ReflectionMethod::__toString",
        "url": "reflectionmethod.tostring.php",
        "description": "Returns the string representation of the Reflection method object"
    },
    {
        "name": "ReflectionNamedType::isBuiltin",
        "url": "reflectionnamedtype.isbuiltin.php",
        "description": "Checks if it is a built-in type"
    },
    {
        "name": "ReflectionObject::__construct",
        "url": "reflectionobject.construct.php",
        "description": "Constructs a ReflectionObject"
    },
    {
        "name": "ReflectionParameter::canBePassedByValue",
        "url": "reflectionparameter.canbepassedbyvalue.php",
        "description": "Returns whether this parameter can be passed by value"
    },
    {
        "name": "ReflectionParameter::getAttributes",
        "url": "reflectionparameter.getattributes.php",
        "description": "Gets Attributes"
    },
    {
        "name": "ReflectionParameter::getDeclaringClass",
        "url": "reflectionparameter.getdeclaringclass.php",
        "description": "Gets declaring class"
    },
    {
        "name": "ReflectionParameter::getDefaultValue",
        "url": "reflectionparameter.getdefaultvalue.php",
        "description": "Gets default parameter value"
    },
    {
        "name": "ReflectionParameter::getName",
        "url": "reflectionparameter.getname.php",
        "description": "Gets parameter name"
    },
    {
        "name": "ReflectionParameter::getType",
        "url": "reflectionparameter.gettype.php",
        "description": "Gets a parameter's type"
    },
    {
        "name": "ReflectionParameter::isArray",
        "url": "reflectionparameter.isarray.php",
        "description": "Checks if parameter expects an array"
    },
    {
        "name": "ReflectionParameter::isDefaultValueAvailable",
        "url": "reflectionparameter.isdefaultvalueavailable.php",
        "description": "Checks if a default value is available"
    },
    {
        "name": "ReflectionParameter::isOptional",
        "url": "reflectionparameter.isoptional.php",
        "description": "Checks if optional"
    },
    {
        "name": "ReflectionParameter::isVariadic",
        "url": "reflectionparameter.isvariadic.php",
        "description": "Checks if the parameter is variadic"
    },
    {
        "name": "ReflectionParameter::__construct",
        "url": "reflectionparameter.construct.php",
        "description": "Construct"
    },
    {
        "name": "ReflectionProperty::export",
        "url": "reflectionproperty.export.php",
        "description": "Export"
    },
    {
        "name": "ReflectionProperty::getDeclaringClass",
        "url": "reflectionproperty.getdeclaringclass.php",
        "description": "Gets declaring class"
    },
    {
        "name": "ReflectionProperty::getDocComment",
        "url": "reflectionproperty.getdoccomment.php",
        "description": "Gets the property doc comment"
    },
    {
        "name": "ReflectionProperty::getName",
        "url": "reflectionproperty.getname.php",
        "description": "Gets property name"
    },
    {
        "name": "ReflectionProperty::getValue",
        "url": "reflectionproperty.getvalue.php",
        "description": "Gets value"
    },
    {
        "name": "ReflectionProperty::hasType",
        "url": "reflectionproperty.hastype.php",
        "description": "Checks if property has a type"
    },
    {
        "name": "ReflectionProperty::isInitialized",
        "url": "reflectionproperty.isinitialized.php",
        "description": "Checks whether a property is initialized"
    },
    {
        "name": "ReflectionProperty::isPromoted",
        "url": "reflectionproperty.ispromoted.php",
        "description": "Checks if property is promoted"
    },
    {
        "name": "ReflectionProperty::isPublic",
        "url": "reflectionproperty.ispublic.php",
        "description": "Checks if property is public"
    },
    {
        "name": "ReflectionProperty::isStatic",
        "url": "reflectionproperty.isstatic.php",
        "description": "Checks if property is static"
    },
    {
        "name": "ReflectionProperty::setValue",
        "url": "reflectionproperty.setvalue.php",
        "description": "Set property value"
    },
    {
        "name": "ReflectionProperty::__construct",
        "url": "reflectionproperty.construct.php",
        "description": "Construct a ReflectionProperty object"
    },
    {
        "name": "ReflectionReference::fromArrayElement",
        "url": "reflectionreference.fromarrayelement.php",
        "description": "Create a ReflectionReference from an array element"
    },
    {
        "name": "ReflectionReference::__construct",
        "url": "reflectionreference.construct.php",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "name": "ReflectionType::__toString",
        "url": "reflectiontype.tostring.php",
        "description": "To string"
    },
    {
        "name": "ReflectionZendExtension::export",
        "url": "reflectionzendextension.export.php",
        "description": "Export"
    },
    {
        "name": "ReflectionZendExtension::getCopyright",
        "url": "reflectionzendextension.getcopyright.php",
        "description": "Gets copyright"
    },
    {
        "name": "ReflectionZendExtension::getURL",
        "url": "reflectionzendextension.geturl.php",
        "description": "Gets URL"
    },
    {
        "name": "ReflectionZendExtension::__clone",
        "url": "reflectionzendextension.clone.php",
        "description": "Clone handler"
    },
    {
        "name": "ReflectionZendExtension::__toString",
        "url": "reflectionzendextension.tostring.php",
        "description": "To string handler"
    },
    {
        "name": "RegexIterator::accept",
        "url": "regexiterator.accept.php",
        "description": "Get accept status"
    },
    {
        "name": "RegexIterator::getMode",
        "url": "regexiterator.getmode.php",
        "description": "Returns operation mode"
    },
    {
        "name": "RegexIterator::getRegex",
        "url": "regexiterator.getregex.php",
        "description": "Returns current regular expression"
    },
    {
        "name": "RegexIterator::setMode",
        "url": "regexiterator.setmode.php",
        "description": "Sets the operation mode"
    },
    {
        "name": "RegexIterator::__construct",
        "url": "regexiterator.construct.php",
        "description": "Create a new RegexIterator"
    },
    {
        "name": "register_tick_function",
        "url": "function.register-tick-function.php",
        "description": "Register a function for execution on each tick"
    },
    {
        "name": "reset",
        "url": "function.reset.php",
        "description": "Set the internal pointer of an array to its first element"
    },
    {
        "name": "ResourceBundle::create",
        "url": "resourcebundle.create.php",
        "description": "Create a resource bundle"
    },
    {
        "name": "ResourceBundle::getErrorCode",
        "url": "resourcebundle.geterrorcode.php",
        "description": "Get bundle's last error code"
    },
    {
        "name": "ResourceBundle::getLocales",
        "url": "resourcebundle.locales.php",
        "description": "Get supported locales"
    },
    {
        "name": "restore_exception_handler",
        "url": "function.restore-exception-handler.php",
        "description": "Restores the previously defined exception handler function"
    },
    {
        "name": "Result::getAffectedItemsCount",
        "url": "mysql-xdevapi-result.getaffecteditemscount.php",
        "description": "Get affected row count"
    },
    {
        "name": "Result::getGeneratedIds",
        "url": "mysql-xdevapi-result.getgeneratedids.php",
        "description": "Get generated ids"
    },
    {
        "name": "Result::getWarningsCount",
        "url": "mysql-xdevapi-result.getwarningscount.php",
        "description": "Get warning count from last operation"
    },
    {
        "name": "ReturnTypeWillChange::__construct",
        "url": "returntypewillchange.construct.php",
        "description": "Construct a new ReturnTypeWillChange attribute instance"
    },
    {
        "name": "rewinddir",
        "url": "function.rewinddir.php",
        "description": "Rewind directory handle"
    },
    {
        "name": "rnp_backend_string",
        "url": "function.rnp-backend-string.php",
        "description": "Return cryptographic backend library name"
    },
    {
        "name": "rnp_decrypt",
        "url": "function.rnp-decrypt.php",
        "description": "Decrypt PGP message"
    },
    {
        "name": "rnp_dump_packets_to_json",
        "url": "function.rnp-dump-packets-to-json.php",
        "description": "Dump OpenPGP packets stream information to the JSON string"
    },
    {
        "name": "rnp_ffi_destroy",
        "url": "function.rnp-ffi-destroy.php",
        "description": "Destroy the top-level object used for interacting with the library"
    },
    {
        "name": "rnp_import_keys",
        "url": "function.rnp-import-keys.php",
        "description": "Import keys from PHP string to the keyring and receive JSON describing new\/updated keys"
    },
    {
        "name": "rnp_key_export",
        "url": "function.rnp-key-export.php",
        "description": "Export a key"
    },
    {
        "name": "rnp_key_export_revocation",
        "url": "function.rnp-key-export-revocation.php",
        "description": "Generate and export primary key revocation signature"
    },
    {
        "name": "rnp_key_remove",
        "url": "function.rnp-key-remove.php",
        "description": "Remove a key from keyring(s)"
    },
    {
        "name": "rnp_list_keys",
        "url": "function.rnp-list-keys.php",
        "description": "Enumerate all keys present in a keyring by specified identifer type"
    },
    {
        "name": "rnp_load_keys_from_path",
        "url": "function.rnp-load-keys-from-path.php",
        "description": "Load keys from specified path"
    },
    {
        "name": "rnp_op_encrypt",
        "url": "function.rnp-op-encrypt.php",
        "description": "Encrypt message"
    },
    {
        "name": "rnp_op_sign",
        "url": "function.rnp-op-sign.php",
        "description": "Perform signing operation on a binary data, return embedded signature(s)"
    },
    {
        "name": "rnp_op_sign_detached",
        "url": "function.rnp-op-sign-detached.php",
        "description": "Perform signing operation, return detached signature(s)"
    },
    {
        "name": "rnp_op_verify_detached",
        "url": "function.rnp-op-verify-detached.php",
        "description": "Verify detached signatures"
    },
    {
        "name": "rnp_save_keys_to_path",
        "url": "function.rnp-save-keys-to-path.php",
        "description": "Save keys to specified path"
    },
    {
        "name": "rnp_version_string",
        "url": "function.rnp-version-string.php",
        "description": "RNP library version"
    },
    {
        "name": "round",
        "url": "function.round.php",
        "description": "Rounds a float"
    },
    {
        "name": "RowResult::fetchOne",
        "url": "mysql-xdevapi-rowresult.fetchone.php",
        "description": "Get row from result"
    },
    {
        "name": "RowResult::getColumns",
        "url": "mysql-xdevapi-rowresult.getcolumns.php",
        "description": "Get column metadata"
    },
    {
        "name": "RowResult::getWarnings",
        "url": "mysql-xdevapi-rowresult.getwarnings.php",
        "description": "Get warnings from last operation"
    },
    {
        "name": "RowResult::__construct",
        "url": "mysql-xdevapi-rowresult.construct.php",
        "description": "RowResult constructor"
    },
    {
        "name": "rpmdbinfo",
        "url": "function.rpmdbinfo.php",
        "description": "Get information from installed RPM"
    },
    {
        "name": "rpmgetsymlink",
        "url": "function.rpmgetsymlink.php",
        "description": "Get target of a symlink"
    },
    {
        "name": "rpmvercmp",
        "url": "function.rpmvercmp.php",
        "description": "RPM version comparison"
    },
    {
        "name": "RRDCreator::addDataSource",
        "url": "rrdcreator.adddatasource.php",
        "description": "Adds data source definition for RRD database"
    },
    {
        "name": "RRDCreator::__construct",
        "url": "rrdcreator.construct.php",
        "description": "Creates new RRDCreator instance"
    },
    {
        "name": "RRDGraph::save",
        "url": "rrdgraph.save.php",
        "description": "Saves the result of query into image"
    },
    {
        "name": "RRDGraph::setOptions",
        "url": "rrdgraph.setoptions.php",
        "description": "Sets the options for rrd graph export"
    },
    {
        "name": "RRDUpdater::update",
        "url": "rrdupdater.update.php",
        "description": "Update the RRD database file"
    },
    {
        "name": "rrd_create",
        "url": "function.rrd-create.php",
        "description": "Creates rrd database file"
    },
    {
        "name": "rrd_fetch",
        "url": "function.rrd-fetch.php",
        "description": "Fetch the data for graph as array"
    },
    {
        "name": "rrd_graph",
        "url": "function.rrd-graph.php",
        "description": "Creates image from a data"
    },
    {
        "name": "rrd_last",
        "url": "function.rrd-last.php",
        "description": "Gets unix timestamp of the last sample"
    },
    {
        "name": "rrd_restore",
        "url": "function.rrd-restore.php",
        "description": "Restores the RRD file from XML dump"
    },
    {
        "name": "rrd_update",
        "url": "function.rrd-update.php",
        "description": "Updates the RRD database"
    },
    {
        "name": "rrd_xport",
        "url": "function.rrd-xport.php",
        "description": "Exports the information about RRD database"
    },
    {
        "name": "rtrim",
        "url": "function.rtrim.php",
        "description": "Strip whitespace (or other characters) from the end of a string"
    },
    {
        "name": "runkit7_constant_redefine",
        "url": "function.runkit7-constant-redefine.php",
        "description": "Redefine an already defined constant"
    },
    {
        "name": "runkit7_function_add",
        "url": "function.runkit7-function-add.php",
        "description": "Add a new function, similar to create_function"
    },
    {
        "name": "runkit7_function_redefine",
        "url": "function.runkit7-function-redefine.php",
        "description": "Replace a function definition with a new implementation"
    },
    {
        "name": "runkit7_function_rename",
        "url": "function.runkit7-function-rename.php",
        "description": "Change a function's name"
    },
    {
        "name": "runkit7_method_add",
        "url": "function.runkit7-method-add.php",
        "description": "Dynamically adds a new method to a given class"
    },
    {
        "name": "runkit7_method_redefine",
        "url": "function.runkit7-method-redefine.php",
        "description": "Dynamically changes the code of the given method"
    },
    {
        "name": "runkit7_method_rename",
        "url": "function.runkit7-method-rename.php",
        "description": "Dynamically changes the name of the given method"
    },
    {
        "name": "runkit7_superglobals",
        "url": "function.runkit7-superglobals.php",
        "description": "Return numerically indexed array of registered superglobals"
    },
    {
        "name": "sapi_windows_cp_conv",
        "url": "function.sapi-windows-cp-conv.php",
        "description": "Convert string from one codepage to another"
    },
    {
        "name": "sapi_windows_cp_is_utf8",
        "url": "function.sapi-windows-cp-is-utf8.php",
        "description": "Indicates whether the codepage is UTF-8 compatible"
    },
    {
        "name": "sapi_windows_generate_ctrl_event",
        "url": "function.sapi-windows-generate-ctrl-event.php",
        "description": "Send a CTRL event to another process"
    },
    {
        "name": "sapi_windows_vt100_support",
        "url": "function.sapi-windows-vt100-support.php",
        "description": "Get or set VT100 support for the specified stream associated to an output buffer of a Windows console."
    },
    {
        "name": "Schema::createCollection",
        "url": "mysql-xdevapi-schema.createcollection.php",
        "description": "Add collection to schema"
    },
    {
        "name": "Schema::existsInDatabase",
        "url": "mysql-xdevapi-schema.existsindatabase.php",
        "description": "Check if exists in database"
    },
    {
        "name": "Schema::getCollectionAsTable",
        "url": "mysql-xdevapi-schema.getcollectionastable.php",
        "description": "Get collection as a Table object"
    },
    {
        "name": "Schema::getName",
        "url": "mysql-xdevapi-schema.getname.php",
        "description": "Get schema name"
    },
    {
        "name": "Schema::getTable",
        "url": "mysql-xdevapi-schema.gettable.php",
        "description": "Get schema table"
    },
    {
        "name": "Schema::__construct",
        "url": "mysql-xdevapi-schema.construct.php",
        "description": "Schema constructor"
    },
    {
        "name": "scoutapm_get_calls",
        "url": "function.scoutapm-get-calls.php",
        "description": "Returns a list of instrumented calls that have occurred"
    },
    {
        "name": "SeasLog::alert",
        "url": "seaslog.alert.php",
        "description": "Record alert log information"
    },
    {
        "name": "SeasLog::analyzerDetail",
        "url": "seaslog.analyzerdetail.php",
        "description": "Get log detail by level, log_path, key_word, start, limit, order"
    },
    {
        "name": "SeasLog::critical",
        "url": "seaslog.critical.php",
        "description": "Record critical log information"
    },
    {
        "name": "SeasLog::emergency",
        "url": "seaslog.emergency.php",
        "description": "Record emergency log information"
    },
    {
        "name": "SeasLog::flushBuffer",
        "url": "seaslog.flushbuffer.php",
        "description": "Flush logs buffer, dump to appender file, or send to remote api with tcp\/udp"
    },
    {
        "name": "SeasLog::getBuffer",
        "url": "seaslog.getbuffer.php",
        "description": "Get the logs buffer in memory as array"
    },
    {
        "name": "SeasLog::getDatetimeFormat",
        "url": "seaslog.getdatetimeformat.php",
        "description": "Get SeasLog datetime format style"
    },
    {
        "name": "SeasLog::getRequestID",
        "url": "seaslog.getrequestid.php",
        "description": "Get SeasLog request_id differentiated requests"
    },
    {
        "name": "SeasLog::info",
        "url": "seaslog.info.php",
        "description": "Record info log information"
    },
    {
        "name": "SeasLog::notice",
        "url": "seaslog.notice.php",
        "description": "Record notice log information"
    },
    {
        "name": "SeasLog::setDatetimeFormat",
        "url": "seaslog.setdatetimeformat.php",
        "description": "Set SeasLog datetime format style"
    },
    {
        "name": "SeasLog::setRequestID",
        "url": "seaslog.setrequestid.php",
        "description": "Set SeasLog request_id differentiated requests"
    },
    {
        "name": "SeasLog::warning",
        "url": "seaslog.warning.php",
        "description": "Record warning log information"
    },
    {
        "name": "SeasLog::__destruct",
        "url": "seaslog.destruct.php",
        "description": "Description"
    },
    {
        "name": "seaslog_get_version",
        "url": "function.seaslog-get-version.php",
        "description": "Get SeasLog version."
    },
    {
        "name": "sem_acquire",
        "url": "function.sem-acquire.php",
        "description": "Acquire a semaphore"
    },
    {
        "name": "sem_release",
        "url": "function.sem-release.php",
        "description": "Release a semaphore"
    },
    {
        "name": "SensitiveParameter::__construct",
        "url": "sensitiveparameter.construct.php",
        "description": "Construct a new SensitiveParameter attribute instance"
    },
    {
        "name": "SensitiveParameterValue::__construct",
        "url": "sensitiveparametervalue.construct.php",
        "description": "Constructs a new SensitiveParameterValue object"
    },
    {
        "name": "Serializable::serialize",
        "url": "serializable.serialize.php",
        "description": "String representation of object"
    },
    {
        "name": "serialize",
        "url": "function.serialize.php",
        "description": "Generates a storable representation of a value"
    },
    {
        "name": "Session::createSchema",
        "url": "mysql-xdevapi-session.createschema.php",
        "description": "Create new schema"
    },
    {
        "name": "Session::generateUUID",
        "url": "mysql-xdevapi-session.generateuuid.php",
        "description": "Get new UUID"
    },
    {
        "name": "Session::getSchema",
        "url": "mysql-xdevapi-session.getschema.php",
        "description": "Get a new schema object"
    },
    {
        "name": "Session::getServerVersion",
        "url": "mysql-xdevapi-session.getserverversion.php",
        "description": "Get server version"
    },
    {
        "name": "Session::quoteName",
        "url": "mysql-xdevapi-session.quotename.php",
        "description": "Add quotes"
    },
    {
        "name": "Session::rollback",
        "url": "mysql-xdevapi-session.rollback.php",
        "description": "Rollback transaction"
    },
    {
        "name": "Session::setSavepoint",
        "url": "mysql-xdevapi-session.setsavepoint.php",
        "description": "Create savepoint"
    },
    {
        "name": "Session::startTransaction",
        "url": "mysql-xdevapi-session.starttransaction.php",
        "description": "Start transaction"
    },
    {
        "name": "SessionHandler::close",
        "url": "sessionhandler.close.php",
        "description": "Close the session"
    },
    {
        "name": "SessionHandler::destroy",
        "url": "sessionhandler.destroy.php",
        "description": "Destroy a session"
    },
    {
        "name": "SessionHandler::open",
        "url": "sessionhandler.open.php",
        "description": "Initialize session"
    },
    {
        "name": "SessionHandler::write",
        "url": "sessionhandler.write.php",
        "description": "Write session data"
    },
    {
        "name": "SessionHandlerInterface::destroy",
        "url": "sessionhandlerinterface.destroy.php",
        "description": "Destroy a session"
    },
    {
        "name": "SessionHandlerInterface::open",
        "url": "sessionhandlerinterface.open.php",
        "description": "Initialize session"
    },
    {
        "name": "SessionHandlerInterface::write",
        "url": "sessionhandlerinterface.write.php",
        "description": "Write session data"
    },
    {
        "name": "SessionUpdateTimestampHandlerInterface::updateTimestamp",
        "url": "sessionupdatetimestamphandlerinterface.updatetimestamp.php",
        "description": "Update timestamp"
    },
    {
        "name": "session_abort",
        "url": "function.session-abort.php",
        "description": "Discard session array changes and finish session"
    },
    {
        "name": "session_cache_limiter",
        "url": "function.session-cache-limiter.php",
        "description": "Get and\/or set the current cache limiter"
    },
    {
        "name": "session_create_id",
        "url": "function.session-create-id.php",
        "description": "Create new session id"
    },
    {
        "name": "session_destroy",
        "url": "function.session-destroy.php",
        "description": "Destroys all data registered to a session"
    },
    {
        "name": "session_gc",
        "url": "function.session-gc.php",
        "description": "Perform session data garbage collection"
    },
    {
        "name": "session_id",
        "url": "function.session-id.php",
        "description": "Get and\/or set the current session id"
    },
    {
        "name": "session_name",
        "url": "function.session-name.php",
        "description": "Get and\/or set the current session name"
    },
    {
        "name": "session_register_shutdown",
        "url": "function.session-register-shutdown.php",
        "description": "Session shutdown function"
    },
    {
        "name": "session_save_path",
        "url": "function.session-save-path.php",
        "description": "Get and\/or set the current session save path"
    },
    {
        "name": "session_set_save_handler",
        "url": "function.session-set-save-handler.php",
        "description": "Sets user-level session storage functions"
    },
    {
        "name": "session_status",
        "url": "function.session-status.php",
        "description": "Returns the current session status"
    },
    {
        "name": "session_write_close",
        "url": "function.session-write-close.php",
        "description": "Write session data and end session"
    },
    {
        "name": "setlocale",
        "url": "function.setlocale.php",
        "description": "Set locale information"
    },
    {
        "name": "settype",
        "url": "function.settype.php",
        "description": "Set the type of a variable"
    },
    {
        "name": "set_exception_handler",
        "url": "function.set-exception-handler.php",
        "description": "Sets a user-defined exception handler function"
    },
    {
        "name": "set_include_path",
        "url": "function.set-include-path.php",
        "description": "Sets the include_path configuration option"
    },
    {
        "name": "sha1",
        "url": "function.sha1.php",
        "description": "Calculate the sha1 hash of a string"
    },
    {
        "name": "shell_exec",
        "url": "function.shell-exec.php",
        "description": "Execute command via shell and return the complete output as a string"
    },
    {
        "name": "shmop_delete",
        "url": "function.shmop-delete.php",
        "description": "Delete shared memory block"
    },
    {
        "name": "shmop_read",
        "url": "function.shmop-read.php",
        "description": "Read data from shared memory block"
    },
    {
        "name": "shmop_write",
        "url": "function.shmop-write.php",
        "description": "Write data into shared memory block"
    },
    {
        "name": "shm_detach",
        "url": "function.shm-detach.php",
        "description": "Disconnects from shared memory segment"
    },
    {
        "name": "shm_has_var",
        "url": "function.shm-has-var.php",
        "description": "Check whether a specific entry exists"
    },
    {
        "name": "shm_remove",
        "url": "function.shm-remove.php",
        "description": "Removes shared memory from Unix systems"
    },
    {
        "name": "show_source",
        "url": "function.show-source.php",
        "description": "Alias of highlight_file"
    },
    {
        "name": "simdjson_decode",
        "url": "function.simdjson-decode.php",
        "description": "Decodes a JSON string"
    },
    {
        "name": "simdjson_key_count",
        "url": "function.simdjson-key-count.php",
        "description": "Returns the value at a JSON pointer."
    },
    {
        "name": "simdjson_key_value",
        "url": "function.simdjson-key-value.php",
        "description": "Decodes the value of a JSON string located at the requested JSON pointer."
    },
    {
        "name": "SimpleXMLElement::addAttribute",
        "url": "simplexmlelement.addattribute.php",
        "description": "Adds an attribute to the SimpleXML element"
    },
    {
        "name": "SimpleXMLElement::asXML",
        "url": "simplexmlelement.asxml.php",
        "description": "Return a well-formed XML string based on SimpleXML element"
    },
    {
        "name": "SimpleXMLElement::children",
        "url": "simplexmlelement.children.php",
        "description": "Finds children of given node"
    },
    {
        "name": "SimpleXMLElement::current",
        "url": "simplexmlelement.current.php",
        "description": "Returns the current element"
    },
    {
        "name": "SimpleXMLElement::getDocNamespaces",
        "url": "simplexmlelement.getdocnamespaces.php",
        "description": "Returns namespaces declared in document"
    },
    {
        "name": "SimpleXMLElement::getNamespaces",
        "url": "simplexmlelement.getnamespaces.php",
        "description": "Returns namespaces used in document"
    },
    {
        "name": "SimpleXMLElement::key",
        "url": "simplexmlelement.key.php",
        "description": "Return current key"
    },
    {
        "name": "SimpleXMLElement::registerXPathNamespace",
        "url": "simplexmlelement.registerxpathnamespace.php",
        "description": "Creates a prefix\/ns context for the next XPath query"
    },
    {
        "name": "SimpleXMLElement::saveXML",
        "url": "simplexmlelement.savexml.php",
        "description": "Alias of SimpleXMLElement::asXML"
    },
    {
        "name": "SimpleXMLElement::xpath",
        "url": "simplexmlelement.xpath.php",
        "description": "Runs XPath query on XML data"
    },
    {
        "name": "SimpleXMLElement::__toString",
        "url": "simplexmlelement.tostring.php",
        "description": "Returns the string content"
    },
    {
        "name": "simplexml_load_file",
        "url": "function.simplexml-load-file.php",
        "description": "Interprets an XML file into an object"
    },
    {
        "name": "sin",
        "url": "function.sin.php",
        "description": "Sine"
    },
    {
        "name": "sizeof",
        "url": "function.sizeof.php",
        "description": "Alias of count"
    },
    {
        "name": "snmp2_get",
        "url": "function.snmp2-get.php",
        "description": "Fetch an SNMP object"
    },
    {
        "name": "snmp2_real_walk",
        "url": "function.snmp2-real-walk.php",
        "description": "Return all objects including their respective object ID within the specified one"
    },
    {
        "name": "snmp2_walk",
        "url": "function.snmp2-walk.php",
        "description": "Fetch all the SNMP objects from an agent"
    },
    {
        "name": "snmp3_getnext",
        "url": "function.snmp3-getnext.php",
        "description": "Fetch the SNMP object which follows the given object id"
    },
    {
        "name": "snmp3_set",
        "url": "function.snmp3-set.php",
        "description": "Set the value of an SNMP object"
    },
    {
        "name": "SNMP::close",
        "url": "snmp.close.php",
        "description": "Close SNMP session"
    },
    {
        "name": "SNMP::getErrno",
        "url": "snmp.geterrno.php",
        "description": "Get last error code"
    },
    {
        "name": "SNMP::getnext",
        "url": "snmp.getnext.php",
        "description": "Fetch an SNMP object which   follows the given object id"
    },
    {
        "name": "SNMP::set",
        "url": "snmp.set.php",
        "description": "Set the value of an SNMP object"
    },
    {
        "name": "SNMP::walk",
        "url": "snmp.walk.php",
        "description": "Fetch SNMP object subtree"
    },
    {
        "name": "snmpget",
        "url": "function.snmpget.php",
        "description": "Fetch an SNMP object"
    },
    {
        "name": "snmprealwalk",
        "url": "function.snmprealwalk.php",
        "description": "Return all objects including their respective object ID within the specified one"
    },
    {
        "name": "snmpwalk",
        "url": "function.snmpwalk.php",
        "description": "Fetch all the SNMP objects from an agent"
    },
    {
        "name": "snmp_get_quick_print",
        "url": "function.snmp-get-quick-print.php",
        "description": "Fetches the current value of the NET-SNMP library's quick_print setting"
    },
    {
        "name": "snmp_read_mib",
        "url": "function.snmp-read-mib.php",
        "description": "Reads and parses a MIB file into the active MIB tree"
    },
    {
        "name": "snmp_set_oid_numeric_print",
        "url": "function.snmp-set-oid-numeric-print.php",
        "description": "Alias of snmp_set_oid_output_format"
    },
    {
        "name": "snmp_set_quick_print",
        "url": "function.snmp-set-quick-print.php",
        "description": "Set the value of enable within the NET-SNMP library"
    },
    {
        "name": "SoapClient::__call",
        "url": "soapclient.call.php",
        "description": "Calls a SOAP function (deprecated)"
    },
    {
        "name": "SoapClient::__doRequest",
        "url": "soapclient.dorequest.php",
        "description": "Performs a SOAP request"
    },
    {
        "name": "SoapClient::__getFunctions",
        "url": "soapclient.getfunctions.php",
        "description": "Returns list of available SOAP functions"
    },
    {
        "name": "SoapClient::__getLastRequestHeaders",
        "url": "soapclient.getlastrequestheaders.php",
        "description": "Returns the SOAP headers from the last request"
    },
    {
        "name": "SoapClient::__getLastResponseHeaders",
        "url": "soapclient.getlastresponseheaders.php",
        "description": "Returns the SOAP headers from the last response"
    },
    {
        "name": "SoapClient::__setCookie",
        "url": "soapclient.setcookie.php",
        "description": "Defines a cookie for SOAP requests"
    },
    {
        "name": "SoapClient::__setSoapHeaders",
        "url": "soapclient.setsoapheaders.php",
        "description": "Sets SOAP headers for subsequent calls"
    },
    {
        "name": "SoapFault::__construct",
        "url": "soapfault.construct.php",
        "description": "SoapFault constructor"
    },
    {
        "name": "SoapHeader::__construct",
        "url": "soapheader.construct.php",
        "description": "SoapHeader constructor"
    },
    {
        "name": "SoapServer::addFunction",
        "url": "soapserver.addfunction.php",
        "description": "Adds one or more functions to handle SOAP requests"
    },
    {
        "name": "SoapServer::fault",
        "url": "soapserver.fault.php",
        "description": "Issue SoapServer fault indicating an error"
    },
    {
        "name": "SoapServer::handle",
        "url": "soapserver.handle.php",
        "description": "Handles a SOAP request"
    },
    {
        "name": "SoapServer::setObject",
        "url": "soapserver.setobject.php",
        "description": "Sets the object which will be used to handle SOAP requests"
    },
    {
        "name": "SoapServer::__construct",
        "url": "soapserver.construct.php",
        "description": "SoapServer constructor"
    },
    {
        "name": "Socket context options",
        "url": "context.socket.php",
        "description": "Socket context option listing"
    },
    {
        "name": "socket_addrinfo_bind",
        "url": "function.socket-addrinfo-bind.php",
        "description": "Create and bind to a socket from a given addrinfo"
    },
    {
        "name": "socket_addrinfo_explain",
        "url": "function.socket-addrinfo-explain.php",
        "description": "Get information about addrinfo"
    },
    {
        "name": "socket_atmark",
        "url": "function.socket-atmark.php",
        "description": "Determines whether socket is at out-of-band mark"
    },
    {
        "name": "socket_clear_error",
        "url": "function.socket-clear-error.php",
        "description": "Clears the error on the socket or the last error code"
    },
    {
        "name": "socket_cmsg_space",
        "url": "function.socket-cmsg-space.php",
        "description": "Calculate message buffer size"
    },
    {
        "name": "socket_create",
        "url": "function.socket-create.php",
        "description": "Create a socket (endpoint for communication)"
    },
    {
        "name": "socket_create_pair",
        "url": "function.socket-create-pair.php",
        "description": "Creates a pair of indistinguishable sockets and stores them in an array"
    },
    {
        "name": "socket_getopt",
        "url": "function.socket-getopt.php",
        "description": "Alias of socket_get_option"
    },
    {
        "name": "socket_getsockname",
        "url": "function.socket-getsockname.php",
        "description": "Queries the local side of the given socket which may either result in host\/port or in a Unix filesystem path, dependent on its type"
    },
    {
        "name": "socket_get_status",
        "url": "function.socket-get-status.php",
        "description": "Alias of stream_get_meta_data"
    },
    {
        "name": "socket_last_error",
        "url": "function.socket-last-error.php",
        "description": "Returns the last error on the socket"
    },
    {
        "name": "socket_read",
        "url": "function.socket-read.php",
        "description": "Reads a maximum of length bytes from a socket"
    },
    {
        "name": "socket_recvfrom",
        "url": "function.socket-recvfrom.php",
        "description": "Receives data from a socket whether or not it is connection-oriented"
    },
    {
        "name": "socket_select",
        "url": "function.socket-select.php",
        "description": "Runs the select() system call on the given arrays of sockets with a specified timeout"
    },
    {
        "name": "socket_sendmsg",
        "url": "function.socket-sendmsg.php",
        "description": "Send a message"
    },
    {
        "name": "socket_setopt",
        "url": "function.socket-setopt.php",
        "description": "Alias of socket_set_option"
    },
    {
        "name": "socket_set_blocking",
        "url": "function.socket-set-blocking.php",
        "description": "Alias of stream_set_blocking"
    },
    {
        "name": "socket_set_option",
        "url": "function.socket-set-option.php",
        "description": "Sets socket options for the socket"
    },
    {
        "name": "socket_shutdown",
        "url": "function.socket-shutdown.php",
        "description": "Shuts down a socket for receiving, sending, or both"
    },
    {
        "name": "socket_write",
        "url": "function.socket-write.php",
        "description": "Write to a socket"
    },
    {
        "name": "socket_wsaprotocol_info_import",
        "url": "function.socket-wsaprotocol-info-import.php",
        "description": "Imports a Socket from another Process"
    },
    {
        "name": "sodium_add",
        "url": "function.sodium-add.php",
        "description": "Add large numbers"
    },
    {
        "name": "sodium_bin2base64",
        "url": "function.sodium-bin2base64.php",
        "description": "Encodes a raw binary string with base64."
    },
    {
        "name": "sodium_compare",
        "url": "function.sodium-compare.php",
        "description": "Compare large numbers"
    },
    {
        "name": "sodium_crypto_aead_aes256gcm_encrypt",
        "url": "function.sodium-crypto-aead-aes256gcm-encrypt.php",
        "description": "Encrypt then authenticate with AES-256-GCM"
    },
    {
        "name": "sodium_crypto_aead_aes256gcm_keygen",
        "url": "function.sodium-crypto-aead-aes256gcm-keygen.php",
        "description": "Generate a random AES-256-GCM key"
    },
    {
        "name": "sodium_crypto_aead_chacha20poly1305_encrypt",
        "url": "function.sodium-crypto-aead-chacha20poly1305-encrypt.php",
        "description": "Encrypt then authenticate with ChaCha20-Poly1305"
    },
    {
        "name": "sodium_crypto_aead_chacha20poly1305_ietf_encrypt",
        "url": "function.sodium-crypto-aead-chacha20poly1305-ietf-encrypt.php",
        "description": "Encrypt a message"
    },
    {
        "name": "sodium_crypto_aead_chacha20poly1305_keygen",
        "url": "function.sodium-crypto-aead-chacha20poly1305-keygen.php",
        "description": "Generate a random ChaCha20-Poly1305 key."
    },
    {
        "name": "sodium_crypto_aead_xchacha20poly1305_ietf_encrypt",
        "url": "function.sodium-crypto-aead-xchacha20poly1305-ietf-encrypt.php",
        "description": "(Preferred) Encrypt then authenticate with XChaCha20-Poly1305"
    },
    {
        "name": "sodium_crypto_auth",
        "url": "function.sodium-crypto-auth.php",
        "description": "Compute a tag for the message"
    },
    {
        "name": "sodium_crypto_auth_verify",
        "url": "function.sodium-crypto-auth-verify.php",
        "description": "Verifies that the tag is valid for the message"
    },
    {
        "name": "sodium_crypto_box_keypair",
        "url": "function.sodium-crypto-box-keypair.php",
        "description": "Randomly generate a secret key and a corresponding public key"
    },
    {
        "name": "sodium_crypto_box_open",
        "url": "function.sodium-crypto-box-open.php",
        "description": "Authenticated public-key decryption"
    },
    {
        "name": "sodium_crypto_box_publickey_from_secretkey",
        "url": "function.sodium-crypto-box-publickey-from-secretkey.php",
        "description": "Calculate the public key from a secret key"
    },
    {
        "name": "sodium_crypto_box_seal_open",
        "url": "function.sodium-crypto-box-seal-open.php",
        "description": "Anonymous public-key decryption"
    },
    {
        "name": "sodium_crypto_box_seed_keypair",
        "url": "function.sodium-crypto-box-seed-keypair.php",
        "description": "Deterministically derive the key pair from a single key"
    },
    {
        "name": "sodium_crypto_core_ristretto255_from_hash",
        "url": "function.sodium-crypto-core-ristretto255-from-hash.php",
        "description": "Maps a vector"
    },
    {
        "name": "sodium_crypto_core_ristretto255_random",
        "url": "function.sodium-crypto-core-ristretto255-random.php",
        "description": "Generates a random key"
    },
    {
        "name": "sodium_crypto_core_ristretto255_scalar_complement",
        "url": "function.sodium-crypto-core-ristretto255-scalar-complement.php",
        "description": "The sodium_crypto_core_ristretto255_scalar_complement purpose"
    },
    {
        "name": "sodium_crypto_core_ristretto255_scalar_mul",
        "url": "function.sodium-crypto-core-ristretto255-scalar-mul.php",
        "description": "Multiplies a scalar value"
    },
    {
        "name": "sodium_crypto_core_ristretto255_scalar_random",
        "url": "function.sodium-crypto-core-ristretto255-scalar-random.php",
        "description": "Generates a random key"
    },
    {
        "name": "sodium_crypto_core_ristretto255_scalar_sub",
        "url": "function.sodium-crypto-core-ristretto255-scalar-sub.php",
        "description": "Subtracts a scalar value"
    },
    {
        "name": "sodium_crypto_generichash",
        "url": "function.sodium-crypto-generichash.php",
        "description": "Get a hash of the message"
    },
    {
        "name": "sodium_crypto_generichash_init",
        "url": "function.sodium-crypto-generichash-init.php",
        "description": "Initialize a hash for streaming"
    },
    {
        "name": "sodium_crypto_generichash_update",
        "url": "function.sodium-crypto-generichash-update.php",
        "description": "Add message to a hash"
    },
    {
        "name": "sodium_crypto_kdf_keygen",
        "url": "function.sodium-crypto-kdf-keygen.php",
        "description": "Generate a random root key for the KDF interface"
    },
    {
        "name": "sodium_crypto_kx_keypair",
        "url": "function.sodium-crypto-kx-keypair.php",
        "description": "Creates a new sodium keypair"
    },
    {
        "name": "sodium_crypto_kx_secretkey",
        "url": "function.sodium-crypto-kx-secretkey.php",
        "description": "Extract the secret key from a crypto_kx keypair."
    },
    {
        "name": "sodium_crypto_kx_server_session_keys",
        "url": "function.sodium-crypto-kx-server-session-keys.php",
        "description": "Calculate the server-side session keys."
    },
    {
        "name": "sodium_crypto_pwhash_scryptsalsa208sha256",
        "url": "function.sodium-crypto-pwhash-scryptsalsa208sha256.php",
        "description": "Derives a key from a password, using scrypt"
    },
    {
        "name": "sodium_crypto_pwhash_scryptsalsa208sha256_str_verify",
        "url": "function.sodium-crypto-pwhash-scryptsalsa208sha256-str-verify.php",
        "description": "Verify that the password is a valid password verification string"
    },
    {
        "name": "sodium_crypto_pwhash_str_needs_rehash",
        "url": "function.sodium-crypto-pwhash-str-needs-rehash.php",
        "description": "Determine whether or not to rehash a password"
    },
    {
        "name": "sodium_crypto_scalarmult",
        "url": "function.sodium-crypto-scalarmult.php",
        "description": "Compute a shared secret given a user's secret key and another user's public key"
    },
    {
        "name": "sodium_crypto_scalarmult_ristretto255",
        "url": "function.sodium-crypto-scalarmult-ristretto255.php",
        "description": "Computes a shared secret"
    },
    {
        "name": "sodium_crypto_secretbox",
        "url": "function.sodium-crypto-secretbox.php",
        "description": "Authenticated shared-key encryption"
    },
    {
        "name": "sodium_crypto_secretbox_open",
        "url": "function.sodium-crypto-secretbox-open.php",
        "description": "Authenticated shared-key decryption"
    },
    {
        "name": "sodium_crypto_secretstream_xchacha20poly1305_init_push",
        "url": "function.sodium-crypto-secretstream-xchacha20poly1305-init-push.php",
        "description": "Initialize a secretstream context for encryption"
    },
    {
        "name": "sodium_crypto_secretstream_xchacha20poly1305_pull",
        "url": "function.sodium-crypto-secretstream-xchacha20poly1305-pull.php",
        "description": "Decrypt a chunk of data from an encrypted stream"
    },
    {
        "name": "sodium_crypto_secretstream_xchacha20poly1305_rekey",
        "url": "function.sodium-crypto-secretstream-xchacha20poly1305-rekey.php",
        "description": "Explicitly rotate the key in the secretstream state"
    },
    {
        "name": "sodium_crypto_shorthash_keygen",
        "url": "function.sodium-crypto-shorthash-keygen.php",
        "description": "Get random bytes for key"
    },
    {
        "name": "sodium_crypto_sign_detached",
        "url": "function.sodium-crypto-sign-detached.php",
        "description": "Sign the message"
    },
    {
        "name": "sodium_crypto_sign_ed25519_sk_to_curve25519",
        "url": "function.sodium-crypto-sign-ed25519-sk-to-curve25519.php",
        "description": "Convert an Ed25519 secret key to a Curve25519 secret key"
    },
    {
        "name": "sodium_crypto_sign_keypair_from_secretkey_and_publickey",
        "url": "function.sodium-crypto-sign-keypair-from-secretkey-and-publickey.php",
        "description": "Join a secret key and public key together"
    },
    {
        "name": "sodium_crypto_sign_publickey",
        "url": "function.sodium-crypto-sign-publickey.php",
        "description": "Extract the Ed25519 public key from a keypair"
    },
    {
        "name": "sodium_crypto_sign_secretkey",
        "url": "function.sodium-crypto-sign-secretkey.php",
        "description": "Extract the Ed25519 secret key from a keypair"
    },
    {
        "name": "sodium_crypto_sign_verify_detached",
        "url": "function.sodium-crypto-sign-verify-detached.php",
        "description": "Verify signature for the message"
    },
    {
        "name": "sodium_crypto_stream_keygen",
        "url": "function.sodium-crypto-stream-keygen.php",
        "description": "Generate a random sodium_crypto_stream key."
    },
    {
        "name": "sodium_crypto_stream_xchacha20_keygen",
        "url": "function.sodium-crypto-stream-xchacha20-keygen.php",
        "description": "Returns a secure random key"
    },
    {
        "name": "sodium_crypto_stream_xchacha20_xor_ic",
        "url": "function.sodium-crypto-stream-xchacha20-xor-ic.php",
        "description": "Encrypts a message using a nonce and a secret key (no authentication)"
    },
    {
        "name": "sodium_hex2bin",
        "url": "function.sodium-hex2bin.php",
        "description": "Decodes a hexadecimally encoded binary string"
    },
    {
        "name": "sodium_memcmp",
        "url": "function.sodium-memcmp.php",
        "description": "Test for equality in constant-time"
    },
    {
        "name": "sodium_pad",
        "url": "function.sodium-pad.php",
        "description": "Add padding data"
    },
    {
        "name": "SolrClient::addDocument",
        "url": "solrclient.adddocument.php",
        "description": "Adds a document to the index"
    },
    {
        "name": "SolrClient::commit",
        "url": "solrclient.commit.php",
        "description": "Finalizes all add\/deletes made to the index"
    },
    {
        "name": "SolrClient::deleteByIds",
        "url": "solrclient.deletebyids.php",
        "description": "Deletes by Ids"
    },
    {
        "name": "SolrClient::deleteByQuery",
        "url": "solrclient.deletebyquery.php",
        "description": "Deletes all documents matching the given query"
    },
    {
        "name": "SolrClient::getByIds",
        "url": "solrclient.getbyids.php",
        "description": "Get Documents by their Ids. Utilizes Solr Realtime Get (RTG)"
    },
    {
        "name": "SolrClient::getOptions",
        "url": "solrclient.getoptions.php",
        "description": "Returns the client options set internally"
    },
    {
        "name": "SolrClient::ping",
        "url": "solrclient.ping.php",
        "description": "Checks if Solr server is still up"
    },
    {
        "name": "SolrClient::request",
        "url": "solrclient.request.php",
        "description": "Sends a raw update request"
    },
    {
        "name": "SolrClient::setResponseWriter",
        "url": "solrclient.setresponsewriter.php",
        "description": "Sets the response writer used to prepare the response from Solr"
    },
    {
        "name": "SolrClient::system",
        "url": "solrclient.system.php",
        "description": "Retrieve Solr Server information"
    },
    {
        "name": "SolrClient::__construct",
        "url": "solrclient.construct.php",
        "description": "Constructor for the SolrClient object"
    },
    {
        "name": "SolrClientException::getInternalInfo",
        "url": "solrclientexception.getinternalinfo.php",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "name": "SolrCollapseFunction::getHint",
        "url": "solrcollapsefunction.gethint.php",
        "description": "Returns collapse hint"
    },
    {
        "name": "SolrCollapseFunction::getMin",
        "url": "solrcollapsefunction.getmin.php",
        "description": "Returns min parameter"
    },
    {
        "name": "SolrCollapseFunction::getSize",
        "url": "solrcollapsefunction.getsize.php",
        "description": "Returns size parameter"
    },
    {
        "name": "SolrCollapseFunction::setHint",
        "url": "solrcollapsefunction.sethint.php",
        "description": "Sets collapse hint"
    },
    {
        "name": "SolrCollapseFunction::setMin",
        "url": "solrcollapsefunction.setmin.php",
        "description": "Sets the initial size of the collapse data structures when collapsing on a numeric field only"
    },
    {
        "name": "SolrCollapseFunction::setSize",
        "url": "solrcollapsefunction.setsize.php",
        "description": "Sets the initial size of the collapse data structures when collapsing on a numeric field only"
    },
    {
        "name": "SolrCollapseFunction::__toString",
        "url": "solrcollapsefunction.tostring.php",
        "description": "Returns a string representing the constructed collapse function"
    },
    {
        "name": "SolrDisMaxQuery::addBoostQuery",
        "url": "solrdismaxquery.addboostquery.php",
        "description": "Adds a boost query field with value and optional boost (bq parameter)"
    },
    {
        "name": "SolrDisMaxQuery::addQueryField",
        "url": "solrdismaxquery.addqueryfield.php",
        "description": "Add a query field with optional boost (qf parameter)"
    },
    {
        "name": "SolrDisMaxQuery::addUserField",
        "url": "solrdismaxquery.adduserfield.php",
        "description": "Adds a field to User Fields Parameter (uf)"
    },
    {
        "name": "SolrDisMaxQuery::removeBoostQuery",
        "url": "solrdismaxquery.removeboostquery.php",
        "description": "Removes a boost query partial by field name (bq)"
    },
    {
        "name": "SolrDisMaxQuery::removeQueryField",
        "url": "solrdismaxquery.removequeryfield.php",
        "description": "Removes a Query Field (qf parameter)"
    },
    {
        "name": "SolrDisMaxQuery::removeUserField",
        "url": "solrdismaxquery.removeuserfield.php",
        "description": "Removes a field from The User Fields Parameter (uf)"
    },
    {
        "name": "SolrDisMaxQuery::setBigramPhraseSlop",
        "url": "solrdismaxquery.setbigramphraseslop.php",
        "description": "Sets Bigram Phrase Slop (ps2 parameter)"
    },
    {
        "name": "SolrDisMaxQuery::setBoostQuery",
        "url": "solrdismaxquery.setboostquery.php",
        "description": "Directly Sets Boost Query Parameter (bq)"
    },
    {
        "name": "SolrDisMaxQuery::setPhraseFields",
        "url": "solrdismaxquery.setphrasefields.php",
        "description": "Sets  Phrase Fields and their boosts (and slops) using pf2 parameter"
    },
    {
        "name": "SolrDisMaxQuery::setQueryAlt",
        "url": "solrdismaxquery.setqueryalt.php",
        "description": "Set Query Alternate (q.alt parameter)"
    },
    {
        "name": "SolrDisMaxQuery::setTieBreaker",
        "url": "solrdismaxquery.settiebreaker.php",
        "description": "Sets Tie Breaker parameter (tie parameter)"
    },
    {
        "name": "SolrDisMaxQuery::setTrigramPhraseSlop",
        "url": "solrdismaxquery.settrigramphraseslop.php",
        "description": "Sets Trigram Phrase Slop (ps3 parameter)"
    },
    {
        "name": "SolrDisMaxQuery::useDisMaxQueryParser",
        "url": "solrdismaxquery.usedismaxqueryparser.php",
        "description": "Switch QueryParser to be DisMax Query Parser"
    },
    {
        "name": "SolrDisMaxQuery::__construct",
        "url": "solrdismaxquery.construct.php",
        "description": "Class Constructor"
    },
    {
        "name": "SolrDocument::clear",
        "url": "solrdocument.clear.php",
        "description": "Drops all the fields in the document"
    },
    {
        "name": "SolrDocument::deleteField",
        "url": "solrdocument.deletefield.php",
        "description": "Removes a field from the document"
    },
    {
        "name": "SolrDocument::getChildDocuments",
        "url": "solrdocument.getchilddocuments.php",
        "description": "Returns an array of child documents (SolrDocument)"
    },
    {
        "name": "SolrDocument::getField",
        "url": "solrdocument.getfield.php",
        "description": "Retrieves a field by name"
    },
    {
        "name": "SolrDocument::getFieldNames",
        "url": "solrdocument.getfieldnames.php",
        "description": "Returns an array of fields names in the document"
    },
    {
        "name": "SolrDocument::hasChildDocuments",
        "url": "solrdocument.haschilddocuments.php",
        "description": "Checks whether the document has any child documents"
    },
    {
        "name": "SolrDocument::merge",
        "url": "solrdocument.merge.php",
        "description": "Merges source to the current SolrDocument"
    },
    {
        "name": "SolrDocument::offsetExists",
        "url": "solrdocument.offsetexists.php",
        "description": "Checks if a particular field exists"
    },
    {
        "name": "SolrDocument::offsetSet",
        "url": "solrdocument.offsetset.php",
        "description": "Adds a field to the document"
    },
    {
        "name": "SolrDocument::reset",
        "url": "solrdocument.reset.php",
        "description": "Alias of SolrDocument::clear"
    },
    {
        "name": "SolrDocument::serialize",
        "url": "solrdocument.serialize.php",
        "description": "Used for custom serialization"
    },
    {
        "name": "SolrDocument::toArray",
        "url": "solrdocument.toarray.php",
        "description": "Returns an array representation of the document"
    },
    {
        "name": "SolrDocument::valid",
        "url": "solrdocument.valid.php",
        "description": "Checks if the current position internally is still valid"
    },
    {
        "name": "SolrDocument::__construct",
        "url": "solrdocument.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrDocument::__get",
        "url": "solrdocument.get.php",
        "description": "Access the field as a property"
    },
    {
        "name": "SolrDocument::__set",
        "url": "solrdocument.set.php",
        "description": "Adds another field to the document"
    },
    {
        "name": "SolrDocumentField::__construct",
        "url": "solrdocumentfield.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrException::getInternalInfo",
        "url": "solrexception.getinternalinfo.php",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "name": "SolrGenericResponse::__destruct",
        "url": "solrgenericresponse.destruct.php",
        "description": "Destructor"
    },
    {
        "name": "SolrIllegalOperationException::getInternalInfo",
        "url": "solrillegaloperationexception.getinternalinfo.php",
        "description": "Returns internal information where the Exception was thrown"
    },
    {
        "name": "SolrInputDocument::addChildDocuments",
        "url": "solrinputdocument.addchilddocuments.php",
        "description": "Adds an array of child documents"
    },
    {
        "name": "SolrInputDocument::clear",
        "url": "solrinputdocument.clear.php",
        "description": "Resets the input document"
    },
    {
        "name": "SolrInputDocument::fieldExists",
        "url": "solrinputdocument.fieldexists.php",
        "description": "Checks if a field exists"
    },
    {
        "name": "SolrInputDocument::getChildDocuments",
        "url": "solrinputdocument.getchilddocuments.php",
        "description": "Returns an array of child documents (SolrInputDocument)"
    },
    {
        "name": "SolrInputDocument::getField",
        "url": "solrinputdocument.getfield.php",
        "description": "Retrieves a field by name"
    },
    {
        "name": "SolrInputDocument::getFieldCount",
        "url": "solrinputdocument.getfieldcount.php",
        "description": "Returns the number of fields in the document"
    },
    {
        "name": "SolrInputDocument::hasChildDocuments",
        "url": "solrinputdocument.haschilddocuments.php",
        "description": "Returns true if the document has any child documents"
    },
    {
        "name": "SolrInputDocument::reset",
        "url": "solrinputdocument.reset.php",
        "description": "Alias of SolrInputDocument::clear"
    },
    {
        "name": "SolrInputDocument::setFieldBoost",
        "url": "solrinputdocument.setfieldboost.php",
        "description": "Sets the index-time boost value for a field"
    },
    {
        "name": "SolrInputDocument::toArray",
        "url": "solrinputdocument.toarray.php",
        "description": "Returns an array representation of the input document"
    },
    {
        "name": "SolrInputDocument::__construct",
        "url": "solrinputdocument.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrModifiableParams::__construct",
        "url": "solrmodifiableparams.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrObject::getPropertyNames",
        "url": "solrobject.getpropertynames.php",
        "description": "Returns an array of all the names of the properties"
    },
    {
        "name": "SolrObject::offsetGet",
        "url": "solrobject.offsetget.php",
        "description": "Used to retrieve a property"
    },
    {
        "name": "SolrObject::offsetUnset",
        "url": "solrobject.offsetunset.php",
        "description": "Unsets the value for the property"
    },
    {
        "name": "SolrObject::__destruct",
        "url": "solrobject.destruct.php",
        "description": "Destructor"
    },
    {
        "name": "SolrParams::addParam",
        "url": "solrparams.addparam.php",
        "description": "Adds a parameter to the object"
    },
    {
        "name": "SolrParams::getParam",
        "url": "solrparams.getparam.php",
        "description": "Returns a parameter value"
    },
    {
        "name": "SolrParams::getPreparedParams",
        "url": "solrparams.getpreparedparams.php",
        "description": "Returns an array of URL-encoded parameters"
    },
    {
        "name": "SolrParams::set",
        "url": "solrparams.set.php",
        "description": "Alias of SolrParams::setParam"
    },
    {
        "name": "SolrParams::toString",
        "url": "solrparams.tostring.php",
        "description": "Returns all the name-value pair parameters in the object"
    },
    {
        "name": "SolrPingResponse::getResponse",
        "url": "solrpingresponse.getresponse.php",
        "description": "Returns the response from the server"
    },
    {
        "name": "SolrPingResponse::__destruct",
        "url": "solrpingresponse.destruct.php",
        "description": "Destructor"
    },
    {
        "name": "SolrQuery::addExpandSortField",
        "url": "solrquery.addexpandsortfield.php",
        "description": "Orders the documents within the expanded groups (expand.sort parameter)"
    },
    {
        "name": "SolrQuery::addFacetDateOther",
        "url": "solrquery.addfacetdateother.php",
        "description": "Adds another facet.date.other parameter"
    },
    {
        "name": "SolrQuery::addFacetQuery",
        "url": "solrquery.addfacetquery.php",
        "description": "Adds a facet query"
    },
    {
        "name": "SolrQuery::addFilterQuery",
        "url": "solrquery.addfilterquery.php",
        "description": "Specifies a filter query"
    },
    {
        "name": "SolrQuery::addGroupFunction",
        "url": "solrquery.addgroupfunction.php",
        "description": "Allows grouping results based on the unique values of a function query (group.func parameter)"
    },
    {
        "name": "SolrQuery::addGroupSortField",
        "url": "solrquery.addgroupsortfield.php",
        "description": "Add a group sort field (group.sort parameter)"
    },
    {
        "name": "SolrQuery::addMltField",
        "url": "solrquery.addmltfield.php",
        "description": "Sets a field to use for similarity"
    },
    {
        "name": "SolrQuery::addSortField",
        "url": "solrquery.addsortfield.php",
        "description": "Used to control how the results should be sorted"
    },
    {
        "name": "SolrQuery::addStatsField",
        "url": "solrquery.addstatsfield.php",
        "description": "Maps to stats.field parameter"
    },
    {
        "name": "SolrQuery::getExpand",
        "url": "solrquery.getexpand.php",
        "description": "Returns true if group expanding is enabled"
    },
    {
        "name": "SolrQuery::getExpandQuery",
        "url": "solrquery.getexpandquery.php",
        "description": "Returns the expand query expand.q parameter"
    },
    {
        "name": "SolrQuery::getExpandSortFields",
        "url": "solrquery.getexpandsortfields.php",
        "description": "Returns an array of fields"
    },
    {
        "name": "SolrQuery::getFacetDateEnd",
        "url": "solrquery.getfacetdateend.php",
        "description": "Returns the value for the facet.date.end parameter"
    },
    {
        "name": "SolrQuery::getFacetDateGap",
        "url": "solrquery.getfacetdategap.php",
        "description": "Returns the value of the facet.date.gap parameter"
    },
    {
        "name": "SolrQuery::getFacetDateOther",
        "url": "solrquery.getfacetdateother.php",
        "description": "Returns the value for the facet.date.other parameter"
    },
    {
        "name": "SolrQuery::getFacetFields",
        "url": "solrquery.getfacetfields.php",
        "description": "Returns all the facet fields"
    },
    {
        "name": "SolrQuery::getFacetMethod",
        "url": "solrquery.getfacetmethod.php",
        "description": "Returns the value of the facet.method parameter"
    },
    {
        "name": "SolrQuery::getFacetMissing",
        "url": "solrquery.getfacetmissing.php",
        "description": "Returns the current state of the facet.missing parameter"
    },
    {
        "name": "SolrQuery::getFacetPrefix",
        "url": "solrquery.getfacetprefix.php",
        "description": "Returns the facet prefix"
    },
    {
        "name": "SolrQuery::getFacetSort",
        "url": "solrquery.getfacetsort.php",
        "description": "Returns the facet sort type"
    },
    {
        "name": "SolrQuery::getFilterQueries",
        "url": "solrquery.getfilterqueries.php",
        "description": "Returns an array of filter queries"
    },
    {
        "name": "SolrQuery::getGroupCachePercent",
        "url": "solrquery.getgroupcachepercent.php",
        "description": "Returns group cache percent value"
    },
    {
        "name": "SolrQuery::getGroupFields",
        "url": "solrquery.getgroupfields.php",
        "description": "Returns group fields (group.field parameter values)"
    },
    {
        "name": "SolrQuery::getGroupFunctions",
        "url": "solrquery.getgroupfunctions.php",
        "description": "Returns group functions (group.func parameter values)"
    },
    {
        "name": "SolrQuery::getGroupMain",
        "url": "solrquery.getgroupmain.php",
        "description": "Returns the group.main value"
    },
    {
        "name": "SolrQuery::getGroupOffset",
        "url": "solrquery.getgroupoffset.php",
        "description": "Returns the group.offset value"
    },
    {
        "name": "SolrQuery::getGroupSortFields",
        "url": "solrquery.getgroupsortfields.php",
        "description": "Returns the group.sort value"
    },
    {
        "name": "SolrQuery::getHighlight",
        "url": "solrquery.gethighlight.php",
        "description": "Returns the state of the hl parameter"
    },
    {
        "name": "SolrQuery::getHighlightFields",
        "url": "solrquery.gethighlightfields.php",
        "description": "Returns all the fields that Solr should generate highlighted snippets for"
    },
    {
        "name": "SolrQuery::getHighlightFragmenter",
        "url": "solrquery.gethighlightfragmenter.php",
        "description": "Returns the text snippet generator for highlighted text"
    },
    {
        "name": "SolrQuery::getHighlightHighlightMultiTerm",
        "url": "solrquery.gethighlighthighlightmultiterm.php",
        "description": "Returns whether or not to enable highlighting for range\/wildcard\/fuzzy\/prefix queries"
    },
    {
        "name": "SolrQuery::getHighlightMaxAnalyzedChars",
        "url": "solrquery.gethighlightmaxanalyzedchars.php",
        "description": "Returns the maximum number of characters into a document to look for suitable snippets"
    },
    {
        "name": "SolrQuery::getHighlightRegexMaxAnalyzedChars",
        "url": "solrquery.gethighlightregexmaxanalyzedchars.php",
        "description": "Returns the maximum number of characters from a field when using the regex fragmenter"
    },
    {
        "name": "SolrQuery::getHighlightRegexSlop",
        "url": "solrquery.gethighlightregexslop.php",
        "description": "Returns the deviation factor from the ideal fragment size"
    },
    {
        "name": "SolrQuery::getHighlightSimplePost",
        "url": "solrquery.gethighlightsimplepost.php",
        "description": "Returns the text which appears after a highlighted term"
    },
    {
        "name": "SolrQuery::getHighlightSnippets",
        "url": "solrquery.gethighlightsnippets.php",
        "description": "Returns the maximum number of highlighted snippets to generate per field"
    },
    {
        "name": "SolrQuery::getMlt",
        "url": "solrquery.getmlt.php",
        "description": "Returns whether or not MoreLikeThis results should be enabled"
    },
    {
        "name": "SolrQuery::getMltCount",
        "url": "solrquery.getmltcount.php",
        "description": "Returns the number of similar documents to return for each result"
    },
    {
        "name": "SolrQuery::getMltMaxNumQueryTerms",
        "url": "solrquery.getmltmaxnumqueryterms.php",
        "description": "Returns the maximum number of query terms that will be included in any generated query"
    },
    {
        "name": "SolrQuery::getMltMaxWordLength",
        "url": "solrquery.getmltmaxwordlength.php",
        "description": "Returns the maximum word length above which words will be ignored"
    },
    {
        "name": "SolrQuery::getMltMinTermFrequency",
        "url": "solrquery.getmltmintermfrequency.php",
        "description": "Returns the frequency below which terms will be ignored in the source document"
    },
    {
        "name": "SolrQuery::getMltQueryFields",
        "url": "solrquery.getmltqueryfields.php",
        "description": "Returns the query fields and their boosts"
    },
    {
        "name": "SolrQuery::getRows",
        "url": "solrquery.getrows.php",
        "description": "Returns the maximum number of documents"
    },
    {
        "name": "SolrQuery::getStart",
        "url": "solrquery.getstart.php",
        "description": "Returns the offset in the complete result set"
    },
    {
        "name": "SolrQuery::getStatsFacets",
        "url": "solrquery.getstatsfacets.php",
        "description": "Returns all the stats facets that were set"
    },
    {
        "name": "SolrQuery::getTerms",
        "url": "solrquery.getterms.php",
        "description": "Returns whether or not the TermsComponent is enabled"
    },
    {
        "name": "SolrQuery::getTermsIncludeLowerBound",
        "url": "solrquery.gettermsincludelowerbound.php",
        "description": "Returns whether or not to include the lower bound in the result set"
    },
    {
        "name": "SolrQuery::getTermsLimit",
        "url": "solrquery.gettermslimit.php",
        "description": "Returns the maximum number of terms Solr should return"
    },
    {
        "name": "SolrQuery::getTermsMaxCount",
        "url": "solrquery.gettermsmaxcount.php",
        "description": "Returns the maximum document frequency"
    },
    {
        "name": "SolrQuery::getTermsPrefix",
        "url": "solrquery.gettermsprefix.php",
        "description": "Returns the term prefix"
    },
    {
        "name": "SolrQuery::getTermsSort",
        "url": "solrquery.gettermssort.php",
        "description": "Returns an integer indicating how terms are sorted"
    },
    {
        "name": "SolrQuery::getTimeAllowed",
        "url": "solrquery.gettimeallowed.php",
        "description": "Returns the time in milliseconds allowed for the query to finish"
    },
    {
        "name": "SolrQuery::removeExpandSortField",
        "url": "solrquery.removeexpandsortfield.php",
        "description": "Removes an expand sort field from the expand.sort parameter"
    },
    {
        "name": "SolrQuery::removeFacetDateOther",
        "url": "solrquery.removefacetdateother.php",
        "description": "Removes one of the facet.date.other parameters"
    },
    {
        "name": "SolrQuery::removeFacetQuery",
        "url": "solrquery.removefacetquery.php",
        "description": "Removes one of the facet.query parameters"
    },
    {
        "name": "SolrQuery::removeFilterQuery",
        "url": "solrquery.removefilterquery.php",
        "description": "Removes a filter query"
    },
    {
        "name": "SolrQuery::removeMltField",
        "url": "solrquery.removemltfield.php",
        "description": "Removes one of the moreLikeThis fields"
    },
    {
        "name": "SolrQuery::removeSortField",
        "url": "solrquery.removesortfield.php",
        "description": "Removes one of the sort fields"
    },
    {
        "name": "SolrQuery::removeStatsField",
        "url": "solrquery.removestatsfield.php",
        "description": "Removes one of the stats.field parameters"
    },
    {
        "name": "SolrQuery::setEchoParams",
        "url": "solrquery.setechoparams.php",
        "description": "Determines what kind of parameters to include in the response"
    },
    {
        "name": "SolrQuery::setExpandQuery",
        "url": "solrquery.setexpandquery.php",
        "description": "Sets the expand.q parameter"
    },
    {
        "name": "SolrQuery::setExplainOther",
        "url": "solrquery.setexplainother.php",
        "description": "Sets the explainOther common query parameter"
    },
    {
        "name": "SolrQuery::setFacetDateEnd",
        "url": "solrquery.setfacetdateend.php",
        "description": "Maps to facet.date.end"
    },
    {
        "name": "SolrQuery::setFacetDateHardEnd",
        "url": "solrquery.setfacetdatehardend.php",
        "description": "Maps to facet.date.hardend"
    },
    {
        "name": "SolrQuery::setFacetEnumCacheMinDefaultFrequency",
        "url": "solrquery.setfacetenumcachemindefaultfrequency.php",
        "description": "Sets the minimum document frequency used for determining term count"
    },
    {
        "name": "SolrQuery::setFacetMethod",
        "url": "solrquery.setfacetmethod.php",
        "description": "Specifies the type of algorithm to use when faceting a field"
    },
    {
        "name": "SolrQuery::setFacetMissing",
        "url": "solrquery.setfacetmissing.php",
        "description": "Maps to facet.missing"
    },
    {
        "name": "SolrQuery::setFacetPrefix",
        "url": "solrquery.setfacetprefix.php",
        "description": "Specifies a string prefix with which to limits the terms on which to facet"
    },
    {
        "name": "SolrQuery::setGroup",
        "url": "solrquery.setgroup.php",
        "description": "Enable\/Disable result grouping (group parameter)"
    },
    {
        "name": "SolrQuery::setGroupFacet",
        "url": "solrquery.setgroupfacet.php",
        "description": "Sets group.facet parameter"
    },
    {
        "name": "SolrQuery::setGroupLimit",
        "url": "solrquery.setgrouplimit.php",
        "description": "Specifies the number of results to return for each group. The server default value is 1"
    },
    {
        "name": "SolrQuery::setGroupNGroups",
        "url": "solrquery.setgroupngroups.php",
        "description": "If true, Solr includes the number of groups that have matched the query in the results"
    },
    {
        "name": "SolrQuery::setGroupTruncate",
        "url": "solrquery.setgrouptruncate.php",
        "description": "If true, facet counts are based on the most relevant document of each group matching the query"
    },
    {
        "name": "SolrQuery::setHighlightAlternateField",
        "url": "solrquery.sethighlightalternatefield.php",
        "description": "Specifies the backup field to use"
    },
    {
        "name": "SolrQuery::setHighlightFragmenter",
        "url": "solrquery.sethighlightfragmenter.php",
        "description": "Sets a text snippet generator for highlighted text"
    },
    {
        "name": "SolrQuery::setHighlightHighlightMultiTerm",
        "url": "solrquery.sethighlighthighlightmultiterm.php",
        "description": "Use SpanScorer to highlight phrase terms"
    },
    {
        "name": "SolrQuery::setHighlightMaxAnalyzedChars",
        "url": "solrquery.sethighlightmaxanalyzedchars.php",
        "description": "Specifies the number of characters into a document to look for suitable snippets"
    },
    {
        "name": "SolrQuery::setHighlightRegexMaxAnalyzedChars",
        "url": "solrquery.sethighlightregexmaxanalyzedchars.php",
        "description": "Specify the maximum number of characters to analyze"
    },
    {
        "name": "SolrQuery::setHighlightRegexSlop",
        "url": "solrquery.sethighlightregexslop.php",
        "description": "Sets the factor by which the regex fragmenter can stray from the ideal fragment size"
    },
    {
        "name": "SolrQuery::setHighlightSimplePost",
        "url": "solrquery.sethighlightsimplepost.php",
        "description": "Sets the text which appears after a highlighted term"
    },
    {
        "name": "SolrQuery::setHighlightSnippets",
        "url": "solrquery.sethighlightsnippets.php",
        "description": "Sets the maximum number of highlighted snippets to generate per field"
    },
    {
        "name": "SolrQuery::setMlt",
        "url": "solrquery.setmlt.php",
        "description": "Enables or disables moreLikeThis"
    },
    {
        "name": "SolrQuery::setMltCount",
        "url": "solrquery.setmltcount.php",
        "description": "Set the number of similar documents to return for each result"
    },
    {
        "name": "SolrQuery::setMltMaxNumTokens",
        "url": "solrquery.setmltmaxnumtokens.php",
        "description": "Specifies the maximum number of tokens to parse"
    },
    {
        "name": "SolrQuery::setMltMinDocFrequency",
        "url": "solrquery.setmltmindocfrequency.php",
        "description": "Sets the mltMinDoc frequency"
    },
    {
        "name": "SolrQuery::setMltMinWordLength",
        "url": "solrquery.setmltminwordlength.php",
        "description": "Sets the minimum word length"
    },
    {
        "name": "SolrQuery::setQuery",
        "url": "solrquery.setquery.php",
        "description": "Sets the search query"
    },
    {
        "name": "SolrQuery::setShowDebugInfo",
        "url": "solrquery.setshowdebuginfo.php",
        "description": "Flag to show debug information"
    },
    {
        "name": "SolrQuery::setStats",
        "url": "solrquery.setstats.php",
        "description": "Enables or disables the Stats component"
    },
    {
        "name": "SolrQuery::setTermsField",
        "url": "solrquery.settermsfield.php",
        "description": "Sets the name of the field to get the Terms from"
    },
    {
        "name": "SolrQuery::setTermsIncludeUpperBound",
        "url": "solrquery.settermsincludeupperbound.php",
        "description": "Include the upper bound term in the result set"
    },
    {
        "name": "SolrQuery::setTermsLowerBound",
        "url": "solrquery.settermslowerbound.php",
        "description": "Specifies the Term to start from"
    },
    {
        "name": "SolrQuery::setTermsMinCount",
        "url": "solrquery.settermsmincount.php",
        "description": "Sets the minimum document frequency"
    },
    {
        "name": "SolrQuery::setTermsReturnRaw",
        "url": "solrquery.settermsreturnraw.php",
        "description": "Return the raw characters of the indexed term"
    },
    {
        "name": "SolrQuery::setTermsUpperBound",
        "url": "solrquery.settermsupperbound.php",
        "description": "Sets the term to stop at"
    },
    {
        "name": "SolrQuery::__construct",
        "url": "solrquery.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrQueryResponse::__construct",
        "url": "solrqueryresponse.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrResponse::getDigestedResponse",
        "url": "solrresponse.getdigestedresponse.php",
        "description": "Returns the XML response as serialized PHP data"
    },
    {
        "name": "SolrResponse::getHttpStatusMessage",
        "url": "solrresponse.gethttpstatusmessage.php",
        "description": "Returns more details on the HTTP status"
    },
    {
        "name": "SolrResponse::getRawRequestHeaders",
        "url": "solrresponse.getrawrequestheaders.php",
        "description": "Returns the raw request headers sent to the Solr server"
    },
    {
        "name": "SolrResponse::getRawResponseHeaders",
        "url": "solrresponse.getrawresponseheaders.php",
        "description": "Returns the raw response headers from the server"
    },
    {
        "name": "SolrResponse::getResponse",
        "url": "solrresponse.getresponse.php",
        "description": "Returns a SolrObject representing the XML response from the server"
    },
    {
        "name": "SolrResponse::success",
        "url": "solrresponse.success.php",
        "description": "Was the request a success"
    },
    {
        "name": "SolrUpdateResponse::__construct",
        "url": "solrupdateresponse.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SolrUtils::digestXmlResponse",
        "url": "solrutils.digestxmlresponse.php",
        "description": "Parses an response XML string into a SolrObject"
    },
    {
        "name": "SolrUtils::getSolrVersion",
        "url": "solrutils.getsolrversion.php",
        "description": "Returns the current version of the Solr extension"
    },
    {
        "name": "solr_get_version",
        "url": "function.solr-get-version.php",
        "description": "Returns the current version of the Apache Solr extension"
    },
    {
        "name": "soundex",
        "url": "function.soundex.php",
        "description": "Calculate the soundex key of a string"
    },
    {
        "name": "SplDoublyLinkedList::bottom",
        "url": "spldoublylinkedlist.bottom.php",
        "description": "Peeks at the node from the beginning of the doubly linked list"
    },
    {
        "name": "SplDoublyLinkedList::current",
        "url": "spldoublylinkedlist.current.php",
        "description": "Return current array entry"
    },
    {
        "name": "SplDoublyLinkedList::isEmpty",
        "url": "spldoublylinkedlist.isempty.php",
        "description": "Checks whether the doubly linked list is empty"
    },
    {
        "name": "SplDoublyLinkedList::next",
        "url": "spldoublylinkedlist.next.php",
        "description": "Move to next entry"
    },
    {
        "name": "SplDoublyLinkedList::offsetGet",
        "url": "spldoublylinkedlist.offsetget.php",
        "description": "Returns the value at the specified $index"
    },
    {
        "name": "SplDoublyLinkedList::offsetUnset",
        "url": "spldoublylinkedlist.offsetunset.php",
        "description": "Unsets the value at the specified $index"
    },
    {
        "name": "SplDoublyLinkedList::prev",
        "url": "spldoublylinkedlist.prev.php",
        "description": "Move to previous entry"
    },
    {
        "name": "SplDoublyLinkedList::rewind",
        "url": "spldoublylinkedlist.rewind.php",
        "description": "Rewind iterator back to the start"
    },
    {
        "name": "SplDoublyLinkedList::setIteratorMode",
        "url": "spldoublylinkedlist.setiteratormode.php",
        "description": "Sets the mode of iteration"
    },
    {
        "name": "SplDoublyLinkedList::top",
        "url": "spldoublylinkedlist.top.php",
        "description": "Peeks at the node from the end of the doubly linked list"
    },
    {
        "name": "SplDoublyLinkedList::unshift",
        "url": "spldoublylinkedlist.unshift.php",
        "description": "Prepends the doubly linked list with an element"
    },
    {
        "name": "SplFileInfo::getATime",
        "url": "splfileinfo.getatime.php",
        "description": "Gets last access time of the file"
    },
    {
        "name": "SplFileInfo::getCTime",
        "url": "splfileinfo.getctime.php",
        "description": "Gets the inode change time"
    },
    {
        "name": "SplFileInfo::getFileInfo",
        "url": "splfileinfo.getfileinfo.php",
        "description": "Gets an SplFileInfo object for the file"
    },
    {
        "name": "SplFileInfo::getGroup",
        "url": "splfileinfo.getgroup.php",
        "description": "Gets the file group"
    },
    {
        "name": "SplFileInfo::getLinkTarget",
        "url": "splfileinfo.getlinktarget.php",
        "description": "Gets the target of a link"
    },
    {
        "name": "SplFileInfo::getOwner",
        "url": "splfileinfo.getowner.php",
        "description": "Gets the owner of the file"
    },
    {
        "name": "SplFileInfo::getPathInfo",
        "url": "splfileinfo.getpathinfo.php",
        "description": "Gets an SplFileInfo object for the path"
    },
    {
        "name": "SplFileInfo::getPerms",
        "url": "splfileinfo.getperms.php",
        "description": "Gets file permissions"
    },
    {
        "name": "SplFileInfo::getSize",
        "url": "splfileinfo.getsize.php",
        "description": "Gets file size"
    },
    {
        "name": "SplFileInfo::isDir",
        "url": "splfileinfo.isdir.php",
        "description": "Tells if the file is a directory"
    },
    {
        "name": "SplFileInfo::isFile",
        "url": "splfileinfo.isfile.php",
        "description": "Tells if the object references a regular file"
    },
    {
        "name": "SplFileInfo::isReadable",
        "url": "splfileinfo.isreadable.php",
        "description": "Tells if file is readable"
    },
    {
        "name": "SplFileInfo::openFile",
        "url": "splfileinfo.openfile.php",
        "description": "Gets an SplFileObject object for the file"
    },
    {
        "name": "SplFileInfo::setInfoClass",
        "url": "splfileinfo.setinfoclass.php",
        "description": "Sets the class used with SplFileInfo::getFileInfo and SplFileInfo::getPathInfo"
    },
    {
        "name": "SplFileInfo::__toString",
        "url": "splfileinfo.tostring.php",
        "description": "Returns the path to the file as a string"
    },
    {
        "name": "SplFileObject::eof",
        "url": "splfileobject.eof.php",
        "description": "Reached end of file"
    },
    {
        "name": "SplFileObject::fgetc",
        "url": "splfileobject.fgetc.php",
        "description": "Gets character from file"
    },
    {
        "name": "SplFileObject::fgets",
        "url": "splfileobject.fgets.php",
        "description": "Gets line from file"
    },
    {
        "name": "SplFileObject::flock",
        "url": "splfileobject.flock.php",
        "description": "Portable file locking"
    },
    {
        "name": "SplFileObject::fputcsv",
        "url": "splfileobject.fputcsv.php",
        "description": "Write a field array as a CSV line"
    },
    {
        "name": "SplFileObject::fscanf",
        "url": "splfileobject.fscanf.php",
        "description": "Parses input from file according to a format"
    },
    {
        "name": "SplFileObject::fstat",
        "url": "splfileobject.fstat.php",
        "description": "Gets information about the file"
    },
    {
        "name": "SplFileObject::ftruncate",
        "url": "splfileobject.ftruncate.php",
        "description": "Truncates the file to a given length"
    },
    {
        "name": "SplFileObject::getChildren",
        "url": "splfileobject.getchildren.php",
        "description": "No purpose"
    },
    {
        "name": "SplFileObject::getCurrentLine",
        "url": "splfileobject.getcurrentline.php",
        "description": "Alias of SplFileObject::fgets"
    },
    {
        "name": "SplFileObject::getMaxLineLen",
        "url": "splfileobject.getmaxlinelen.php",
        "description": "Get maximum line length"
    },
    {
        "name": "SplFileObject::key",
        "url": "splfileobject.key.php",
        "description": "Get line number"
    },
    {
        "name": "SplFileObject::rewind",
        "url": "splfileobject.rewind.php",
        "description": "Rewind the file to the first line"
    },
    {
        "name": "SplFileObject::setCsvControl",
        "url": "splfileobject.setcsvcontrol.php",
        "description": "Set the delimiter, enclosure and escape character for CSV"
    },
    {
        "name": "SplFileObject::setMaxLineLen",
        "url": "splfileobject.setmaxlinelen.php",
        "description": "Set maximum line length"
    },
    {
        "name": "SplFileObject::__construct",
        "url": "splfileobject.construct.php",
        "description": "Construct a new file object"
    },
    {
        "name": "SplFixedArray::count",
        "url": "splfixedarray.count.php",
        "description": "Returns the size of the array"
    },
    {
        "name": "SplFixedArray::fromArray",
        "url": "splfixedarray.fromarray.php",
        "description": "Import a PHP array in a SplFixedArray instance"
    },
    {
        "name": "SplFixedArray::getSize",
        "url": "splfixedarray.getsize.php",
        "description": "Gets the size of the array"
    },
    {
        "name": "SplFixedArray::key",
        "url": "splfixedarray.key.php",
        "description": "Return current array index"
    },
    {
        "name": "SplFixedArray::offsetExists",
        "url": "splfixedarray.offsetexists.php",
        "description": "Returns whether the requested index exists"
    },
    {
        "name": "SplFixedArray::offsetSet",
        "url": "splfixedarray.offsetset.php",
        "description": "Sets a new value at a specified index"
    },
    {
        "name": "SplFixedArray::rewind",
        "url": "splfixedarray.rewind.php",
        "description": "Rewind iterator back to the start"
    },
    {
        "name": "SplFixedArray::toArray",
        "url": "splfixedarray.toarray.php",
        "description": "Returns a PHP array from the fixed array"
    },
    {
        "name": "SplFixedArray::__construct",
        "url": "splfixedarray.construct.php",
        "description": "Constructs a new fixed array"
    },
    {
        "name": "SplFixedArray::__unserialize",
        "url": "splfixedarray.unserialize.php",
        "description": "Deserializes the data parameter into an SplFixedArray object"
    },
    {
        "name": "SplHeap::compare",
        "url": "splheap.compare.php",
        "description": "Compare elements in order to place them correctly in the heap while sifting up"
    },
    {
        "name": "SplHeap::current",
        "url": "splheap.current.php",
        "description": "Return current node pointed by the iterator"
    },
    {
        "name": "SplHeap::insert",
        "url": "splheap.insert.php",
        "description": "Inserts an element in the heap by sifting it up"
    },
    {
        "name": "SplHeap::isEmpty",
        "url": "splheap.isempty.php",
        "description": "Checks whether the heap is empty"
    },
    {
        "name": "SplHeap::next",
        "url": "splheap.next.php",
        "description": "Move to the next node"
    },
    {
        "name": "SplHeap::rewind",
        "url": "splheap.rewind.php",
        "description": "Rewind iterator back to the start (no-op)"
    },
    {
        "name": "SplHeap::valid",
        "url": "splheap.valid.php",
        "description": "Check whether the heap contains more nodes"
    },
    {
        "name": "SplMinHeap::compare",
        "url": "splminheap.compare.php",
        "description": "Compare elements in order to place them correctly in the heap while sifting up"
    },
    {
        "name": "SplObjectStorage::attach",
        "url": "splobjectstorage.attach.php",
        "description": "Adds an object in the storage"
    },
    {
        "name": "SplObjectStorage::count",
        "url": "splobjectstorage.count.php",
        "description": "Returns the number of objects in the storage"
    },
    {
        "name": "SplObjectStorage::detach",
        "url": "splobjectstorage.detach.php",
        "description": "Removes an object from the storage"
    },
    {
        "name": "SplObjectStorage::getInfo",
        "url": "splobjectstorage.getinfo.php",
        "description": "Returns the data associated with the current iterator entry"
    },
    {
        "name": "SplObjectStorage::next",
        "url": "splobjectstorage.next.php",
        "description": "Move to the next entry"
    },
    {
        "name": "SplObjectStorage::offsetGet",
        "url": "splobjectstorage.offsetget.php",
        "description": "Returns the data associated with an object"
    },
    {
        "name": "SplObjectStorage::offsetUnset",
        "url": "splobjectstorage.offsetunset.php",
        "description": "Removes an object from the storage"
    },
    {
        "name": "SplObjectStorage::removeAllExcept",
        "url": "splobjectstorage.removeallexcept.php",
        "description": "Removes all objects except for those contained in another storage from the current storage"
    },
    {
        "name": "SplObjectStorage::serialize",
        "url": "splobjectstorage.serialize.php",
        "description": "Serializes the storage"
    },
    {
        "name": "SplObjectStorage::unserialize",
        "url": "splobjectstorage.unserialize.php",
        "description": "Unserializes a storage from its string representation"
    },
    {
        "name": "SplObserver::update",
        "url": "splobserver.update.php",
        "description": "Receive update from subject"
    },
    {
        "name": "SplPriorityQueue::count",
        "url": "splpriorityqueue.count.php",
        "description": "Counts the number of elements in the queue"
    },
    {
        "name": "SplPriorityQueue::extract",
        "url": "splpriorityqueue.extract.php",
        "description": "Extracts a node from top of the heap and sift up"
    },
    {
        "name": "SplPriorityQueue::insert",
        "url": "splpriorityqueue.insert.php",
        "description": "Inserts an element in the queue by sifting it up"
    },
    {
        "name": "SplPriorityQueue::isEmpty",
        "url": "splpriorityqueue.isempty.php",
        "description": "Checks whether the queue is empty"
    },
    {
        "name": "SplPriorityQueue::next",
        "url": "splpriorityqueue.next.php",
        "description": "Move to the next node"
    },
    {
        "name": "SplPriorityQueue::rewind",
        "url": "splpriorityqueue.rewind.php",
        "description": "Rewind iterator back to the start (no-op)"
    },
    {
        "name": "SplPriorityQueue::top",
        "url": "splpriorityqueue.top.php",
        "description": "Peeks at the node from the top of the queue"
    },
    {
        "name": "SplQueue::dequeue",
        "url": "splqueue.dequeue.php",
        "description": "Dequeues a node from the queue"
    },
    {
        "name": "SplSubject::attach",
        "url": "splsubject.attach.php",
        "description": "Attach an SplObserver"
    },
    {
        "name": "SplSubject::notify",
        "url": "splsubject.notify.php",
        "description": "Notify an observer"
    },
    {
        "name": "spl_autoload",
        "url": "function.spl-autoload.php",
        "description": "Default implementation for __autoload()"
    },
    {
        "name": "spl_autoload_extensions",
        "url": "function.spl-autoload-extensions.php",
        "description": "Register and return default file extensions for spl_autoload"
    },
    {
        "name": "spl_autoload_register",
        "url": "function.spl-autoload-register.php",
        "description": "Register given function as __autoload() implementation"
    },
    {
        "name": "spl_classes",
        "url": "function.spl-classes.php",
        "description": "Return available SPL classes"
    },
    {
        "name": "spl_object_id",
        "url": "function.spl-object-id.php",
        "description": "Return the integer object handle for given object"
    },
    {
        "name": "Spoofchecker::isSuspicious",
        "url": "spoofchecker.issuspicious.php",
        "description": "Checks if a given text contains any suspicious characters"
    },
    {
        "name": "Spoofchecker::setChecks",
        "url": "spoofchecker.setchecks.php",
        "description": "Set the checks to run"
    },
    {
        "name": "Spoofchecker::__construct",
        "url": "spoofchecker.construct.php",
        "description": "Constructor"
    },
    {
        "name": "SQLite3::backup",
        "url": "sqlite3.backup.php",
        "description": "Backup one database to another database"
    },
    {
        "name": "SQLite3::changes",
        "url": "sqlite3.changes.php",
        "description": "Returns the number of database rows that were changed (or inserted or    deleted) by the most recent SQL statement"
    },
    {
        "name": "SQLite3::close",
        "url": "sqlite3.close.php",
        "description": "Closes the database connection"
    },
    {
        "name": "SQLite3::createCollation",
        "url": "sqlite3.createcollation.php",
        "description": "Registers a PHP function for use as an SQL collating function"
    },
    {
        "name": "SQLite3::enableExceptions",
        "url": "sqlite3.enableexceptions.php",
        "description": "Enable throwing exceptions"
    },
    {
        "name": "SQLite3::exec",
        "url": "sqlite3.exec.php",
        "description": "Executes a result-less query against a given database"
    },
    {
        "name": "SQLite3::lastErrorMsg",
        "url": "sqlite3.lasterrormsg.php",
        "description": "Returns English text describing the most recent failed SQLite request"
    },
    {
        "name": "SQLite3::loadExtension",
        "url": "sqlite3.loadextension.php",
        "description": "Attempts to load an SQLite extension library"
    },
    {
        "name": "SQLite3::openBlob",
        "url": "sqlite3.openblob.php",
        "description": "Opens a stream resource to read a BLOB"
    },
    {
        "name": "SQLite3::query",
        "url": "sqlite3.query.php",
        "description": "Executes an SQL query"
    },
    {
        "name": "SQLite3::setAuthorizer",
        "url": "sqlite3.setauthorizer.php",
        "description": "Configures a callback to be used as an authorizer to limit what a statement can do"
    },
    {
        "name": "SQLite3::__construct",
        "url": "sqlite3.construct.php",
        "description": "Instantiates an SQLite3 object and opens an SQLite 3 database"
    },
    {
        "name": "SQLite3Result::columnType",
        "url": "sqlite3result.columntype.php",
        "description": "Returns the type of the nth column"
    },
    {
        "name": "SQLite3Result::finalize",
        "url": "sqlite3result.finalize.php",
        "description": "Closes the result set"
    },
    {
        "name": "SQLite3Result::reset",
        "url": "sqlite3result.reset.php",
        "description": "Resets the result set back to the first row"
    },
    {
        "name": "SQLite3Stmt::bindParam",
        "url": "sqlite3stmt.bindparam.php",
        "description": "Binds a parameter to a statement variable"
    },
    {
        "name": "SQLite3Stmt::clear",
        "url": "sqlite3stmt.clear.php",
        "description": "Clears all current bound parameters"
    },
    {
        "name": "SQLite3Stmt::execute",
        "url": "sqlite3stmt.execute.php",
        "description": "Executes a prepared statement and returns a result set object"
    },
    {
        "name": "SQLite3Stmt::paramCount",
        "url": "sqlite3stmt.paramcount.php",
        "description": "Returns the number of parameters within the prepared statement"
    },
    {
        "name": "SQLite3Stmt::reset",
        "url": "sqlite3stmt.reset.php",
        "description": "Resets the prepared statement"
    },
    {
        "name": "sqlsrv_begin_transaction",
        "url": "function.sqlsrv-begin-transaction.php",
        "description": "Begins a database transaction"
    },
    {
        "name": "sqlsrv_client_info",
        "url": "function.sqlsrv-client-info.php",
        "description": "Returns information about the client and specified connection"
    },
    {
        "name": "sqlsrv_commit",
        "url": "function.sqlsrv-commit.php",
        "description": "Commits a transaction that was begun with sqlsrv_begin_transaction"
    },
    {
        "name": "sqlsrv_connect",
        "url": "function.sqlsrv-connect.php",
        "description": "Opens a connection to a Microsoft SQL Server database"
    },
    {
        "name": "sqlsrv_execute",
        "url": "function.sqlsrv-execute.php",
        "description": "Executes a statement prepared with sqlsrv_prepare"
    },
    {
        "name": "sqlsrv_fetch_array",
        "url": "function.sqlsrv-fetch-array.php",
        "description": "Returns a row as an array"
    },
    {
        "name": "sqlsrv_field_metadata",
        "url": "function.sqlsrv-field-metadata.php",
        "description": "Retrieves metadata for the fields of a statement prepared by    sqlsrv_prepare or sqlsrv_query"
    },
    {
        "name": "sqlsrv_free_stmt",
        "url": "function.sqlsrv-free-stmt.php",
        "description": "Frees all resources for the specified statement"
    },
    {
        "name": "sqlsrv_get_field",
        "url": "function.sqlsrv-get-field.php",
        "description": "Gets field data from the currently selected row"
    },
    {
        "name": "sqlsrv_next_result",
        "url": "function.sqlsrv-next-result.php",
        "description": "Makes the next result of the specified statement active"
    },
    {
        "name": "sqlsrv_num_rows",
        "url": "function.sqlsrv-num-rows.php",
        "description": "Retrieves the number of rows in a result set"
    },
    {
        "name": "sqlsrv_query",
        "url": "function.sqlsrv-query.php",
        "description": "Prepares and executes a query"
    },
    {
        "name": "sqlsrv_rows_affected",
        "url": "function.sqlsrv-rows-affected.php",
        "description": "Returns the number of rows modified by the last INSERT, UPDATE, or    DELETE query executed"
    },
    {
        "name": "sqlsrv_send_stream_data",
        "url": "function.sqlsrv-send-stream-data.php",
        "description": "Sends data from parameter streams to the server"
    },
    {
        "name": "SqlStatement::bind",
        "url": "mysql-xdevapi-sqlstatement.bind.php",
        "description": "Bind statement parameters"
    },
    {
        "name": "SqlStatement::getNextResult",
        "url": "mysql-xdevapi-sqlstatement.getnextresult.php",
        "description": "Get next result"
    },
    {
        "name": "SqlStatement::hasMoreResults",
        "url": "mysql-xdevapi-sqlstatement.hasmoreresults.php",
        "description": "Check for more results"
    },
    {
        "name": "SqlStatementResult::fetchAll",
        "url": "mysql-xdevapi-sqlstatementresult.fetchall.php",
        "description": "Get all rows from result"
    },
    {
        "name": "SqlStatementResult::getAffectedItemsCount",
        "url": "mysql-xdevapi-sqlstatementresult.getaffecteditemscount.php",
        "description": "Get affected row count"
    },
    {
        "name": "SqlStatementResult::getColumns",
        "url": "mysql-xdevapi-sqlstatementresult.getcolumns.php",
        "description": "Get columns"
    },
    {
        "name": "SqlStatementResult::getGeneratedIds",
        "url": "mysql-xdevapi-sqlstatementresult.getgeneratedids.php",
        "description": "Get generated ids"
    },
    {
        "name": "SqlStatementResult::getWarnings",
        "url": "mysql-xdevapi-sqlstatementresult.getwarnings.php",
        "description": "Get warnings from last operation"
    },
    {
        "name": "SqlStatementResult::hasData",
        "url": "mysql-xdevapi-sqlstatementresult.hasdata.php",
        "description": "Check if result has data"
    },
    {
        "name": "SqlStatementResult::__construct",
        "url": "mysql-xdevapi-sqlstatementresult.construct.php",
        "description": "Description constructor"
    },
    {
        "name": "srand",
        "url": "function.srand.php",
        "description": "Seed the random number generator"
    },
    {
        "name": "ssdeep_fuzzy_compare",
        "url": "function.ssdeep-fuzzy-compare.php",
        "description": "Calculates the match score between two fuzzy hash signatures"
    },
    {
        "name": "ssdeep_fuzzy_hash_filename",
        "url": "function.ssdeep-fuzzy-hash-filename.php",
        "description": "Create a fuzzy hash from a file"
    },
    {
        "name": "ssh2_auth_agent",
        "url": "function.ssh2-auth-agent.php",
        "description": "Authenticate over SSH using the ssh agent"
    },
    {
        "name": "ssh2_auth_none",
        "url": "function.ssh2-auth-none.php",
        "description": "Authenticate as &quot;none&quot;"
    },
    {
        "name": "ssh2_auth_pubkey_file",
        "url": "function.ssh2-auth-pubkey-file.php",
        "description": "Authenticate using a public key"
    },
    {
        "name": "ssh2_disconnect",
        "url": "function.ssh2-disconnect.php",
        "description": "Close a connection to a remote SSH server"
    },
    {
        "name": "ssh2_fetch_stream",
        "url": "function.ssh2-fetch-stream.php",
        "description": "Fetch an extended data stream"
    },
    {
        "name": "ssh2_forward_accept",
        "url": "function.ssh2-forward-accept.php",
        "description": "Accept a connection created by a listener"
    },
    {
        "name": "ssh2_methods_negotiated",
        "url": "function.ssh2-methods-negotiated.php",
        "description": "Return list of negotiated methods"
    },
    {
        "name": "ssh2_publickey_add",
        "url": "function.ssh2-publickey-add.php",
        "description": "Add an authorized publickey"
    },
    {
        "name": "ssh2_publickey_list",
        "url": "function.ssh2-publickey-list.php",
        "description": "List currently authorized publickeys"
    },
    {
        "name": "ssh2_scp_recv",
        "url": "function.ssh2-scp-recv.php",
        "description": "Request a file via SCP"
    },
    {
        "name": "ssh2_send_eof",
        "url": "function.ssh2-send-eof.php",
        "description": "Send EOF to stream"
    },
    {
        "name": "ssh2_sftp_chmod",
        "url": "function.ssh2-sftp-chmod.php",
        "description": "Changes file mode"
    },
    {
        "name": "ssh2_sftp_mkdir",
        "url": "function.ssh2-sftp-mkdir.php",
        "description": "Create a directory"
    },
    {
        "name": "ssh2_sftp_realpath",
        "url": "function.ssh2-sftp-realpath.php",
        "description": "Resolve the realpath of a provided path string"
    },
    {
        "name": "ssh2_sftp_rmdir",
        "url": "function.ssh2-sftp-rmdir.php",
        "description": "Remove a directory"
    },
    {
        "name": "ssh2_sftp_symlink",
        "url": "function.ssh2-sftp-symlink.php",
        "description": "Create a symlink"
    },
    {
        "name": "ssh2_shell",
        "url": "function.ssh2-shell.php",
        "description": "Request an interactive shell"
    },
    {
        "name": "SSL context options",
        "url": "context.ssl.php",
        "description": "SSL context option listing"
    },
    {
        "name": "Statement::getNextResult",
        "url": "mysql-xdevapi-statement.getnextresult.php",
        "description": "Get next result"
    },
    {
        "name": "Statement::hasMoreResults",
        "url": "mysql-xdevapi-statement.hasmoreresults.php",
        "description": "Check if more results"
    },
    {
        "name": "stats_absolute_deviation",
        "url": "function.stats-absolute-deviation.php",
        "description": "Returns the absolute deviation of an array of values"
    },
    {
        "name": "stats_cdf_binomial",
        "url": "function.stats-cdf-binomial.php",
        "description": "Calculates any one parameter of the binomial distribution given values for the others"
    },
    {
        "name": "stats_cdf_chisquare",
        "url": "function.stats-cdf-chisquare.php",
        "description": "Calculates any one parameter of the chi-square distribution given values for the others"
    },
    {
        "name": "stats_cdf_f",
        "url": "function.stats-cdf-f.php",
        "description": "Calculates any one parameter of the F distribution given values for the others"
    },
    {
        "name": "stats_cdf_laplace",
        "url": "function.stats-cdf-laplace.php",
        "description": "Calculates any one parameter of the Laplace distribution given values for the others"
    },
    {
        "name": "stats_cdf_negative_binomial",
        "url": "function.stats-cdf-negative-binomial.php",
        "description": "Calculates any one parameter of the negative binomial distribution given values for the others"
    },
    {
        "name": "stats_cdf_noncentral_f",
        "url": "function.stats-cdf-noncentral-f.php",
        "description": "Calculates any one parameter of the non-central F distribution given values for the others"
    },
    {
        "name": "stats_cdf_normal",
        "url": "function.stats-cdf-normal.php",
        "description": "Calculates any one parameter of the normal distribution given values for the others"
    },
    {
        "name": "stats_cdf_t",
        "url": "function.stats-cdf-t.php",
        "description": "Calculates any one parameter of the t-distribution given values for the others"
    },
    {
        "name": "stats_cdf_weibull",
        "url": "function.stats-cdf-weibull.php",
        "description": "Calculates any one parameter of the Weibull distribution given values for the others"
    },
    {
        "name": "stats_dens_beta",
        "url": "function.stats-dens-beta.php",
        "description": "Probability density function of the beta distribution"
    },
    {
        "name": "stats_dens_chisquare",
        "url": "function.stats-dens-chisquare.php",
        "description": "Probability density function of the chi-square distribution"
    },
    {
        "name": "stats_dens_f",
        "url": "function.stats-dens-f.php",
        "description": "Probability density function of the F distribution"
    },
    {
        "name": "stats_dens_laplace",
        "url": "function.stats-dens-laplace.php",
        "description": "Probability density function of the Laplace distribution"
    },
    {
        "name": "stats_dens_normal",
        "url": "function.stats-dens-normal.php",
        "description": "Probability density function of the normal distribution"
    },
    {
        "name": "stats_dens_pmf_hypergeometric",
        "url": "function.stats-dens-pmf-hypergeometric.php",
        "description": "Probability mass function of the hypergeometric distribution"
    },
    {
        "name": "stats_dens_pmf_poisson",
        "url": "function.stats-dens-pmf-poisson.php",
        "description": "Probability mass function of the Poisson distribution"
    },
    {
        "name": "stats_dens_uniform",
        "url": "function.stats-dens-uniform.php",
        "description": "Probability density function of the uniform distribution"
    },
    {
        "name": "stats_harmonic_mean",
        "url": "function.stats-harmonic-mean.php",
        "description": "Returns the harmonic mean of an array of values"
    },
    {
        "name": "stats_rand_gen_beta",
        "url": "function.stats-rand-gen-beta.php",
        "description": "Generates a random deviate from the beta distribution"
    },
    {
        "name": "stats_rand_gen_exponential",
        "url": "function.stats-rand-gen-exponential.php",
        "description": "Generates a random deviate from the exponential distribution"
    },
    {
        "name": "stats_rand_gen_funiform",
        "url": "function.stats-rand-gen-funiform.php",
        "description": "Generates uniform float between low (exclusive) and high (exclusive)"
    },
    {
        "name": "stats_rand_gen_ibinomial",
        "url": "function.stats-rand-gen-ibinomial.php",
        "description": "Generates a random deviate from the binomial distribution"
    },
    {
        "name": "stats_rand_gen_int",
        "url": "function.stats-rand-gen-int.php",
        "description": "Generates random integer between 1 and 2147483562"
    },
    {
        "name": "stats_rand_gen_iuniform",
        "url": "function.stats-rand-gen-iuniform.php",
        "description": "Generates integer uniformly distributed between LOW (inclusive) and HIGH (inclusive)"
    },
    {
        "name": "stats_rand_gen_noncentral_f",
        "url": "function.stats-rand-gen-noncentral-f.php",
        "description": "Generates a random deviate from the noncentral F distribution"
    },
    {
        "name": "stats_rand_gen_normal",
        "url": "function.stats-rand-gen-normal.php",
        "description": "Generates a single random deviate from a normal distribution"
    },
    {
        "name": "stats_rand_get_seeds",
        "url": "function.stats-rand-get-seeds.php",
        "description": "Get the seed values of the random number generator"
    },
    {
        "name": "stats_rand_ranf",
        "url": "function.stats-rand-ranf.php",
        "description": "Generates a random floating point number between 0 and 1"
    },
    {
        "name": "stats_skew",
        "url": "function.stats-skew.php",
        "description": "Computes the skewness of the data in the array"
    },
    {
        "name": "stats_stat_binomial_coef",
        "url": "function.stats-stat-binomial-coef.php",
        "description": "Returns a binomial coefficient"
    },
    {
        "name": "stats_stat_factorial",
        "url": "function.stats-stat-factorial.php",
        "description": "Returns the factorial of an integer"
    },
    {
        "name": "stats_stat_innerproduct",
        "url": "function.stats-stat-innerproduct.php",
        "description": "Returns the inner product of two vectors"
    },
    {
        "name": "stats_stat_percentile",
        "url": "function.stats-stat-percentile.php",
        "description": "Returns the percentile value"
    },
    {
        "name": "stats_variance",
        "url": "function.stats-variance.php",
        "description": "Returns the variance"
    },
    {
        "name": "Stomp::ack",
        "url": "stomp.ack.php",
        "description": "Acknowledges consumption of a message"
    },
    {
        "name": "Stomp::commit",
        "url": "stomp.commit.php",
        "description": "Commits a transaction in progress"
    },
    {
        "name": "Stomp::getReadTimeout",
        "url": "stomp.getreadtimeout.php",
        "description": "Gets read timeout"
    },
    {
        "name": "Stomp::hasFrame",
        "url": "stomp.hasframe.php",
        "description": "Indicates whether or not there is a frame ready to read"
    },
    {
        "name": "Stomp::send",
        "url": "stomp.send.php",
        "description": "Sends a message"
    },
    {
        "name": "Stomp::subscribe",
        "url": "stomp.subscribe.php",
        "description": "Registers to listen to a given destination"
    },
    {
        "name": "Stomp::__construct",
        "url": "stomp.construct.php",
        "description": "Opens a connection"
    },
    {
        "name": "StompException::getDetails",
        "url": "stomp.getdetails.php",
        "description": "Get exception details"
    },
    {
        "name": "stomp_connect_error",
        "url": "function.stomp-connect-error.php",
        "description": "Returns a string description of the last connect error"
    },
    {
        "name": "strcasecmp",
        "url": "function.strcasecmp.php",
        "description": "Binary safe case-insensitive string comparison"
    },
    {
        "name": "strcmp",
        "url": "function.strcmp.php",
        "description": "Binary safe string comparison"
    },
    {
        "name": "strcspn",
        "url": "function.strcspn.php",
        "description": "Find length of initial segment not matching mask"
    },
    {
        "name": "streamWrapper::dir_opendir",
        "url": "streamwrapper.dir-opendir.php",
        "description": "Open directory handle"
    },
    {
        "name": "streamWrapper::dir_rewinddir",
        "url": "streamwrapper.dir-rewinddir.php",
        "description": "Rewind directory handle"
    },
    {
        "name": "streamWrapper::rename",
        "url": "streamwrapper.rename.php",
        "description": "Renames a file or directory"
    },
    {
        "name": "streamWrapper::stream_cast",
        "url": "streamwrapper.stream-cast.php",
        "description": "Retrieve the underlaying resource"
    },
    {
        "name": "streamWrapper::stream_eof",
        "url": "streamwrapper.stream-eof.php",
        "description": "Tests for end-of-file on a file pointer"
    },
    {
        "name": "streamWrapper::stream_lock",
        "url": "streamwrapper.stream-lock.php",
        "description": "Advisory file locking"
    },
    {
        "name": "streamWrapper::stream_open",
        "url": "streamwrapper.stream-open.php",
        "description": "Opens file or URL"
    },
    {
        "name": "streamWrapper::stream_seek",
        "url": "streamwrapper.stream-seek.php",
        "description": "Seeks to specific location in a stream"
    },
    {
        "name": "streamWrapper::stream_stat",
        "url": "streamwrapper.stream-stat.php",
        "description": "Retrieve information about a file resource"
    },
    {
        "name": "streamWrapper::stream_truncate",
        "url": "streamwrapper.stream-truncate.php",
        "description": "Truncate stream"
    },
    {
        "name": "streamWrapper::unlink",
        "url": "streamwrapper.unlink.php",
        "description": "Delete a file"
    },
    {
        "name": "streamWrapper::__construct",
        "url": "streamwrapper.construct.php",
        "description": "Constructs a new stream wrapper"
    },
    {
        "name": "stream_bucket_append",
        "url": "function.stream-bucket-append.php",
        "description": "Append bucket to brigade"
    },
    {
        "name": "stream_bucket_new",
        "url": "function.stream-bucket-new.php",
        "description": "Create a new bucket for use on the current stream"
    },
    {
        "name": "stream_context_create",
        "url": "function.stream-context-create.php",
        "description": "Creates a stream context"
    },
    {
        "name": "stream_context_get_options",
        "url": "function.stream-context-get-options.php",
        "description": "Retrieve options for a stream\/wrapper\/context"
    },
    {
        "name": "stream_context_set_default",
        "url": "function.stream-context-set-default.php",
        "description": "Set the default stream context"
    },
    {
        "name": "stream_context_set_options",
        "url": "function.stream-context-set-options.php",
        "description": "Sets options on the specified context"
    },
    {
        "name": "stream_copy_to_stream",
        "url": "function.stream-copy-to-stream.php",
        "description": "Copies data from one stream to another"
    },
    {
        "name": "stream_filter_prepend",
        "url": "function.stream-filter-prepend.php",
        "description": "Attach a filter to a stream"
    },
    {
        "name": "stream_filter_remove",
        "url": "function.stream-filter-remove.php",
        "description": "Remove a filter from a stream"
    },
    {
        "name": "stream_get_filters",
        "url": "function.stream-get-filters.php",
        "description": "Retrieve list of registered filters"
    },
    {
        "name": "stream_get_meta_data",
        "url": "function.stream-get-meta-data.php",
        "description": "Retrieves header\/meta data from streams\/file pointers"
    },
    {
        "name": "stream_get_wrappers",
        "url": "function.stream-get-wrappers.php",
        "description": "Retrieve list of registered streams"
    },
    {
        "name": "stream_is_local",
        "url": "function.stream-is-local.php",
        "description": "Checks if a stream is a local stream"
    },
    {
        "name": "stream_register_wrapper",
        "url": "function.stream-register-wrapper.php",
        "description": "Alias of stream_wrapper_register"
    },
    {
        "name": "stream_select",
        "url": "function.stream-select.php",
        "description": "Runs the equivalent of the select() system call on the given    arrays of streams with a timeout specified by seconds and microseconds"
    },
    {
        "name": "stream_set_blocking",
        "url": "function.stream-set-blocking.php",
        "description": "Set blocking\/non-blocking mode on a stream"
    },
    {
        "name": "stream_set_read_buffer",
        "url": "function.stream-set-read-buffer.php",
        "description": "Set read file buffering on the given stream"
    },
    {
        "name": "stream_set_write_buffer",
        "url": "function.stream-set-write-buffer.php",
        "description": "Sets write file buffering on the given stream"
    },
    {
        "name": "stream_socket_client",
        "url": "function.stream-socket-client.php",
        "description": "Open Internet or Unix domain socket connection"
    },
    {
        "name": "stream_socket_get_name",
        "url": "function.stream-socket-get-name.php",
        "description": "Retrieve the name of the local or remote sockets"
    },
    {
        "name": "stream_socket_recvfrom",
        "url": "function.stream-socket-recvfrom.php",
        "description": "Receives data from a socket, connected or not"
    },
    {
        "name": "stream_socket_server",
        "url": "function.stream-socket-server.php",
        "description": "Create an Internet or Unix domain server socket"
    },
    {
        "name": "stream_supports_lock",
        "url": "function.stream-supports-lock.php",
        "description": "Tells whether the stream supports locking"
    },
    {
        "name": "stream_wrapper_restore",
        "url": "function.stream-wrapper-restore.php",
        "description": "Restores a previously unregistered built-in wrapper"
    },
    {
        "name": "strftime",
        "url": "function.strftime.php",
        "description": "Format a local time\/date according to locale settings"
    },
    {
        "name": "stripcslashes",
        "url": "function.stripcslashes.php",
        "description": "Un-quote string quoted with addcslashes"
    },
    {
        "name": "stripslashes",
        "url": "function.stripslashes.php",
        "description": "Un-quotes a quoted string"
    },
    {
        "name": "stristr",
        "url": "function.stristr.php",
        "description": "Case-insensitive strstr"
    },
    {
        "name": "strnatcasecmp",
        "url": "function.strnatcasecmp.php",
        "description": "Case insensitive string comparisons using a &quot;natural order&quot; algorithm"
    },
    {
        "name": "strncasecmp",
        "url": "function.strncasecmp.php",
        "description": "Binary safe case-insensitive string comparison of the first n characters"
    },
    {
        "name": "strpbrk",
        "url": "function.strpbrk.php",
        "description": "Search a string for any of a set of characters"
    },
    {
        "name": "strptime",
        "url": "function.strptime.php",
        "description": "Parse a time\/date generated with strftime"
    },
    {
        "name": "strrev",
        "url": "function.strrev.php",
        "description": "Reverse a string"
    },
    {
        "name": "strrpos",
        "url": "function.strrpos.php",
        "description": "Find the position of the last occurrence of a substring in a string"
    },
    {
        "name": "strstr",
        "url": "function.strstr.php",
        "description": "Find the first occurrence of a string"
    },
    {
        "name": "strtolower",
        "url": "function.strtolower.php",
        "description": "Make a string lowercase"
    },
    {
        "name": "strtoupper",
        "url": "function.strtoupper.php",
        "description": "Make a string uppercase"
    },
    {
        "name": "strval",
        "url": "function.strval.php",
        "description": "Get string value of a variable"
    },
    {
        "name": "str_decrement",
        "url": "function.str-decrement.php",
        "description": "Decrement an alphanumeric string"
    },
    {
        "name": "str_getcsv",
        "url": "function.str-getcsv.php",
        "description": "Parse a CSV string into an array"
    },
    {
        "name": "str_ireplace",
        "url": "function.str-ireplace.php",
        "description": "Case-insensitive version of str_replace"
    },
    {
        "name": "str_repeat",
        "url": "function.str-repeat.php",
        "description": "Repeat a string"
    },
    {
        "name": "str_rot13",
        "url": "function.str-rot13.php",
        "description": "Perform the rot13 transform on a string"
    },
    {
        "name": "str_split",
        "url": "function.str-split.php",
        "description": "Convert a string to an array"
    },
    {
        "name": "str_word_count",
        "url": "function.str-word-count.php",
        "description": "Return information about words used in a string"
    },
    {
        "name": "substr_compare",
        "url": "function.substr-compare.php",
        "description": "Binary safe comparison of two strings from an offset, up to length characters"
    },
    {
        "name": "substr_replace",
        "url": "function.substr-replace.php",
        "description": "Replace text within a portion of a string"
    },
    {
        "name": "SVM::getOptions",
        "url": "svm.getoptions.php",
        "description": "Return the current training parameters"
    },
    {
        "name": "SVM::train",
        "url": "svm.train.php",
        "description": "Create a SVMModel based on training data"
    },
    {
        "name": "SVMModel::checkProbabilityModel",
        "url": "svmmodel.checkprobabilitymodel.php",
        "description": "Returns true if the model has probability information"
    },
    {
        "name": "SVMModel::getNrClass",
        "url": "svmmodel.getnrclass.php",
        "description": "Returns the number of classes the model was trained with"
    },
    {
        "name": "SVMModel::getSvrProbability",
        "url": "svmmodel.getsvrprobability.php",
        "description": "Get the sigma value for regression types"
    },
    {
        "name": "SVMModel::predict",
        "url": "svmmodel.predict.php",
        "description": "Predict a value for previously unseen data"
    },
    {
        "name": "SVMModel::save",
        "url": "svmmodel.save.php",
        "description": "Save a model to a file"
    },
    {
        "name": "svn_add",
        "url": "function.svn-add.php",
        "description": "Schedules the addition of an item in a working directory"
    },
    {
        "name": "svn_auth_set_parameter",
        "url": "function.svn-auth-set-parameter.php",
        "description": "Sets an authentication parameter"
    },
    {
        "name": "svn_cat",
        "url": "function.svn-cat.php",
        "description": "Returns the contents of a file in a repository"
    },
    {
        "name": "svn_cleanup",
        "url": "function.svn-cleanup.php",
        "description": "Recursively cleanup a working copy directory, finishing incomplete operations and removing locks"
    },
    {
        "name": "svn_commit",
        "url": "function.svn-commit.php",
        "description": "Sends changes from the local working copy to the repository"
    },
    {
        "name": "svn_diff",
        "url": "function.svn-diff.php",
        "description": "Recursively diffs two paths"
    },
    {
        "name": "svn_fs_abort_txn",
        "url": "function.svn-fs-abort-txn.php",
        "description": "Aborts a transaction"
    },
    {
        "name": "svn_fs_begin_txn2",
        "url": "function.svn-fs-begin-txn2.php",
        "description": "Create a new transaction"
    },
    {
        "name": "svn_fs_check_path",
        "url": "function.svn-fs-check-path.php",
        "description": "Determines what kind of item lives at path in a given repository fsroot"
    },
    {
        "name": "svn_fs_copy",
        "url": "function.svn-fs-copy.php",
        "description": "Copies a file or a directory"
    },
    {
        "name": "svn_fs_dir_entries",
        "url": "function.svn-fs-dir-entries.php",
        "description": "Enumerates the directory entries under path; returns a hash of dir names to file type"
    },
    {
        "name": "svn_fs_file_length",
        "url": "function.svn-fs-file-length.php",
        "description": "Returns the length of a file from a given version of the fs"
    },
    {
        "name": "svn_fs_is_file",
        "url": "function.svn-fs-is-file.php",
        "description": "Determines if a path points to a file"
    },
    {
        "name": "svn_fs_make_file",
        "url": "function.svn-fs-make-file.php",
        "description": "Creates a new empty file"
    },
    {
        "name": "svn_fs_node_prop",
        "url": "function.svn-fs-node-prop.php",
        "description": "Returns the value of a property for a node"
    },
    {
        "name": "svn_fs_revision_prop",
        "url": "function.svn-fs-revision-prop.php",
        "description": "Fetches the value of a named property"
    },
    {
        "name": "svn_fs_txn_root",
        "url": "function.svn-fs-txn-root.php",
        "description": "Creates and returns a transaction root"
    },
    {
        "name": "svn_import",
        "url": "function.svn-import.php",
        "description": "Imports an unversioned path into a repository"
    },
    {
        "name": "svn_ls",
        "url": "function.svn-ls.php",
        "description": "Returns list of directory contents in repository URL, optionally at revision number"
    },
    {
        "name": "svn_repos_create",
        "url": "function.svn-repos-create.php",
        "description": "Create a new subversion repository at path"
    },
    {
        "name": "svn_repos_fs_begin_txn_for_commit",
        "url": "function.svn-repos-fs-begin-txn-for-commit.php",
        "description": "Create a new transaction"
    },
    {
        "name": "svn_repos_hotcopy",
        "url": "function.svn-repos-hotcopy.php",
        "description": "Make a hot-copy of the repos at repospath; copy it to destpath"
    },
    {
        "name": "svn_repos_recover",
        "url": "function.svn-repos-recover.php",
        "description": "Run recovery procedures on the repository located at path"
    },
    {
        "name": "svn_status",
        "url": "function.svn-status.php",
        "description": "Returns the status of working copy files and directories"
    },
    {
        "name": "Swoole\\Async::dnsLookup",
        "url": "swoole-async.dnslookup.php",
        "description": "Async and non-blocking hostname to IP lookup."
    },
    {
        "name": "Swoole\\Async::readFile",
        "url": "swoole-async.readfile.php",
        "description": "Read a file asynchronously."
    },
    {
        "name": "Swoole\\Async::write",
        "url": "swoole-async.write.php",
        "description": "Write data to a file stream asynchronously."
    },
    {
        "name": "Swoole\\Atomic::add",
        "url": "swoole-atomic.add.php",
        "description": "Add a number to the value to the atomic object."
    },
    {
        "name": "Swoole\\Atomic::get",
        "url": "swoole-atomic.get.php",
        "description": "Get the current value of the atomic object."
    },
    {
        "name": "Swoole\\Atomic::sub",
        "url": "swoole-atomic.sub.php",
        "description": "Subtract a number to the value of the atomic object."
    },
    {
        "name": "Swoole\\Buffer::append",
        "url": "swoole-buffer.append.php",
        "description": "Append the string or binary data at the end of the memory buffer and return the new size of memory allocated."
    },
    {
        "name": "Swoole\\Buffer::expand",
        "url": "swoole-buffer.expand.php",
        "description": "Expand the size of memory buffer."
    },
    {
        "name": "Swoole\\Buffer::recycle",
        "url": "swoole-buffer.recycle.php",
        "description": "Release the memory to OS which is not used by the memory buffer."
    },
    {
        "name": "Swoole\\Buffer::write",
        "url": "swoole-buffer.write.php",
        "description": "Write data to the memory buffer. The memory allocated for the buffer will not be changed."
    },
    {
        "name": "Swoole\\Buffer::__destruct",
        "url": "swoole-buffer.destruct.php",
        "description": "Destruct the Swoole memory buffer."
    },
    {
        "name": "Swoole\\Channel::pop",
        "url": "swoole-channel.pop.php",
        "description": "Read and pop data from swoole channel."
    },
    {
        "name": "Swoole\\Channel::stats",
        "url": "swoole-channel.stats.php",
        "description": "Get stats of swoole channel."
    },
    {
        "name": "Swoole\\Channel::__destruct",
        "url": "swoole-channel.destruct.php",
        "description": "Destruct a Swoole channel."
    },
    {
        "name": "Swoole\\Client::connect",
        "url": "swoole-client.connect.php",
        "description": "Connect to the remote TCP or UDP port."
    },
    {
        "name": "Swoole\\Client::getsockname",
        "url": "swoole-client.getsockname.php",
        "description": "Get the local socket name of the connection."
    },
    {
        "name": "Swoole\\Client::on",
        "url": "swoole-client.on.php",
        "description": "Add callback functions triggered by events."
    },
    {
        "name": "Swoole\\Client::pipe",
        "url": "swoole-client.pipe.php",
        "description": "Redirect the data to another file descriptor."
    },
    {
        "name": "Swoole\\Client::resume",
        "url": "swoole-client.resume.php",
        "description": "Resume receiving data."
    },
    {
        "name": "Swoole\\Client::sendfile",
        "url": "swoole-client.sendfile.php",
        "description": "Send file to the remote TCP socket."
    },
    {
        "name": "Swoole\\Client::set",
        "url": "swoole-client.set.php",
        "description": "Set the Swoole client parameters before the connection is established."
    },
    {
        "name": "Swoole\\Client::wakeup",
        "url": "swoole-client.wakeup.php",
        "description": "Add the TCP client back into the system event loop."
    },
    {
        "name": "Swoole\\Client::__destruct",
        "url": "swoole-client.destruct.php",
        "description": "Destruct the Swoole client."
    },
    {
        "name": "Swoole\\Connection\\Iterator::current",
        "url": "swoole-connection-iterator.current.php",
        "description": "Return current connection entry."
    },
    {
        "name": "Swoole\\Connection\\Iterator::next",
        "url": "swoole-connection-iterator.next.php",
        "description": "Move to the next connection."
    },
    {
        "name": "Swoole\\Connection\\Iterator::offsetGet",
        "url": "swoole-connection-iterator.offsetget.php",
        "description": "Offset to retrieve."
    },
    {
        "name": "Swoole\\Connection\\Iterator::offsetUnset",
        "url": "swoole-connection-iterator.offsetunset.php",
        "description": "Unset an offset."
    },
    {
        "name": "Swoole\\Connection\\Iterator::valid",
        "url": "swoole-connection-iterator.valid.php",
        "description": "Check if current position is valid."
    },
    {
        "name": "Swoole\\Coroutine::call_user_func_array",
        "url": "swoole-coroutine.call-user-func-array.php",
        "description": "Call a callback with an array of parameters"
    },
    {
        "name": "Swoole\\Coroutine::create",
        "url": "swoole-coroutine.create.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine::resume",
        "url": "swoole-coroutine.resume.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Client::close",
        "url": "swoole-coroutine-client.close.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Client::getpeername",
        "url": "swoole-coroutine-client.getpeername.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Client::isConnected",
        "url": "swoole-coroutine-client.isconnected.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Client::send",
        "url": "swoole-coroutine-client.send.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Client::sendto",
        "url": "swoole-coroutine-client.sendto.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Client::__construct",
        "url": "swoole-coroutine-client.construct.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::addFile",
        "url": "swoole-coroutine-http-client.addfile.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::execute",
        "url": "swoole-coroutine-http-client.execute.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::getDefer",
        "url": "swoole-coroutine-http-client.getdefer.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::post",
        "url": "swoole-coroutine-http-client.post.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::set",
        "url": "swoole-coroutine-http-client.set.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::setData",
        "url": "swoole-coroutine-http-client.setdata.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::setHeaders",
        "url": "swoole-coroutine-http-client.setheaders.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\Http\\Client::__construct",
        "url": "swoole-coroutine-http-client.construct.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\MySQL::close",
        "url": "swoole-coroutine-mysql.close.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\MySQL::getDefer",
        "url": "swoole-coroutine-mysql.getdefer.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\MySQL::recv",
        "url": "swoole-coroutine-mysql.recv.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Coroutine\\MySQL::__construct",
        "url": "swoole-coroutine-mysql.construct.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Event::add",
        "url": "swoole-event.add.php",
        "description": "Add new callback functions of a socket into the EventLoop."
    },
    {
        "name": "Swoole\\Event::del",
        "url": "swoole-event.del.php",
        "description": "Remove all event callback functions of a socket."
    },
    {
        "name": "Swoole\\Event::set",
        "url": "swoole-event.set.php",
        "description": "Update the event callback functions of a socket."
    },
    {
        "name": "Swoole\\Event::write",
        "url": "swoole-event.write.php",
        "description": "Write data to the socket."
    },
    {
        "name": "Swoole\\Http\\Client::close",
        "url": "swoole-http-client.close.php",
        "description": "Close the http connection."
    },
    {
        "name": "Swoole\\Http\\Client::execute",
        "url": "swoole-http-client.execute.php",
        "description": "Send the HTTP request after setting the parameters."
    },
    {
        "name": "Swoole\\Http\\Client::isConnected",
        "url": "swoole-http-client.isconnected.php",
        "description": "Check if the HTTP connection is connected."
    },
    {
        "name": "Swoole\\Http\\Client::post",
        "url": "swoole-http-client.post.php",
        "description": "Send POST http request to the remote server."
    },
    {
        "name": "Swoole\\Http\\Client::set",
        "url": "swoole-http-client.set.php",
        "description": "Update the HTTP client parameters."
    },
    {
        "name": "Swoole\\Http\\Client::setData",
        "url": "swoole-http-client.setdata.php",
        "description": "Set the HTTP request body data."
    },
    {
        "name": "Swoole\\Http\\Client::setMethod",
        "url": "swoole-http-client.setmethod.php",
        "description": "Set the HTTP request method."
    },
    {
        "name": "Swoole\\Http\\Client::__construct",
        "url": "swoole-http-client.construct.php",
        "description": "Construct the async HTTP client."
    },
    {
        "name": "Swoole\\Http\\Request::rawcontent",
        "url": "swoole-http-request.rawcontent.php",
        "description": "Get the raw HTTP POST body."
    },
    {
        "name": "Swoole\\Http\\Response::cookie",
        "url": "swoole-http-response.cookie.php",
        "description": "Set the cookies of the HTTP response."
    },
    {
        "name": "Swoole\\Http\\Response::gzip",
        "url": "swoole-http-response.gzip.php",
        "description": "Enable the gzip of response content."
    },
    {
        "name": "Swoole\\Http\\Response::initHeader",
        "url": "swoole-http-response.initheader.php",
        "description": "Init the HTTP response header."
    },
    {
        "name": "Swoole\\Http\\Response::sendfile",
        "url": "swoole-http-response.sendfile.php",
        "description": "Send file through the HTTP response."
    },
    {
        "name": "Swoole\\Http\\Response::write",
        "url": "swoole-http-response.write.php",
        "description": "Append HTTP body content to the HTTP response."
    },
    {
        "name": "Swoole\\Http\\Server::on",
        "url": "swoole-http-server.on.php",
        "description": "Bind callback function to HTTP server by event name."
    },
    {
        "name": "Swoole\\Lock::lock",
        "url": "swoole-lock.lock.php",
        "description": "Try to acquire the lock. It will block if the lock is not available."
    },
    {
        "name": "Swoole\\Lock::trylock",
        "url": "swoole-lock.trylock.php",
        "description": "Try to acquire the lock and return straight away even the lock is not available."
    },
    {
        "name": "Swoole\\Lock::unlock",
        "url": "swoole-lock.unlock.php",
        "description": "Release the lock."
    },
    {
        "name": "Swoole\\Lock::__destruct",
        "url": "swoole-lock.destruct.php",
        "description": "Destory a Swoole memory lock."
    },
    {
        "name": "Swoole\\MySQL::close",
        "url": "swoole-mysql.close.php",
        "description": "Close the async MySQL connection."
    },
    {
        "name": "Swoole\\MySQL::getBuffer",
        "url": "swoole-mysql.getbuffer.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\MySQL::query",
        "url": "swoole-mysql.query.php",
        "description": "Run the SQL query."
    },
    {
        "name": "Swoole\\MySQL::__destruct",
        "url": "swoole-mysql.destruct.php",
        "description": "Destory the async MySQL client."
    },
    {
        "name": "Swoole\\Process::close",
        "url": "swoole-process.close.php",
        "description": "Close the pipe to the child process."
    },
    {
        "name": "Swoole\\Process::exec",
        "url": "swoole-process.exec.php",
        "description": "Execute system commands."
    },
    {
        "name": "Swoole\\Process::freeQueue",
        "url": "swoole-process.freequeue.php",
        "description": "Destroy the message queue created by swoole_process::useQueue."
    },
    {
        "name": "Swoole\\Process::name",
        "url": "swoole-process.name.php",
        "description": "Set name of the process."
    },
    {
        "name": "Swoole\\Process::push",
        "url": "swoole-process.push.php",
        "description": "Write and push data into the message queue."
    },
    {
        "name": "Swoole\\Process::signal",
        "url": "swoole-process.signal.php",
        "description": "Send signal to the child processes."
    },
    {
        "name": "Swoole\\Process::statQueue",
        "url": "swoole-process.statqueue.php",
        "description": "Get the stats of the message queue used as the communication method between processes."
    },
    {
        "name": "Swoole\\Process::wait",
        "url": "swoole-process.wait.php",
        "description": "Wait for the events of child processes."
    },
    {
        "name": "Swoole\\Process::__construct",
        "url": "swoole-process.construct.php",
        "description": "Construct a process."
    },
    {
        "name": "Swoole\\Redis\\Server::format",
        "url": "swoole-redis-server.format.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Redis\\Server::start",
        "url": "swoole-redis-server.start.php",
        "description": "Description"
    },
    {
        "name": "Swoole\\Serialize::unpack",
        "url": "swoole-serialize.unpack.php",
        "description": "Unserialize the data."
    },
    {
        "name": "Swoole\\Server::addProcess",
        "url": "swoole-server.addprocess.php",
        "description": "Add a user defined swoole_process to the server."
    },
    {
        "name": "Swoole\\Server::bind",
        "url": "swoole-server.bind.php",
        "description": "Bind the connection to a user defined user ID."
    },
    {
        "name": "Swoole\\Server::close",
        "url": "swoole-server.close.php",
        "description": "Close a connection to the client."
    },
    {
        "name": "Swoole\\Server::connection_info",
        "url": "swoole-server.connection-info.php",
        "description": "Get the connection info by file description."
    },
    {
        "name": "Swoole\\Server::defer",
        "url": "swoole-server.defer.php",
        "description": "Delay execution of the callback function at the end of current EventLoop."
    },
    {
        "name": "Swoole\\Server::finish",
        "url": "swoole-server.finish.php",
        "description": "Used in task process for sending result to the worker process when the task is finished."
    },
    {
        "name": "Swoole\\Server::getClientList",
        "url": "swoole-server.getclientlist.php",
        "description": "Get all of the established connections."
    },
    {
        "name": "Swoole\\Server::heartbeat",
        "url": "swoole-server.heartbeat.php",
        "description": "Check all the connections on the server."
    },
    {
        "name": "Swoole\\Server::on",
        "url": "swoole-server.on.php",
        "description": "Register a callback function by event name."
    },
    {
        "name": "Swoole\\Server::protect",
        "url": "swoole-server.protect.php",
        "description": "Set the connection to be protected mode."
    },
    {
        "name": "Swoole\\Server::resume",
        "url": "swoole-server.resume.php",
        "description": "Start receving data from the connection."
    },
    {
        "name": "Swoole\\Server::sendfile",
        "url": "swoole-server.sendfile.php",
        "description": "Send file to the connection."
    },
    {
        "name": "Swoole\\Server::sendto",
        "url": "swoole-server.sendto.php",
        "description": "Send data to the remote UDP address."
    },
    {
        "name": "Swoole\\Server::set",
        "url": "swoole-server.set.php",
        "description": "Set the runtime settings of the swoole server."
    },
    {
        "name": "Swoole\\Server::start",
        "url": "swoole-server.start.php",
        "description": "Start the Swoole server."
    },
    {
        "name": "Swoole\\Server::stop",
        "url": "swoole-server.stop.php",
        "description": "Stop the Swoole server."
    },
    {
        "name": "Swoole\\Server::taskwait",
        "url": "swoole-server.taskwait.php",
        "description": "Send data to the task worker processes in blocking way."
    },
    {
        "name": "Swoole\\Server::tick",
        "url": "swoole-server.tick.php",
        "description": "Repeats a given function at every given time-interval."
    },
    {
        "name": "Swoole\\Server\\Port::on",
        "url": "swoole-server-port.on.php",
        "description": "Register callback functions by event."
    },
    {
        "name": "Swoole\\Server\\Port::__construct",
        "url": "swoole-server-port.construct.php",
        "description": "Construct a server port"
    },
    {
        "name": "Swoole\\Table::column",
        "url": "swoole-table.column.php",
        "description": "Set the data type and size of the columns."
    },
    {
        "name": "Swoole\\Table::create",
        "url": "swoole-table.create.php",
        "description": "Create the swoole memory table."
    },
    {
        "name": "Swoole\\Table::decr",
        "url": "swoole-table.decr.php",
        "description": "Decrement the value in the Swoole table by $row_key and $column_key."
    },
    {
        "name": "Swoole\\Table::destroy",
        "url": "swoole-table.destroy.php",
        "description": "Destroy the Swoole table."
    },
    {
        "name": "Swoole\\Table::get",
        "url": "swoole-table.get.php",
        "description": "Get the value in the Swoole table by $row_key and $column_key."
    },
    {
        "name": "Swoole\\Table::key",
        "url": "swoole-table.key.php",
        "description": "Get the key of current row."
    },
    {
        "name": "Swoole\\Table::rewind",
        "url": "swoole-table.rewind.php",
        "description": "Rewind the iterator."
    },
    {
        "name": "Swoole\\Table::valid",
        "url": "swoole-table.valid.php",
        "description": "Check if the current row is valid."
    },
    {
        "name": "Swoole\\Timer::after",
        "url": "swoole-timer.after.php",
        "description": "Trigger a callback function after a period of time."
    },
    {
        "name": "Swoole\\Timer::exists",
        "url": "swoole-timer.exists.php",
        "description": "Check if a timer is existed."
    },
    {
        "name": "Swoole\\WebSocket\\Server::exist",
        "url": "swoole-websocket-server.exist.php",
        "description": "Check if the file descriptor exists."
    },
    {
        "name": "Swoole\\WebSocket\\Server::pack",
        "url": "swoole-websocket-server.pack.php",
        "description": "Get a pack of binary data to send in a single frame."
    },
    {
        "name": "Swoole\\WebSocket\\Server::unpack",
        "url": "swoole-websocket-server.unpack.php",
        "description": "Unpack the binary data received from the client."
    },
    {
        "name": "swoole_async_read",
        "url": "function.swoole-async-read.php",
        "description": "Read file stream asynchronously"
    },
    {
        "name": "swoole_async_set",
        "url": "function.swoole-async-set.php",
        "description": "Update the async I\/O options"
    },
    {
        "name": "swoole_async_writefile",
        "url": "function.swoole-async-writefile.php",
        "description": "Write data to a file asynchronously"
    },
    {
        "name": "swoole_client_select",
        "url": "function.swoole-client-select.php",
        "description": "Get the file description which are ready to read\/write or error"
    },
    {
        "name": "swoole_errno",
        "url": "function.swoole-errno.php",
        "description": "Get the error code of the latest system call"
    },
    {
        "name": "swoole_event_add",
        "url": "function.swoole-event-add.php",
        "description": "Add new callback functions of a socket into the EventLoop"
    },
    {
        "name": "swoole_event_del",
        "url": "function.swoole-event-del.php",
        "description": "Remove all event callback functions of a socket"
    },
    {
        "name": "swoole_event_set",
        "url": "function.swoole-event-set.php",
        "description": "Update the event callback functions of a socket"
    },
    {
        "name": "swoole_event_write",
        "url": "function.swoole-event-write.php",
        "description": "Write data to a socket"
    },
    {
        "name": "swoole_last_error",
        "url": "function.swoole-last-error.php",
        "description": "Get the lastest error message"
    },
    {
        "name": "swoole_select",
        "url": "function.swoole-select.php",
        "description": "Select the file descriptions which are ready to read\/write or error in the eventloop"
    },
    {
        "name": "swoole_strerror",
        "url": "function.swoole-strerror.php",
        "description": "Convert the Errno into error messages"
    },
    {
        "name": "swoole_timer_exists",
        "url": "function.swoole-timer-exists.php",
        "description": "Check if a timer callback function is existed"
    },
    {
        "name": "swoole_version",
        "url": "function.swoole-version.php",
        "description": "Get the version of Swoole"
    },
    {
        "name": "SyncEvent::fire",
        "url": "syncevent.fire.php",
        "description": "Fires\/sets the event"
    },
    {
        "name": "SyncEvent::wait",
        "url": "syncevent.wait.php",
        "description": "Waits for the event to be fired\/set"
    },
    {
        "name": "SyncMutex::lock",
        "url": "syncmutex.lock.php",
        "description": "Waits for an exclusive lock"
    },
    {
        "name": "SyncMutex::__construct",
        "url": "syncmutex.construct.php",
        "description": "Constructs a new SyncMutex object"
    },
    {
        "name": "SyncReaderWriter::readunlock",
        "url": "syncreaderwriter.readunlock.php",
        "description": "Releases a read lock"
    },
    {
        "name": "SyncReaderWriter::writeunlock",
        "url": "syncreaderwriter.writeunlock.php",
        "description": "Releases a write lock"
    },
    {
        "name": "SyncSemaphore::lock",
        "url": "syncsemaphore.lock.php",
        "description": "Decreases the count of the semaphore or waits"
    },
    {
        "name": "SyncSemaphore::__construct",
        "url": "syncsemaphore.construct.php",
        "description": "Constructs a new SyncSemaphore object"
    },
    {
        "name": "SyncSharedMemory::read",
        "url": "syncsharedmemory.read.php",
        "description": "Copy data from named shared memory"
    },
    {
        "name": "SyncSharedMemory::write",
        "url": "syncsharedmemory.write.php",
        "description": "Copy data to named shared memory"
    },
    {
        "name": "syslog",
        "url": "function.syslog.php",
        "description": "Generate a system log message"
    },
    {
        "name": "sys_getloadavg",
        "url": "function.sys-getloadavg.php",
        "description": "Gets system load average"
    },
    {
        "name": "Table::count",
        "url": "mysql-xdevapi-table.count.php",
        "description": "Get row count"
    },
    {
        "name": "Table::existsInDatabase",
        "url": "mysql-xdevapi-table.existsindatabase.php",
        "description": "Check if table exists in database"
    },
    {
        "name": "Table::getSchema",
        "url": "mysql-xdevapi-table.getschema.php",
        "description": "Get table schema"
    },
    {
        "name": "Table::insert",
        "url": "mysql-xdevapi-table.insert.php",
        "description": "Insert table rows"
    },
    {
        "name": "Table::select",
        "url": "mysql-xdevapi-table.select.php",
        "description": "Select rows from table"
    },
    {
        "name": "Table::__construct",
        "url": "mysql-xdevapi-table.construct.php",
        "description": "Table constructor"
    },
    {
        "name": "TableDelete::execute",
        "url": "mysql-xdevapi-tabledelete.execute.php",
        "description": "Execute delete query"
    },
    {
        "name": "TableDelete::orderby",
        "url": "mysql-xdevapi-tabledelete.orderby.php",
        "description": "Set delete sort criteria"
    },
    {
        "name": "TableDelete::__construct",
        "url": "mysql-xdevapi-tabledelete.construct.php",
        "description": "TableDelete constructor"
    },
    {
        "name": "TableInsert::values",
        "url": "mysql-xdevapi-tableinsert.values.php",
        "description": "Add insert row values"
    },
    {
        "name": "TableSelect::bind",
        "url": "mysql-xdevapi-tableselect.bind.php",
        "description": "Bind select query parameters"
    },
    {
        "name": "TableSelect::groupBy",
        "url": "mysql-xdevapi-tableselect.groupby.php",
        "description": "Set select grouping criteria"
    },
    {
        "name": "TableSelect::limit",
        "url": "mysql-xdevapi-tableselect.limit.php",
        "description": "Limit selected rows"
    },
    {
        "name": "TableSelect::lockShared",
        "url": "mysql-xdevapi-tableselect.lockshared.php",
        "description": "Execute SHARED LOCK"
    },
    {
        "name": "TableSelect::orderby",
        "url": "mysql-xdevapi-tableselect.orderby.php",
        "description": "Set select sort criteria"
    },
    {
        "name": "TableSelect::__construct",
        "url": "mysql-xdevapi-tableselect.construct.php",
        "description": "TableSelect constructor"
    },
    {
        "name": "TableUpdate::execute",
        "url": "mysql-xdevapi-tableupdate.execute.php",
        "description": "Execute update query"
    },
    {
        "name": "TableUpdate::orderby",
        "url": "mysql-xdevapi-tableupdate.orderby.php",
        "description": "Set sorting criteria"
    },
    {
        "name": "TableUpdate::where",
        "url": "mysql-xdevapi-tableupdate.where.php",
        "description": "Set search filter"
    },
    {
        "name": "taint",
        "url": "function.taint.php",
        "description": "Taint a string"
    },
    {
        "name": "tanh",
        "url": "function.tanh.php",
        "description": "Hyperbolic tangent"
    },
    {
        "name": "tempnam",
        "url": "function.tempnam.php",
        "description": "Create file with unique file name"
    },
    {
        "name": "Thread::getCreatorId",
        "url": "thread.getcreatorid.php",
        "description": "Identification"
    },
    {
        "name": "Thread::getCurrentThreadId",
        "url": "thread.getcurrentthreadid.php",
        "description": "Identification"
    },
    {
        "name": "Thread::isJoined",
        "url": "thread.isjoined.php",
        "description": "State Detection"
    },
    {
        "name": "Thread::join",
        "url": "thread.join.php",
        "description": "Synchronization"
    },
    {
        "name": "Threaded::chunk",
        "url": "threaded.chunk.php",
        "description": "Manipulation"
    },
    {
        "name": "Threaded::extend",
        "url": "threaded.extend.php",
        "description": "Runtime Manipulation"
    },
    {
        "name": "Threaded::isTerminated",
        "url": "threaded.isterminated.php",
        "description": "State Detection"
    },
    {
        "name": "Threaded::notify",
        "url": "threaded.notify.php",
        "description": "Synchronization"
    },
    {
        "name": "Threaded::pop",
        "url": "threaded.pop.php",
        "description": "Manipulation"
    },
    {
        "name": "Threaded::shift",
        "url": "threaded.shift.php",
        "description": "Manipulation"
    },
    {
        "name": "Threaded::wait",
        "url": "threaded.wait.php",
        "description": "Synchronization"
    },
    {
        "name": "Throwable::getFile",
        "url": "throwable.getfile.php",
        "description": "Gets the file in which the object was created"
    },
    {
        "name": "Throwable::getMessage",
        "url": "throwable.getmessage.php",
        "description": "Gets the message"
    },
    {
        "name": "Throwable::getTrace",
        "url": "throwable.gettrace.php",
        "description": "Gets the stack trace"
    },
    {
        "name": "Throwable::__toString",
        "url": "throwable.tostring.php",
        "description": "Gets a string representation of the thrown object"
    },
    {
        "name": "tidy::body",
        "url": "tidy.body.php",
        "description": "Returns a tidyNode object starting from the &lt;body&gt; tag of the tidy parse tree"
    },
    {
        "name": "tidy::diagnose",
        "url": "tidy.diagnose.php",
        "description": "Run configured diagnostics on parsed and repaired markup"
    },
    {
        "name": "tidy::getHtmlVer",
        "url": "tidy.gethtmlver.php",
        "description": "Get the Detected HTML version for the specified document"
    },
    {
        "name": "tidy::getOptDoc",
        "url": "tidy.getoptdoc.php",
        "description": "Returns the documentation for the given option name"
    },
    {
        "name": "tidy::getStatus",
        "url": "tidy.getstatus.php",
        "description": "Get status of specified document"
    },
    {
        "name": "tidy::html",
        "url": "tidy.html.php",
        "description": "Returns a tidyNode object starting from the &lt;html&gt; tag of the tidy parse tree"
    },
    {
        "name": "tidy::isXml",
        "url": "tidy.isxml.php",
        "description": "Indicates if the document is a generic (non HTML\/XHTML) XML document"
    },
    {
        "name": "tidy::parseString",
        "url": "tidy.parsestring.php",
        "description": "Parse a document stored in a string"
    },
    {
        "name": "tidy::repairString",
        "url": "tidy.repairstring.php",
        "description": "Repair a string using an optionally provided configuration file"
    },
    {
        "name": "tidy::__construct",
        "url": "tidy.construct.php",
        "description": "Constructs a new tidy object"
    },
    {
        "name": "tidyNode::hasChildren",
        "url": "tidynode.haschildren.php",
        "description": "Checks if a node has children"
    },
    {
        "name": "tidyNode::isAsp",
        "url": "tidynode.isasp.php",
        "description": "Checks if this node is ASP"
    },
    {
        "name": "tidyNode::isHtml",
        "url": "tidynode.ishtml.php",
        "description": "Checks if a node is an element node"
    },
    {
        "name": "tidyNode::isPhp",
        "url": "tidynode.isphp.php",
        "description": "Checks if a node is PHP"
    },
    {
        "name": "tidyNode::__construct",
        "url": "tidynode.construct.php",
        "description": "Private constructor to disallow direct instantiation"
    },
    {
        "name": "tidy_config_count",
        "url": "function.tidy-config-count.php",
        "description": "Returns the Number of Tidy configuration errors encountered for specified document"
    },
    {
        "name": "tidy_get_output",
        "url": "function.tidy-get-output.php",
        "description": "Return a string representing the parsed tidy markup"
    },
    {
        "name": "time",
        "url": "function.time.php",
        "description": "Return current Unix timestamp"
    },
    {
        "name": "timezone_identifiers_list",
        "url": "function.timezone-identifiers-list.php",
        "description": "Alias of DateTimeZone::listIdentifiers"
    },
    {
        "name": "timezone_name_from_abbr",
        "url": "function.timezone-name-from-abbr.php",
        "description": "Returns a timezone name by guessing from abbreviation and UTC offset"
    },
    {
        "name": "timezone_offset_get",
        "url": "function.timezone-offset-get.php",
        "description": "Alias of DateTimeZone::getOffset"
    },
    {
        "name": "timezone_transitions_get",
        "url": "function.timezone-transitions-get.php",
        "description": "Alias of DateTimeZone::getTransitions"
    },
    {
        "name": "time_nanosleep",
        "url": "function.time-nanosleep.php",
        "description": "Delay for a number of seconds and nanoseconds"
    },
    {
        "name": "tmpfile",
        "url": "function.tmpfile.php",
        "description": "Creates a temporary file"
    },
    {
        "name": "token_name",
        "url": "function.token-name.php",
        "description": "Get the symbolic name of a given PHP token"
    },
    {
        "name": "trader_acos",
        "url": "function.trader-acos.php",
        "description": "Vector Trigonometric ACos"
    },
    {
        "name": "trader_add",
        "url": "function.trader-add.php",
        "description": "Vector Arithmetic Add"
    },
    {
        "name": "trader_adx",
        "url": "function.trader-adx.php",
        "description": "Average Directional Movement Index"
    },
    {
        "name": "trader_apo",
        "url": "function.trader-apo.php",
        "description": "Absolute Price Oscillator"
    },
    {
        "name": "trader_aroonosc",
        "url": "function.trader-aroonosc.php",
        "description": "Aroon Oscillator"
    },
    {
        "name": "trader_atan",
        "url": "function.trader-atan.php",
        "description": "Vector Trigonometric ATan"
    },
    {
        "name": "trader_avgprice",
        "url": "function.trader-avgprice.php",
        "description": "Average Price"
    },
    {
        "name": "trader_beta",
        "url": "function.trader-beta.php",
        "description": "Beta"
    },
    {
        "name": "trader_cci",
        "url": "function.trader-cci.php",
        "description": "Commodity Channel Index"
    },
    {
        "name": "trader_cdl3blackcrows",
        "url": "function.trader-cdl3blackcrows.php",
        "description": "Three Black Crows"
    },
    {
        "name": "trader_cdl3linestrike",
        "url": "function.trader-cdl3linestrike.php",
        "description": "Three-Line Strike"
    },
    {
        "name": "trader_cdl3starsinsouth",
        "url": "function.trader-cdl3starsinsouth.php",
        "description": "Three Stars In The South"
    },
    {
        "name": "trader_cdlabandonedbaby",
        "url": "function.trader-cdlabandonedbaby.php",
        "description": "Abandoned Baby"
    },
    {
        "name": "trader_cdlbelthold",
        "url": "function.trader-cdlbelthold.php",
        "description": "Belt-hold"
    },
    {
        "name": "trader_cdlclosingmarubozu",
        "url": "function.trader-cdlclosingmarubozu.php",
        "description": "Closing Marubozu"
    },
    {
        "name": "trader_cdlcounterattack",
        "url": "function.trader-cdlcounterattack.php",
        "description": "Counterattack"
    },
    {
        "name": "trader_cdldoji",
        "url": "function.trader-cdldoji.php",
        "description": "Doji"
    },
    {
        "name": "trader_cdldragonflydoji",
        "url": "function.trader-cdldragonflydoji.php",
        "description": "Dragonfly Doji"
    },
    {
        "name": "trader_cdleveningdojistar",
        "url": "function.trader-cdleveningdojistar.php",
        "description": "Evening Doji Star"
    },
    {
        "name": "trader_cdlgapsidesidewhite",
        "url": "function.trader-cdlgapsidesidewhite.php",
        "description": "Up\/Down-gap side-by-side white lines"
    },
    {
        "name": "trader_cdlhammer",
        "url": "function.trader-cdlhammer.php",
        "description": "Hammer"
    },
    {
        "name": "trader_cdlharami",
        "url": "function.trader-cdlharami.php",
        "description": "Harami Pattern"
    },
    {
        "name": "trader_cdlhighwave",
        "url": "function.trader-cdlhighwave.php",
        "description": "High-Wave Candle"
    },
    {
        "name": "trader_cdlhikkakemod",
        "url": "function.trader-cdlhikkakemod.php",
        "description": "Modified Hikkake Pattern"
    },
    {
        "name": "trader_cdlidentical3crows",
        "url": "function.trader-cdlidentical3crows.php",
        "description": "Identical Three Crows"
    },
    {
        "name": "trader_cdlinvertedhammer",
        "url": "function.trader-cdlinvertedhammer.php",
        "description": "Inverted Hammer"
    },
    {
        "name": "trader_cdlkickingbylength",
        "url": "function.trader-cdlkickingbylength.php",
        "description": "Kicking - bull\/bear determined by the longer marubozu"
    },
    {
        "name": "trader_cdllongleggeddoji",
        "url": "function.trader-cdllongleggeddoji.php",
        "description": "Long Legged Doji"
    },
    {
        "name": "trader_cdlmarubozu",
        "url": "function.trader-cdlmarubozu.php",
        "description": "Marubozu"
    },
    {
        "name": "trader_cdlmathold",
        "url": "function.trader-cdlmathold.php",
        "description": "Mat Hold"
    },
    {
        "name": "trader_cdlmorningstar",
        "url": "function.trader-cdlmorningstar.php",
        "description": "Morning Star"
    },
    {
        "name": "trader_cdlpiercing",
        "url": "function.trader-cdlpiercing.php",
        "description": "Piercing Pattern"
    },
    {
        "name": "trader_cdlrisefall3methods",
        "url": "function.trader-cdlrisefall3methods.php",
        "description": "Rising\/Falling Three Methods"
    },
    {
        "name": "trader_cdlshootingstar",
        "url": "function.trader-cdlshootingstar.php",
        "description": "Shooting Star"
    },
    {
        "name": "trader_cdlspinningtop",
        "url": "function.trader-cdlspinningtop.php",
        "description": "Spinning Top"
    },
    {
        "name": "trader_cdlsticksandwich",
        "url": "function.trader-cdlsticksandwich.php",
        "description": "Stick Sandwich"
    },
    {
        "name": "trader_cdltasukigap",
        "url": "function.trader-cdltasukigap.php",
        "description": "Tasuki Gap"
    },
    {
        "name": "trader_cdltristar",
        "url": "function.trader-cdltristar.php",
        "description": "Tristar Pattern"
    },
    {
        "name": "trader_cdlupsidegap2crows",
        "url": "function.trader-cdlupsidegap2crows.php",
        "description": "Upside Gap Two Crows"
    },
    {
        "name": "trader_ceil",
        "url": "function.trader-ceil.php",
        "description": "Vector Ceil"
    },
    {
        "name": "trader_correl",
        "url": "function.trader-correl.php",
        "description": "Pearson's Correlation Coefficient (r)"
    },
    {
        "name": "trader_cosh",
        "url": "function.trader-cosh.php",
        "description": "Vector Trigonometric Cosh"
    },
    {
        "name": "trader_div",
        "url": "function.trader-div.php",
        "description": "Vector Arithmetic Div"
    },
    {
        "name": "trader_ema",
        "url": "function.trader-ema.php",
        "description": "Exponential Moving Average"
    },
    {
        "name": "trader_exp",
        "url": "function.trader-exp.php",
        "description": "Vector Arithmetic Exp"
    },
    {
        "name": "trader_get_compat",
        "url": "function.trader-get-compat.php",
        "description": "Get compatibility mode"
    },
    {
        "name": "trader_ht_dcperiod",
        "url": "function.trader-ht-dcperiod.php",
        "description": "Hilbert Transform - Dominant Cycle Period"
    },
    {
        "name": "trader_ht_phasor",
        "url": "function.trader-ht-phasor.php",
        "description": "Hilbert Transform - Phasor Components"
    },
    {
        "name": "trader_ht_trendline",
        "url": "function.trader-ht-trendline.php",
        "description": "Hilbert Transform - Instantaneous Trendline"
    },
    {
        "name": "trader_kama",
        "url": "function.trader-kama.php",
        "description": "Kaufman Adaptive Moving Average"
    },
    {
        "name": "trader_linearreg_angle",
        "url": "function.trader-linearreg-angle.php",
        "description": "Linear Regression Angle"
    },
    {
        "name": "trader_linearreg_slope",
        "url": "function.trader-linearreg-slope.php",
        "description": "Linear Regression Slope"
    },
    {
        "name": "trader_log10",
        "url": "function.trader-log10.php",
        "description": "Vector Log10"
    },
    {
        "name": "trader_macd",
        "url": "function.trader-macd.php",
        "description": "Moving Average Convergence\/Divergence"
    },
    {
        "name": "trader_macdfix",
        "url": "function.trader-macdfix.php",
        "description": "Moving Average Convergence\/Divergence Fix 12\/26"
    },
    {
        "name": "trader_mavp",
        "url": "function.trader-mavp.php",
        "description": "Moving average with variable period"
    },
    {
        "name": "trader_maxindex",
        "url": "function.trader-maxindex.php",
        "description": "Index of highest value over a specified period"
    },
    {
        "name": "trader_mfi",
        "url": "function.trader-mfi.php",
        "description": "Money Flow Index"
    },
    {
        "name": "trader_midprice",
        "url": "function.trader-midprice.php",
        "description": "Midpoint Price over period"
    },
    {
        "name": "trader_minindex",
        "url": "function.trader-minindex.php",
        "description": "Index of lowest value over a specified period"
    },
    {
        "name": "trader_minmaxindex",
        "url": "function.trader-minmaxindex.php",
        "description": "Indexes of lowest and highest values over a specified period"
    },
    {
        "name": "trader_minus_dm",
        "url": "function.trader-minus-dm.php",
        "description": "Minus Directional Movement"
    },
    {
        "name": "trader_mult",
        "url": "function.trader-mult.php",
        "description": "Vector Arithmetic Mult"
    },
    {
        "name": "trader_obv",
        "url": "function.trader-obv.php",
        "description": "On Balance Volume"
    },
    {
        "name": "trader_plus_dm",
        "url": "function.trader-plus-dm.php",
        "description": "Plus Directional Movement"
    },
    {
        "name": "trader_roc",
        "url": "function.trader-roc.php",
        "description": "Rate of change : ((price\/prevPrice)-1)*100"
    },
    {
        "name": "trader_rocr",
        "url": "function.trader-rocr.php",
        "description": "Rate of change ratio: (price\/prevPrice)"
    },
    {
        "name": "trader_rsi",
        "url": "function.trader-rsi.php",
        "description": "Relative Strength Index"
    },
    {
        "name": "trader_sarext",
        "url": "function.trader-sarext.php",
        "description": "Parabolic SAR - Extended"
    },
    {
        "name": "trader_set_unstable_period",
        "url": "function.trader-set-unstable-period.php",
        "description": "Set unstable period"
    },
    {
        "name": "trader_sinh",
        "url": "function.trader-sinh.php",
        "description": "Vector Trigonometric Sinh"
    },
    {
        "name": "trader_sqrt",
        "url": "function.trader-sqrt.php",
        "description": "Vector Square Root"
    },
    {
        "name": "trader_stoch",
        "url": "function.trader-stoch.php",
        "description": "Stochastic"
    },
    {
        "name": "trader_stochrsi",
        "url": "function.trader-stochrsi.php",
        "description": "Stochastic Relative Strength Index"
    },
    {
        "name": "trader_sum",
        "url": "function.trader-sum.php",
        "description": "Summation"
    },
    {
        "name": "trader_tan",
        "url": "function.trader-tan.php",
        "description": "Vector Trigonometric Tan"
    },
    {
        "name": "trader_tema",
        "url": "function.trader-tema.php",
        "description": "Triple Exponential Moving Average"
    },
    {
        "name": "trader_trima",
        "url": "function.trader-trima.php",
        "description": "Triangular Moving Average"
    },
    {
        "name": "trader_tsf",
        "url": "function.trader-tsf.php",
        "description": "Time Series Forecast"
    },
    {
        "name": "trader_ultosc",
        "url": "function.trader-ultosc.php",
        "description": "Ultimate Oscillator"
    },
    {
        "name": "trader_wclprice",
        "url": "function.trader-wclprice.php",
        "description": "Weighted Close Price"
    },
    {
        "name": "trader_wma",
        "url": "function.trader-wma.php",
        "description": "Weighted Moving Average"
    },
    {
        "name": "Transliterator::create",
        "url": "transliterator.create.php",
        "description": "Create a transliterator"
    },
    {
        "name": "Transliterator::createInverse",
        "url": "transliterator.createinverse.php",
        "description": "Create an inverse transliterator"
    },
    {
        "name": "Transliterator::getErrorMessage",
        "url": "transliterator.geterrormessage.php",
        "description": "Get last error message"
    },
    {
        "name": "Transliterator::transliterate",
        "url": "transliterator.transliterate.php",
        "description": "Transliterate a string"
    },
    {
        "name": "trigger_error",
        "url": "function.trigger-error.php",
        "description": "Generates a user-level error\/warning\/notice message"
    },
    {
        "name": "uasort",
        "url": "function.uasort.php",
        "description": "Sort an array with a user-defined comparison function and maintain index association"
    },
    {
        "name": "UConverter::convert",
        "url": "uconverter.convert.php",
        "description": "Convert string from one charset to another"
    },
    {
        "name": "UConverter::getAliases",
        "url": "uconverter.getaliases.php",
        "description": "Get the aliases of the given name"
    },
    {
        "name": "UConverter::getDestinationEncoding",
        "url": "uconverter.getdestinationencoding.php",
        "description": "Get the destination encoding"
    },
    {
        "name": "UConverter::getErrorCode",
        "url": "uconverter.geterrorcode.php",
        "description": "Get last error code on the object"
    },
    {
        "name": "UConverter::getSourceEncoding",
        "url": "uconverter.getsourceencoding.php",
        "description": "Get the source encoding"
    },
    {
        "name": "UConverter::getStandards",
        "url": "uconverter.getstandards.php",
        "description": "Get standards associated to converter names"
    },
    {
        "name": "UConverter::reasonText",
        "url": "uconverter.reasontext.php",
        "description": "Get string representation of the callback reason"
    },
    {
        "name": "UConverter::setSourceEncoding",
        "url": "uconverter.setsourceencoding.php",
        "description": "Set the source encoding"
    },
    {
        "name": "UConverter::toUCallback",
        "url": "uconverter.toucallback.php",
        "description": "Default &quot;to&quot; callback function"
    },
    {
        "name": "UConverter::__construct",
        "url": "uconverter.construct.php",
        "description": "Create UConverter object"
    },
    {
        "name": "UI\\Area::onDraw",
        "url": "ui-area.ondraw.php",
        "description": "Draw Callback"
    },
    {
        "name": "UI\\Area::onMouse",
        "url": "ui-area.onmouse.php",
        "description": "Mouse Callback"
    },
    {
        "name": "UI\\Area::scrollTo",
        "url": "ui-area.scrollto.php",
        "description": "Area Scroll"
    },
    {
        "name": "UI\\Control::destroy",
        "url": "ui-control.destroy.php",
        "description": "Destroy Control"
    },
    {
        "name": "UI\\Control::enable",
        "url": "ui-control.enable.php",
        "description": "Enable Control"
    },
    {
        "name": "UI\\Control::getTopLevel",
        "url": "ui-control.gettoplevel.php",
        "description": "Get Top Level"
    },
    {
        "name": "UI\\Control::isEnabled",
        "url": "ui-control.isenabled.php",
        "description": "Determine if Control is enabled"
    },
    {
        "name": "UI\\Control::setParent",
        "url": "ui-control.setparent.php",
        "description": "Set Parent Control"
    },
    {
        "name": "UI\\Controls\\Box::append",
        "url": "ui-controls-box.append.php",
        "description": "Append Control"
    },
    {
        "name": "UI\\Controls\\Box::getOrientation",
        "url": "ui-controls-box.getorientation.php",
        "description": "Get Orientation"
    },
    {
        "name": "UI\\Controls\\Box::setPadded",
        "url": "ui-controls-box.setpadded.php",
        "description": "Set Padding"
    },
    {
        "name": "UI\\Controls\\Button::getText",
        "url": "ui-controls-button.gettext.php",
        "description": "Get Text"
    },
    {
        "name": "UI\\Controls\\Button::setText",
        "url": "ui-controls-button.settext.php",
        "description": "Set Text"
    },
    {
        "name": "UI\\Controls\\Check::getText",
        "url": "ui-controls-check.gettext.php",
        "description": "Get Text"
    },
    {
        "name": "UI\\Controls\\Check::onToggle",
        "url": "ui-controls-check.ontoggle.php",
        "description": "Toggle Callback"
    },
    {
        "name": "UI\\Controls\\Check::setText",
        "url": "ui-controls-check.settext.php",
        "description": "Set Text"
    },
    {
        "name": "UI\\Controls\\ColorButton::getColor",
        "url": "ui-controls-colorbutton.getcolor.php",
        "description": "Get Color"
    },
    {
        "name": "UI\\Controls\\ColorButton::setColor",
        "url": "ui-controls-colorbutton.setcolor.php",
        "description": "Set Color"
    },
    {
        "name": "UI\\Controls\\Combo::getSelected",
        "url": "ui-controls-combo.getselected.php",
        "description": "Get Selected Option"
    },
    {
        "name": "UI\\Controls\\Combo::setSelected",
        "url": "ui-controls-combo.setselected.php",
        "description": "Set Selected Option"
    },
    {
        "name": "UI\\Controls\\EditableCombo::getText",
        "url": "ui-controls-editablecombo.gettext.php",
        "description": "Get Text"
    },
    {
        "name": "UI\\Controls\\EditableCombo::setText",
        "url": "ui-controls-editablecombo.settext.php",
        "description": "Set Text"
    },
    {
        "name": "UI\\Controls\\Entry::isReadOnly",
        "url": "ui-controls-entry.isreadonly.php",
        "description": "Detect Read Only"
    },
    {
        "name": "UI\\Controls\\Entry::setReadOnly",
        "url": "ui-controls-entry.setreadonly.php",
        "description": "Set Read Only"
    },
    {
        "name": "UI\\Controls\\Entry::__construct",
        "url": "ui-controls-entry.construct.php",
        "description": "Construct a new Entry"
    },
    {
        "name": "UI\\Controls\\Form::delete",
        "url": "ui-controls-form.delete.php",
        "description": "Delete Control"
    },
    {
        "name": "UI\\Controls\\Form::setPadded",
        "url": "ui-controls-form.setpadded.php",
        "description": "Set Padding"
    },
    {
        "name": "UI\\Controls\\Grid::isPadded",
        "url": "ui-controls-grid.ispadded.php",
        "description": "Padding Detection"
    },
    {
        "name": "UI\\Controls\\Group::append",
        "url": "ui-controls-group.append.php",
        "description": "Append Control"
    },
    {
        "name": "UI\\Controls\\Group::hasMargin",
        "url": "ui-controls-group.hasmargin.php",
        "description": "Margin Detection"
    },
    {
        "name": "UI\\Controls\\Group::setTitle",
        "url": "ui-controls-group.settitle.php",
        "description": "Set Title"
    },
    {
        "name": "UI\\Controls\\Label::getText",
        "url": "ui-controls-label.gettext.php",
        "description": "Get Text"
    },
    {
        "name": "UI\\Controls\\Label::__construct",
        "url": "ui-controls-label.construct.php",
        "description": "Construct a new Label"
    },
    {
        "name": "UI\\Controls\\MultilineEntry::getText",
        "url": "ui-controls-multilineentry.gettext.php",
        "description": "Get Text"
    },
    {
        "name": "UI\\Controls\\MultilineEntry::onChange",
        "url": "ui-controls-multilineentry.onchange.php",
        "description": "Change Handler"
    },
    {
        "name": "UI\\Controls\\MultilineEntry::setText",
        "url": "ui-controls-multilineentry.settext.php",
        "description": "Set Text"
    },
    {
        "name": "UI\\Controls\\Picker::__construct",
        "url": "ui-controls-picker.construct.php",
        "description": "Construct a new Picker"
    },
    {
        "name": "UI\\Controls\\Progress::setValue",
        "url": "ui-controls-progress.setvalue.php",
        "description": "Set Value"
    },
    {
        "name": "UI\\Controls\\Radio::getSelected",
        "url": "ui-controls-radio.getselected.php",
        "description": "Get Selected Option"
    },
    {
        "name": "UI\\Controls\\Radio::setSelected",
        "url": "ui-controls-radio.setselected.php",
        "description": "Set Selected Option"
    },
    {
        "name": "UI\\Controls\\Slider::getValue",
        "url": "ui-controls-slider.getvalue.php",
        "description": "Get Value"
    },
    {
        "name": "UI\\Controls\\Slider::setValue",
        "url": "ui-controls-slider.setvalue.php",
        "description": "Set Value"
    },
    {
        "name": "UI\\Controls\\Spin::getValue",
        "url": "ui-controls-spin.getvalue.php",
        "description": "Get Value"
    },
    {
        "name": "UI\\Controls\\Spin::setValue",
        "url": "ui-controls-spin.setvalue.php",
        "description": "Set Value"
    },
    {
        "name": "UI\\Controls\\Tab::append",
        "url": "ui-controls-tab.append.php",
        "description": "Append Page"
    },
    {
        "name": "UI\\Controls\\Tab::hasMargin",
        "url": "ui-controls-tab.hasmargin.php",
        "description": "Margin Detection"
    },
    {
        "name": "UI\\Controls\\Tab::pages",
        "url": "ui-controls-tab.pages.php",
        "description": "Page Count"
    },
    {
        "name": "UI\\Draw\\Brush::getColor",
        "url": "ui-draw-brush.getcolor.php",
        "description": "Get Color"
    },
    {
        "name": "UI\\Draw\\Brush::__construct",
        "url": "ui-draw-brush.construct.php",
        "description": "Construct a new Brush"
    },
    {
        "name": "UI\\Draw\\Brush\\Gradient::delStop",
        "url": "ui-draw-brush-gradient.delstop.php",
        "description": "Stop Manipulation"
    },
    {
        "name": "UI\\Draw\\Brush\\LinearGradient::__construct",
        "url": "ui-draw-brush-lineargradient.construct.php",
        "description": "Construct a Linear Gradient"
    },
    {
        "name": "UI\\Draw\\Color::getChannel",
        "url": "ui-draw-color.getchannel.php",
        "description": "Color Manipulation"
    },
    {
        "name": "UI\\Draw\\Color::__construct",
        "url": "ui-draw-color.construct.php",
        "description": "Construct new Color"
    },
    {
        "name": "UI\\Draw\\Matrix::isInvertible",
        "url": "ui-draw-matrix.isinvertible.php",
        "description": "Invertible Detection"
    },
    {
        "name": "UI\\Draw\\Matrix::rotate",
        "url": "ui-draw-matrix.rotate.php",
        "description": "Rotate Matrix"
    },
    {
        "name": "UI\\Draw\\Matrix::skew",
        "url": "ui-draw-matrix.skew.php",
        "description": "Skew Matrix"
    },
    {
        "name": "UI\\Draw\\Path::addRectangle",
        "url": "ui-draw-path.addrectangle.php",
        "description": "Draw a Rectangle"
    },
    {
        "name": "UI\\Draw\\Path::bezierTo",
        "url": "ui-draw-path.bezierto.php",
        "description": "Draw Bezier Curve"
    },
    {
        "name": "UI\\Draw\\Path::end",
        "url": "ui-draw-path.end.php",
        "description": "Finalize Path"
    },
    {
        "name": "UI\\Draw\\Path::newFigure",
        "url": "ui-draw-path.newfigure.php",
        "description": "Draw Figure"
    },
    {
        "name": "UI\\Draw\\Path::__construct",
        "url": "ui-draw-path.construct.php",
        "description": "Construct a new Path"
    },
    {
        "name": "UI\\Draw\\Pen::fill",
        "url": "ui-draw-pen.fill.php",
        "description": "Fill a Path"
    },
    {
        "name": "UI\\Draw\\Pen::save",
        "url": "ui-draw-pen.save.php",
        "description": "Save"
    },
    {
        "name": "UI\\Draw\\Pen::transform",
        "url": "ui-draw-pen.transform.php",
        "description": "Matrix Transform"
    },
    {
        "name": "UI\\Draw\\Stroke::getCap",
        "url": "ui-draw-stroke.getcap.php",
        "description": "Get Line Cap"
    },
    {
        "name": "UI\\Draw\\Stroke::getMiterLimit",
        "url": "ui-draw-stroke.getmiterlimit.php",
        "description": "Get Miter Limit"
    },
    {
        "name": "UI\\Draw\\Stroke::setCap",
        "url": "ui-draw-stroke.setcap.php",
        "description": "Set Line Cap"
    },
    {
        "name": "UI\\Draw\\Stroke::setMiterLimit",
        "url": "ui-draw-stroke.setmiterlimit.php",
        "description": "Set Miter Limit"
    },
    {
        "name": "UI\\Draw\\Stroke::__construct",
        "url": "ui-draw-stroke.construct.php",
        "description": "Construct a new Stroke"
    },
    {
        "name": "UI\\Draw\\Text\\Font::getDescent",
        "url": "ui-draw-text-font.getdescent.php",
        "description": "Font Metrics"
    },
    {
        "name": "UI\\Draw\\Text\\Font::getUnderlinePosition",
        "url": "ui-draw-text-font.getunderlineposition.php",
        "description": "Font Metrics"
    },
    {
        "name": "UI\\Draw\\Text\\Font::__construct",
        "url": "ui-draw-text-font.construct.php",
        "description": "Construct a new Font"
    },
    {
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getItalic",
        "url": "ui-draw-text-font-descriptor.getitalic.php",
        "description": "Style Detection"
    },
    {
        "name": "UI\\Draw\\Text\\Font\\Descriptor::getStretch",
        "url": "ui-draw-text-font-descriptor.getstretch.php",
        "description": "Style Detection"
    },
    {
        "name": "UI\\Draw\\Text\\Font\\Descriptor::__construct",
        "url": "ui-draw-text-font-descriptor.construct.php",
        "description": "Construct a new Font Descriptor"
    },
    {
        "name": "UI\\Draw\\Text\\Layout::setColor",
        "url": "ui-draw-text-layout.setcolor.php",
        "description": "Set Color"
    },
    {
        "name": "UI\\Draw\\Text\\Layout::__construct",
        "url": "ui-draw-text-layout.construct.php",
        "description": "Construct a new Text Layout"
    },
    {
        "name": "UI\\Executor::onExecute",
        "url": "ui-executor.onexecute.php",
        "description": "Execution Callback"
    },
    {
        "name": "UI\\Executor::__construct",
        "url": "ui-executor.construct.php",
        "description": "Construct a new Executor"
    },
    {
        "name": "UI\\Menu::appendAbout",
        "url": "ui-menu.appendabout.php",
        "description": "Append About Menu Item"
    },
    {
        "name": "UI\\Menu::appendPreferences",
        "url": "ui-menu.appendpreferences.php",
        "description": "Append Preferences Menu Item"
    },
    {
        "name": "UI\\Menu::appendSeparator",
        "url": "ui-menu.appendseparator.php",
        "description": "Append Menu Item Separator"
    },
    {
        "name": "UI\\MenuItem::disable",
        "url": "ui-menuitem.disable.php",
        "description": "Disable Menu Item"
    },
    {
        "name": "UI\\MenuItem::isChecked",
        "url": "ui-menuitem.ischecked.php",
        "description": "Detect Checked"
    },
    {
        "name": "UI\\MenuItem::setChecked",
        "url": "ui-menuitem.setchecked.php",
        "description": "Set Checked"
    },
    {
        "name": "UI\\Point::getX",
        "url": "ui-point.getx.php",
        "description": "Retrieves X"
    },
    {
        "name": "UI\\Point::setX",
        "url": "ui-point.setx.php",
        "description": "Set X"
    },
    {
        "name": "UI\\Point::__construct",
        "url": "ui-point.construct.php",
        "description": "Construct a new Point"
    },
    {
        "name": "UI\\run",
        "url": "function.ui-run.php",
        "description": "Enter UI Loop"
    },
    {
        "name": "UI\\Size::getWidth",
        "url": "ui-size.getwidth.php",
        "description": "Retrives Width"
    },
    {
        "name": "UI\\Size::setHeight",
        "url": "ui-size.setheight.php",
        "description": "Set Height"
    },
    {
        "name": "UI\\Size::__construct",
        "url": "ui-size.construct.php",
        "description": "Construct a new Size"
    },
    {
        "name": "UI\\Window::error",
        "url": "ui-window.error.php",
        "description": "Show Error Box"
    },
    {
        "name": "UI\\Window::getTitle",
        "url": "ui-window.gettitle.php",
        "description": "Get Title"
    },
    {
        "name": "UI\\Window::hasMargin",
        "url": "ui-window.hasmargin.php",
        "description": "Margin Detection"
    },
    {
        "name": "UI\\Window::msg",
        "url": "ui-window.msg.php",
        "description": "Show Message Box"
    },
    {
        "name": "UI\\Window::open",
        "url": "ui-window.open.php",
        "description": "Open Dialog"
    },
    {
        "name": "UI\\Window::setBorders",
        "url": "ui-window.setborders.php",
        "description": "Border Use"
    },
    {
        "name": "UI\\Window::setMargin",
        "url": "ui-window.setmargin.php",
        "description": "Margin Use"
    },
    {
        "name": "UI\\Window::setTitle",
        "url": "ui-window.settitle.php",
        "description": "Window Title"
    },
    {
        "name": "uksort",
        "url": "function.uksort.php",
        "description": "Sort an array by keys using a user-defined comparison function"
    },
    {
        "name": "uniqid",
        "url": "function.uniqid.php",
        "description": "Generate a unique ID"
    },
    {
        "name": "unixtojd",
        "url": "function.unixtojd.php",
        "description": "Convert Unix timestamp to Julian Day"
    },
    {
        "name": "unpack",
        "url": "function.unpack.php",
        "description": "Unpack data from binary string"
    },
    {
        "name": "unserialize",
        "url": "function.unserialize.php",
        "description": "Creates a PHP value from a stored representation"
    },
    {
        "name": "untaint",
        "url": "function.untaint.php",
        "description": "Untaint strings"
    },
    {
        "name": "uopz_allow_exit",
        "url": "function.uopz-allow-exit.php",
        "description": "Allows control over disabled exit opcode"
    },
    {
        "name": "uopz_compose",
        "url": "function.uopz-compose.php",
        "description": "Compose a class"
    },
    {
        "name": "uopz_delete",
        "url": "function.uopz-delete.php",
        "description": "Delete a function"
    },
    {
        "name": "uopz_extend",
        "url": "function.uopz-extend.php",
        "description": "Extend a class at runtime"
    },
    {
        "name": "uopz_function",
        "url": "function.uopz-function.php",
        "description": "Creates a function at runtime"
    },
    {
        "name": "uopz_get_hook",
        "url": "function.uopz-get-hook.php",
        "description": "Gets previously set hook on function or method"
    },
    {
        "name": "uopz_get_property",
        "url": "function.uopz-get-property.php",
        "description": "Gets value of class or instance property"
    },
    {
        "name": "uopz_get_static",
        "url": "function.uopz-get-static.php",
        "description": "Gets the static variables from function or method scope"
    },
    {
        "name": "uopz_overload",
        "url": "function.uopz-overload.php",
        "description": "Overload a VM opcode"
    },
    {
        "name": "uopz_rename",
        "url": "function.uopz-rename.php",
        "description": "Rename a function at runtime"
    },
    {
        "name": "uopz_set_hook",
        "url": "function.uopz-set-hook.php",
        "description": "Sets hook to execute when entering a function or method"
    },
    {
        "name": "uopz_set_property",
        "url": "function.uopz-set-property.php",
        "description": "Sets value of existing class or instance property"
    },
    {
        "name": "uopz_set_static",
        "url": "function.uopz-set-static.php",
        "description": "Sets the static variables in function or method scope"
    },
    {
        "name": "uopz_unset_hook",
        "url": "function.uopz-unset-hook.php",
        "description": "Removes previously set hook on function or method"
    },
    {
        "name": "uopz_unset_return",
        "url": "function.uopz-unset-return.php",
        "description": "Unsets a previously set return value for a function"
    },
    {
        "name": "urlencode",
        "url": "function.urlencode.php",
        "description": "URL-encodes string"
    },
    {
        "name": "use_soap_error_handler",
        "url": "function.use-soap-error-handler.php",
        "description": "Set whether to use the SOAP error handler"
    },
    {
        "name": "usort",
        "url": "function.usort.php",
        "description": "Sort an array by values using a user-defined comparison function"
    },
    {
        "name": "utf8_encode",
        "url": "function.utf8-encode.php",
        "description": "Converts a string from ISO-8859-1 to UTF-8"
    },
    {
        "name": "V8Js::executeString",
        "url": "v8js.executestring.php",
        "description": "Execute a string as Javascript code"
    },
    {
        "name": "V8Js::getPendingException",
        "url": "v8js.getpendingexception.php",
        "description": "Return pending uncaught Javascript exception"
    },
    {
        "name": "V8Js::__construct",
        "url": "v8js.construct.php",
        "description": "Construct a new V8Js object"
    },
    {
        "name": "V8JsException::getJsLineNumber",
        "url": "v8jsexception.getjslinenumber.php",
        "description": "The getJsLineNumber purpose"
    },
    {
        "name": "V8JsException::getJsTrace",
        "url": "v8jsexception.getjstrace.php",
        "description": "The getJsTrace purpose"
    },
    {
        "name": "variant_abs",
        "url": "function.variant-abs.php",
        "description": "Returns the absolute value of a variant"
    },
    {
        "name": "variant_and",
        "url": "function.variant-and.php",
        "description": "Performs a bitwise AND operation between two variants"
    },
    {
        "name": "variant_cat",
        "url": "function.variant-cat.php",
        "description": "Concatenates two variant values together and returns the result"
    },
    {
        "name": "variant_date_from_timestamp",
        "url": "function.variant-date-from-timestamp.php",
        "description": "Returns a variant date representation of a Unix timestamp"
    },
    {
        "name": "variant_div",
        "url": "function.variant-div.php",
        "description": "Returns the result from dividing two variants"
    },
    {
        "name": "variant_fix",
        "url": "function.variant-fix.php",
        "description": "Returns the integer portion of a variant"
    },
    {
        "name": "variant_idiv",
        "url": "function.variant-idiv.php",
        "description": "Converts variants to integers and then returns the result from dividing them"
    },
    {
        "name": "variant_int",
        "url": "function.variant-int.php",
        "description": "Returns the integer portion of a variant"
    },
    {
        "name": "variant_mul",
        "url": "function.variant-mul.php",
        "description": "Multiplies the values of the two variants"
    },
    {
        "name": "variant_not",
        "url": "function.variant-not.php",
        "description": "Performs bitwise not negation on a variant"
    },
    {
        "name": "variant_pow",
        "url": "function.variant-pow.php",
        "description": "Returns the result of performing the power function with two variants"
    },
    {
        "name": "variant_set",
        "url": "function.variant-set.php",
        "description": "Assigns a new value for a variant object"
    },
    {
        "name": "variant_sub",
        "url": "function.variant-sub.php",
        "description": "Subtracts the value of the right variant from the left variant value"
    },
    {
        "name": "VarnishAdmin::auth",
        "url": "varnishadmin.auth.php",
        "description": "Authenticate on a varnish instance"
    },
    {
        "name": "VarnishAdmin::banUrl",
        "url": "varnishadmin.banurl.php",
        "description": "Ban an URL using a VCL expression"
    },
    {
        "name": "VarnishAdmin::connect",
        "url": "varnishadmin.connect.php",
        "description": "Connect to a varnish instance administration interface"
    },
    {
        "name": "VarnishAdmin::getPanic",
        "url": "varnishadmin.getpanic.php",
        "description": "Get the last panic message on a varnish instance"
    },
    {
        "name": "VarnishAdmin::isRunning",
        "url": "varnishadmin.isrunning.php",
        "description": "Check if the varnish slave process is currently running"
    },
    {
        "name": "VarnishAdmin::setHost",
        "url": "varnishadmin.sethost.php",
        "description": "Set the class host configuration param"
    },
    {
        "name": "VarnishAdmin::setParam",
        "url": "varnishadmin.setparam.php",
        "description": "Set configuration param on the current varnish instance"
    },
    {
        "name": "VarnishAdmin::setSecret",
        "url": "varnishadmin.setsecret.php",
        "description": "Set the class secret configuration param"
    },
    {
        "name": "VarnishAdmin::start",
        "url": "varnishadmin.start.php",
        "description": "Start varnish worker process"
    },
    {
        "name": "VarnishAdmin::__construct",
        "url": "varnishadmin.construct.php",
        "description": "VarnishAdmin constructor"
    },
    {
        "name": "VarnishLog::getTagName",
        "url": "varnishlog.gettagname.php",
        "description": "Get the log tag string representation by its index"
    },
    {
        "name": "VarnishStat::getSnapshot",
        "url": "varnishstat.getsnapshot.php",
        "description": "Get the current varnish instance statistics snapshot"
    },
    {
        "name": "var_dump",
        "url": "function.var-dump.php",
        "description": "Dumps information about a variable"
    },
    {
        "name": "var_representation",
        "url": "function.var-representation.php",
        "description": "Returns a short, readable, parsable string representation of a variable"
    },
    {
        "name": "vfprintf",
        "url": "function.vfprintf.php",
        "description": "Write a formatted string to a stream"
    },
    {
        "name": "vprintf",
        "url": "function.vprintf.php",
        "description": "Output a formatted string"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::addSheet",
        "url": "vtiful-kernel-excel.addSheet.php",
        "description": "Vtiful\\Kernel\\Excel addSheet"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::constMemory",
        "url": "vtiful-kernel-excel.constMemory.php",
        "description": "Vtiful\\Kernel\\Excel constMemory"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::fileName",
        "url": "vtiful-kernel-excel.filename.php",
        "description": "Vtiful\\Kernel\\Excel fileName"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::header",
        "url": "vtiful-kernel-excel.header.php",
        "description": "Vtiful\\Kernel\\Excel header"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::insertImage",
        "url": "vtiful-kernel-excel.insertImage.php",
        "description": "Vtiful\\Kernel\\Excel insertImage"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::mergeCells",
        "url": "vtiful-kernel-excel.mergeCells.php",
        "description": "Vtiful\\Kernel\\Excel mergeCells"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::setColumn",
        "url": "vtiful-kernel-excel.setColumn.php",
        "description": "Vtiful\\Kernel\\Excel setColumn"
    },
    {
        "name": "Vtiful\\Kernel\\Excel::__construct",
        "url": "vtiful-kernel-excel.construct.php",
        "description": "Vtiful\\Kernel\\Excel constructor"
    },
    {
        "name": "Vtiful\\Kernel\\Format::bold",
        "url": "vtiful-kernel-format.bold.php",
        "description": "Vtiful\\Kernel\\Format bold"
    },
    {
        "name": "Vtiful\\Kernel\\Format::underline",
        "url": "vtiful-kernel-format.underline.php",
        "description": "Vtiful\\Kernel\\Format underline"
    },
    {
        "name": "Warning::__construct",
        "url": "mysql-xdevapi-warning.construct.php",
        "description": "Warning constructor"
    },
    {
        "name": "wddx_deserialize",
        "url": "function.wddx-deserialize.php",
        "description": "Unserializes a WDDX packet"
    },
    {
        "name": "wddx_packet_start",
        "url": "function.wddx-packet-start.php",
        "description": "Starts a new WDDX packet with structure inside it"
    },
    {
        "name": "wddx_serialize_vars",
        "url": "function.wddx-serialize-vars.php",
        "description": "Serialize variables into a WDDX packet"
    },
    {
        "name": "WeakMap::getIterator",
        "url": "weakmap.getiterator.php",
        "description": "Retrieve an external iterator"
    },
    {
        "name": "WeakMap::offsetGet",
        "url": "weakmap.offsetget.php",
        "description": "Returns the value pointed to by a certain object"
    },
    {
        "name": "WeakMap::offsetUnset",
        "url": "weakmap.offsetunset.php",
        "description": "Removes an entry from the map"
    },
    {
        "name": "WeakReference::get",
        "url": "weakreference.get.php",
        "description": "Get a weakly referenced Object"
    },
    {
        "name": "win32_continue_service",
        "url": "function.win32-continue-service.php",
        "description": "Resumes a paused service"
    },
    {
        "name": "win32_delete_service",
        "url": "function.win32-delete-service.php",
        "description": "Deletes a service entry from the SCM database"
    },
    {
        "name": "win32_pause_service",
        "url": "function.win32-pause-service.php",
        "description": "Pauses a service"
    },
    {
        "name": "win32_send_custom_control",
        "url": "function.win32-send-custom-control.php",
        "description": "Send a custom control to the service"
    },
    {
        "name": "win32_set_service_exit_mode",
        "url": "function.win32-set-service-exit-mode.php",
        "description": "Define or return the exit mode for the current running service"
    },
    {
        "name": "win32_start_service",
        "url": "function.win32-start-service.php",
        "description": "Starts a service"
    },
    {
        "name": "win32_stop_service",
        "url": "function.win32-stop-service.php",
        "description": "Stops a service"
    },
    {
        "name": "wincache_fcache_meminfo",
        "url": "function.wincache-fcache-meminfo.php",
        "description": "Retrieves information about file cache memory usage"
    },
    {
        "name": "wincache_ocache_fileinfo",
        "url": "function.wincache-ocache-fileinfo.php",
        "description": "Retrieves information about files cached in the opcode cache"
    },
    {
        "name": "wincache_refresh_if_changed",
        "url": "function.wincache-refresh-if-changed.php",
        "description": "Refreshes the cache entries for the cached files"
    },
    {
        "name": "wincache_rplist_meminfo",
        "url": "function.wincache-rplist-meminfo.php",
        "description": "Retrieves information about memory usage by the resolve file path cache"
    },
    {
        "name": "wincache_scache_meminfo",
        "url": "function.wincache-scache-meminfo.php",
        "description": "Retrieves information about session cache memory usage"
    },
    {
        "name": "wincache_ucache_cas",
        "url": "function.wincache-ucache-cas.php",
        "description": "Compares the variable with old value and assigns new value to it"
    },
    {
        "name": "wincache_ucache_dec",
        "url": "function.wincache-ucache-dec.php",
        "description": "Decrements the value associated with the key"
    },
    {
        "name": "wincache_ucache_exists",
        "url": "function.wincache-ucache-exists.php",
        "description": "Checks if a variable exists in the user cache"
    },
    {
        "name": "wincache_ucache_inc",
        "url": "function.wincache-ucache-inc.php",
        "description": "Increments the value associated with the key"
    },
    {
        "name": "wincache_ucache_meminfo",
        "url": "function.wincache-ucache-meminfo.php",
        "description": "Retrieves information about user cache memory usage"
    },
    {
        "name": "wincache_unlock",
        "url": "function.wincache-unlock.php",
        "description": "Releases an exclusive lock on a given key"
    },
    {
        "name": "wkhtmltox\\Image\\Converter::getVersion",
        "url": "wkhtmltox-image-converter.getversion.php",
        "description": "Determine version of Converter"
    },
    {
        "name": "wkhtmltox\\PDF\\Converter::add",
        "url": "wkhtmltox-pdf-converter.add.php",
        "description": "Add an object for conversion"
    },
    {
        "name": "wkhtmltox\\PDF\\Converter::getVersion",
        "url": "wkhtmltox-pdf-converter.getversion.php",
        "description": "Determine version of Converter"
    },
    {
        "name": "wkhtmltox\\PDF\\Object::__construct",
        "url": "wkhtmltox-pdf-object.construct.php",
        "description": "Create a new PDF Object"
    },
    {
        "name": "Worker::collect",
        "url": "worker.collect.php",
        "description": "Collect references to completed tasks"
    },
    {
        "name": "Worker::isShutdown",
        "url": "worker.isshutdown.php",
        "description": "State Detection"
    },
    {
        "name": "Worker::stack",
        "url": "worker.stack.php",
        "description": "Stacking work"
    },
    {
        "name": "xattr_get",
        "url": "function.xattr-get.php",
        "description": "Get an extended attribute"
    },
    {
        "name": "xattr_remove",
        "url": "function.xattr-remove.php",
        "description": "Remove an extended attribute"
    },
    {
        "name": "xattr_supported",
        "url": "function.xattr-supported.php",
        "description": "Check if filesystem supports extended attributes"
    },
    {
        "name": "xdiff_file_bdiff_size",
        "url": "function.xdiff-file-bdiff-size.php",
        "description": "Read a size of file created by applying a binary diff"
    },
    {
        "name": "xdiff_file_diff",
        "url": "function.xdiff-file-diff.php",
        "description": "Make unified diff of two files"
    },
    {
        "name": "xdiff_file_merge3",
        "url": "function.xdiff-file-merge3.php",
        "description": "Merge 3 files into one"
    },
    {
        "name": "xdiff_file_patch_binary",
        "url": "function.xdiff-file-patch-binary.php",
        "description": "Alias of xdiff_file_bpatch"
    },
    {
        "name": "xdiff_string_bdiff",
        "url": "function.xdiff-string-bdiff.php",
        "description": "Make binary diff of two strings"
    },
    {
        "name": "xdiff_string_bpatch",
        "url": "function.xdiff-string-bpatch.php",
        "description": "Patch a string with a binary diff"
    },
    {
        "name": "xdiff_string_diff_binary",
        "url": "function.xdiff-string-diff-binary.php",
        "description": "Alias of xdiff_string_bdiff"
    },
    {
        "name": "xdiff_string_patch",
        "url": "function.xdiff-string-patch.php",
        "description": "Patch a string with an unified diff"
    },
    {
        "name": "xdiff_string_rabdiff",
        "url": "function.xdiff-string-rabdiff.php",
        "description": "Make binary diff of two strings using the Rabin's polynomial fingerprinting algorithm"
    },
    {
        "name": "xhprof_enable",
        "url": "function.xhprof-enable.php",
        "description": "Start xhprof profiler"
    },
    {
        "name": "xhprof_sample_enable",
        "url": "function.xhprof-sample-enable.php",
        "description": "Start XHProf profiling in sampling mode"
    },
    {
        "name": "XMLDiff\\Base::merge",
        "url": "xmldiff-base.merge.php",
        "description": "Produce new XML document based on diff"
    },
    {
        "name": "XMLDiff\\DOM::diff",
        "url": "xmldiff-dom.diff.php",
        "description": "Diff two DOMDocument objects"
    },
    {
        "name": "XMLDiff\\File::diff",
        "url": "xmldiff-file.diff.php",
        "description": "Diff two XML files"
    },
    {
        "name": "XMLDiff\\Memory::diff",
        "url": "xmldiff-memory.diff.php",
        "description": "Diff two XML documents"
    },
    {
        "name": "XMLReader::close",
        "url": "xmlreader.close.php",
        "description": "Close the XMLReader input"
    },
    {
        "name": "XMLReader::getAttribute",
        "url": "xmlreader.getattribute.php",
        "description": "Get the value of a named attribute"
    },
    {
        "name": "XMLReader::getAttributeNs",
        "url": "xmlreader.getattributens.php",
        "description": "Get the value of an attribute by localname and URI"
    },
    {
        "name": "XMLReader::isValid",
        "url": "xmlreader.isvalid.php",
        "description": "Indicates if the parsed document is valid"
    },
    {
        "name": "XMLReader::moveToAttribute",
        "url": "xmlreader.movetoattribute.php",
        "description": "Move cursor to a named attribute"
    },
    {
        "name": "XMLReader::moveToAttributeNs",
        "url": "xmlreader.movetoattributens.php",
        "description": "Move cursor to a named attribute"
    },
    {
        "name": "XMLReader::moveToFirstAttribute",
        "url": "xmlreader.movetofirstattribute.php",
        "description": "Position cursor on the first Attribute"
    },
    {
        "name": "XMLReader::next",
        "url": "xmlreader.next.php",
        "description": "Move cursor to next node skipping all subtrees"
    },
    {
        "name": "XMLReader::read",
        "url": "xmlreader.read.php",
        "description": "Move to next node in document"
    },
    {
        "name": "XMLReader::readOuterXml",
        "url": "xmlreader.readouterxml.php",
        "description": "Retrieve XML from current node, including itself"
    },
    {
        "name": "XMLReader::setParserProperty",
        "url": "xmlreader.setparserproperty.php",
        "description": "Set parser options"
    },
    {
        "name": "XMLReader::setRelaxNGSchemaSource",
        "url": "xmlreader.setrelaxngschemasource.php",
        "description": "Set the data containing a RelaxNG Schema"
    },
    {
        "name": "XMLReader::XML",
        "url": "xmlreader.xml.php",
        "description": "Set the data containing the XML to parse"
    },
    {
        "name": "xmlrpc_decode_request",
        "url": "function.xmlrpc-decode-request.php",
        "description": "Decodes XML into native PHP types"
    },
    {
        "name": "xmlrpc_encode_request",
        "url": "function.xmlrpc-encode-request.php",
        "description": "Generates XML for a method request"
    },
    {
        "name": "xmlrpc_is_fault",
        "url": "function.xmlrpc-is-fault.php",
        "description": "Determines if an array value represents an XMLRPC fault"
    },
    {
        "name": "xmlrpc_server_add_introspection_data",
        "url": "function.xmlrpc-server-add-introspection-data.php",
        "description": "Adds introspection documentation"
    },
    {
        "name": "xmlrpc_server_create",
        "url": "function.xmlrpc-server-create.php",
        "description": "Creates an xmlrpc server"
    },
    {
        "name": "xmlrpc_server_register_introspection_callback",
        "url": "function.xmlrpc-server-register-introspection-callback.php",
        "description": "Register a PHP function to generate documentation"
    },
    {
        "name": "xmlrpc_set_type",
        "url": "function.xmlrpc-set-type.php",
        "description": "Sets xmlrpc type, base64 or datetime, for a PHP string value"
    },
    {
        "name": "XMLWriter::endCdata",
        "url": "xmlwriter.endcdata.php",
        "description": "End current CDATA"
    },
    {
        "name": "XMLWriter::endDocument",
        "url": "xmlwriter.enddocument.php",
        "description": "End current document"
    },
    {
        "name": "XMLWriter::endDtdAttlist",
        "url": "xmlwriter.enddtdattlist.php",
        "description": "End current DTD AttList"
    },
    {
        "name": "XMLWriter::endDtdEntity",
        "url": "xmlwriter.enddtdentity.php",
        "description": "End current DTD Entity"
    },
    {
        "name": "XMLWriter::endPi",
        "url": "xmlwriter.endpi.php",
        "description": "End current PI"
    },
    {
        "name": "XMLWriter::fullEndElement",
        "url": "xmlwriter.fullendelement.php",
        "description": "End current element"
    },
    {
        "name": "XMLWriter::openUri",
        "url": "xmlwriter.openuri.php",
        "description": "Create new xmlwriter using source uri for output"
    },
    {
        "name": "XMLWriter::setIndent",
        "url": "xmlwriter.setindent.php",
        "description": "Toggle indentation on\/off"
    },
    {
        "name": "XMLWriter::startAttribute",
        "url": "xmlwriter.startattribute.php",
        "description": "Create start attribute"
    },
    {
        "name": "XMLWriter::startCdata",
        "url": "xmlwriter.startcdata.php",
        "description": "Create start CDATA tag"
    },
    {
        "name": "XMLWriter::startDocument",
        "url": "xmlwriter.startdocument.php",
        "description": "Create document tag"
    },
    {
        "name": "XMLWriter::startDtdAttlist",
        "url": "xmlwriter.startdtdattlist.php",
        "description": "Create start DTD AttList"
    },
    {
        "name": "XMLWriter::startDtdEntity",
        "url": "xmlwriter.startdtdentity.php",
        "description": "Create start DTD Entity"
    },
    {
        "name": "XMLWriter::startElementNs",
        "url": "xmlwriter.startelementns.php",
        "description": "Create start namespaced element tag"
    },
    {
        "name": "XMLWriter::text",
        "url": "xmlwriter.text.php",
        "description": "Write text"
    },
    {
        "name": "XMLWriter::writeAttributeNs",
        "url": "xmlwriter.writeattributens.php",
        "description": "Write full namespaced attribute"
    },
    {
        "name": "XMLWriter::writeComment",
        "url": "xmlwriter.writecomment.php",
        "description": "Write full comment tag"
    },
    {
        "name": "XMLWriter::writeDtdAttlist",
        "url": "xmlwriter.writedtdattlist.php",
        "description": "Write full DTD AttList tag"
    },
    {
        "name": "XMLWriter::writeDtdEntity",
        "url": "xmlwriter.writedtdentity.php",
        "description": "Write full DTD Entity tag"
    },
    {
        "name": "XMLWriter::writeElementNs",
        "url": "xmlwriter.writeelementns.php",
        "description": "Write full namespaced element tag"
    },
    {
        "name": "XMLWriter::writeRaw",
        "url": "xmlwriter.writeraw.php",
        "description": "Write a raw XML text"
    },
    {
        "name": "xml_get_current_byte_index",
        "url": "function.xml-get-current-byte-index.php",
        "description": "Get current byte index for an XML parser"
    },
    {
        "name": "xml_get_current_line_number",
        "url": "function.xml-get-current-line-number.php",
        "description": "Get current line number for an XML parser"
    },
    {
        "name": "xml_parse",
        "url": "function.xml-parse.php",
        "description": "Start parsing an XML document"
    },
    {
        "name": "xml_parser_create_ns",
        "url": "function.xml-parser-create-ns.php",
        "description": "Create an XML parser with namespace support"
    },
    {
        "name": "xml_parser_get_option",
        "url": "function.xml-parser-get-option.php",
        "description": "Get options from an XML parser"
    },
    {
        "name": "xml_parse_into_struct",
        "url": "function.xml-parse-into-struct.php",
        "description": "Parse XML data into an array structure"
    },
    {
        "name": "xml_set_default_handler",
        "url": "function.xml-set-default-handler.php",
        "description": "Set up default handler"
    },
    {
        "name": "xml_set_end_namespace_decl_handler",
        "url": "function.xml-set-end-namespace-decl-handler.php",
        "description": "Set up end namespace declaration handler"
    },
    {
        "name": "xml_set_notation_decl_handler",
        "url": "function.xml-set-notation-decl-handler.php",
        "description": "Set up notation declaration handler"
    },
    {
        "name": "xml_set_processing_instruction_handler",
        "url": "function.xml-set-processing-instruction-handler.php",
        "description": "Set up processing instruction (PI) handler"
    },
    {
        "name": "xml_set_unparsed_entity_decl_handler",
        "url": "function.xml-set-unparsed-entity-decl-handler.php",
        "description": "Set up unparsed entity declaration handler"
    },
    {
        "name": "XSLTProcessor::getSecurityPrefs",
        "url": "xsltprocessor.getsecurityprefs.php",
        "description": "Get security preferences"
    },
    {
        "name": "XSLTProcessor::importStylesheet",
        "url": "xsltprocessor.importstylesheet.php",
        "description": "Import stylesheet"
    },
    {
        "name": "XSLTProcessor::removeParameter",
        "url": "xsltprocessor.removeparameter.php",
        "description": "Remove parameter"
    },
    {
        "name": "XSLTProcessor::setProfiling",
        "url": "xsltprocessor.setprofiling.php",
        "description": "Sets profiling output file"
    },
    {
        "name": "XSLTProcessor::transformToDoc",
        "url": "xsltprocessor.transformtodoc.php",
        "description": "Transform to a document"
    },
    {
        "name": "XSLTProcessor::transformToXml",
        "url": "xsltprocessor.transformtoxml.php",
        "description": "Transform to XML"
    },
    {
        "name": "Yac::add",
        "url": "yac.add.php",
        "description": "Store into cache"
    },
    {
        "name": "Yac::dump",
        "url": "yac.dump.php",
        "description": "Dump cache"
    },
    {
        "name": "Yac::get",
        "url": "yac.get.php",
        "description": "Retrieve values from cache"
    },
    {
        "name": "Yac::set",
        "url": "yac.set.php",
        "description": "Store into cache"
    },
    {
        "name": "Yac::__get",
        "url": "yac.getter.php",
        "description": "Getter"
    },
    {
        "name": "Yaconf::get",
        "url": "yaconf.get.php",
        "description": "Retrieve a item"
    },
    {
        "name": "Yaf_Action_Abstract::execute",
        "url": "yaf-action-abstract.execute.php",
        "description": "Action entry point"
    },
    {
        "name": "Yaf_Action_Abstract::getControllerName",
        "url": "yaf-controller-abstract.getcontrollername.php",
        "description": "Get controller name"
    },
    {
        "name": "Yaf_Application::bootstrap",
        "url": "yaf-application.bootstrap.php",
        "description": "Call bootstrap"
    },
    {
        "name": "Yaf_Application::environ",
        "url": "yaf-application.environ.php",
        "description": "Retrive environ"
    },
    {
        "name": "Yaf_Application::getAppDirectory",
        "url": "yaf-application.getappdirectory.php",
        "description": "Get the application directory"
    },
    {
        "name": "Yaf_Application::getDispatcher",
        "url": "yaf-application.getdispatcher.php",
        "description": "Get Yaf_Dispatcher instance"
    },
    {
        "name": "Yaf_Application::getLastErrorNo",
        "url": "yaf-application.getlasterrorno.php",
        "description": "Get code of last occurred error"
    },
    {
        "name": "Yaf_Application::run",
        "url": "yaf-application.run.php",
        "description": "Start Yaf_Application"
    },
    {
        "name": "Yaf_Application::__construct",
        "url": "yaf-application.construct.php",
        "description": "Yaf_Application constructor"
    },
    {
        "name": "Yaf_Config_Abstract::get",
        "url": "yaf-config-abstract.get.php",
        "description": "Getter"
    },
    {
        "name": "Yaf_Config_Abstract::set",
        "url": "yaf-config-abstract.set.php",
        "description": "Setter"
    },
    {
        "name": "Yaf_Config_Ini::count",
        "url": "yaf-config-ini.count.php",
        "description": "Count all elements in Yaf_Config.ini"
    },
    {
        "name": "Yaf_Config_Ini::key",
        "url": "yaf-config-ini.key.php",
        "description": "Fetch current element's key"
    },
    {
        "name": "Yaf_Config_Ini::offsetExists",
        "url": "yaf-config-ini.offsetexists.php",
        "description": "The offsetExists purpose"
    },
    {
        "name": "Yaf_Config_Ini::offsetSet",
        "url": "yaf-config-ini.offsetset.php",
        "description": "The offsetSet purpose"
    },
    {
        "name": "Yaf_Config_Ini::readonly",
        "url": "yaf-config-ini.readonly.php",
        "description": "The readonly purpose"
    },
    {
        "name": "Yaf_Config_Ini::toArray",
        "url": "yaf-config-ini.toarray.php",
        "description": "Return config as a PHP array"
    },
    {
        "name": "Yaf_Config_Ini::__construct",
        "url": "yaf-config-ini.construct.php",
        "description": "Yaf_Config_Ini constructor"
    },
    {
        "name": "Yaf_Config_Ini::__isset",
        "url": "yaf-config-ini.isset.php",
        "description": "Determine if a key is exists"
    },
    {
        "name": "Yaf_Config_Simple::count",
        "url": "yaf-config-simple.count.php",
        "description": "The count purpose"
    },
    {
        "name": "Yaf_Config_Simple::key",
        "url": "yaf-config-simple.key.php",
        "description": "The key purpose"
    },
    {
        "name": "Yaf_Config_Simple::offsetExists",
        "url": "yaf-config-simple.offsetexists.php",
        "description": "The offsetExists purpose"
    },
    {
        "name": "Yaf_Config_Simple::offsetSet",
        "url": "yaf-config-simple.offsetset.php",
        "description": "The offsetSet purpose"
    },
    {
        "name": "Yaf_Config_Simple::readonly",
        "url": "yaf-config-simple.readonly.php",
        "description": "The readonly purpose"
    },
    {
        "name": "Yaf_Config_Simple::toArray",
        "url": "yaf-config-simple.toarray.php",
        "description": "Returns a PHP array"
    },
    {
        "name": "Yaf_Config_Simple::__construct",
        "url": "yaf-config-simple.construct.php",
        "description": "The __construct purpose"
    },
    {
        "name": "Yaf_Config_Simple::__isset",
        "url": "yaf-config-simple.isset.php",
        "description": "The __isset purpose"
    },
    {
        "name": "Yaf_Controller_Abstract::display",
        "url": "yaf-controller-abstract.display.php",
        "description": "The display purpose"
    },
    {
        "name": "Yaf_Controller_Abstract::getInvokeArg",
        "url": "yaf-controller-abstract.getinvokearg.php",
        "description": "The getInvokeArg purpose"
    },
    {
        "name": "Yaf_Controller_Abstract::getModuleName",
        "url": "yaf-controller-abstract.getmodulename.php",
        "description": "Get module name"
    },
    {
        "name": "Yaf_Controller_Abstract::getRequest",
        "url": "yaf-controller-abstract.getrequest.php",
        "description": "Retrieve current request object"
    },
    {
        "name": "Yaf_Controller_Abstract::getView",
        "url": "yaf-controller-abstract.getview.php",
        "description": "Retrieve the view engine"
    },
    {
        "name": "Yaf_Controller_Abstract::init",
        "url": "yaf-controller-abstract.init.php",
        "description": "Controller initializer"
    },
    {
        "name": "Yaf_Controller_Abstract::redirect",
        "url": "yaf-controller-abstract.redirect.php",
        "description": "Redirect to a URL"
    },
    {
        "name": "Yaf_Controller_Abstract::setViewpath",
        "url": "yaf-controller-abstract.setviewpath.php",
        "description": "The setViewpath purpose"
    },
    {
        "name": "Yaf_Dispatcher::autoRender",
        "url": "yaf-dispatcher.autorender.php",
        "description": "Switch on\/off autorendering"
    },
    {
        "name": "Yaf_Dispatcher::disableView",
        "url": "yaf-dispatcher.disableview.php",
        "description": "Disable view rendering"
    },
    {
        "name": "Yaf_Dispatcher::enableView",
        "url": "yaf-dispatcher.enableview.php",
        "description": "Enable view rendering"
    },
    {
        "name": "Yaf_Dispatcher::getApplication",
        "url": "yaf-dispatcher.getapplication.php",
        "description": "Retrieve the application"
    },
    {
        "name": "Yaf_Dispatcher::getDefaultController",
        "url": "yaf-dispatcher.getdefaultcontroller.php",
        "description": "Retrive the default controller name"
    },
    {
        "name": "Yaf_Dispatcher::getInstance",
        "url": "yaf-dispatcher.getinstance.php",
        "description": "Retrive the dispatcher instance"
    },
    {
        "name": "Yaf_Dispatcher::getRouter",
        "url": "yaf-dispatcher.getrouter.php",
        "description": "Retrive router instance"
    },
    {
        "name": "Yaf_Dispatcher::registerPlugin",
        "url": "yaf-dispatcher.registerplugin.php",
        "description": "Register a plugin"
    },
    {
        "name": "Yaf_Dispatcher::setDefaultAction",
        "url": "yaf-dispatcher.setdefaultaction.php",
        "description": "Change default action name"
    },
    {
        "name": "Yaf_Dispatcher::setDefaultModule",
        "url": "yaf-dispatcher.setdefaultmodule.php",
        "description": "Change default module name"
    },
    {
        "name": "Yaf_Dispatcher::setRequest",
        "url": "yaf-dispatcher.setrequest.php",
        "description": "The setRequest purpose"
    },
    {
        "name": "Yaf_Dispatcher::throwException",
        "url": "yaf-dispatcher.throwexception.php",
        "description": "Switch on\/off exception throwing"
    },
    {
        "name": "Yaf_Exception::getPrevious",
        "url": "yaf-exception.getprevious.php",
        "description": "The getPrevious purpose"
    },
    {
        "name": "Yaf_Loader::autoload",
        "url": "yaf-loader.autoload.php",
        "description": "The autoload purpose"
    },
    {
        "name": "Yaf_Loader::getInstance",
        "url": "yaf-loader.getinstance.php",
        "description": "The getInstance purpose"
    },
    {
        "name": "Yaf_Loader::getLocalNamespace",
        "url": "yaf-loader.getnamespaces.php",
        "description": "Retrive all register namespaces info"
    },
    {
        "name": "Yaf_Loader::import",
        "url": "yaf-loader.import.php",
        "description": "The import purpose"
    },
    {
        "name": "Yaf_Loader::registerLocalNamespace",
        "url": "yaf-loader.registerlocalnamespace.php",
        "description": "Register local class prefix"
    },
    {
        "name": "Yaf_Loader::setLibraryPath",
        "url": "yaf-loader.setlibrarypath.php",
        "description": "Change the library path"
    },
    {
        "name": "Yaf_Plugin_Abstract::dispatchLoopShutdown",
        "url": "yaf-plugin-abstract.dispatchloopshutdown.php",
        "description": "The dispatchLoopShutdown purpose"
    },
    {
        "name": "Yaf_Plugin_Abstract::postDispatch",
        "url": "yaf-plugin-abstract.postdispatch.php",
        "description": "The postDispatch purpose"
    },
    {
        "name": "Yaf_Plugin_Abstract::preResponse",
        "url": "yaf-plugin-abstract.preresponse.php",
        "description": "The preResponse purpose"
    },
    {
        "name": "Yaf_Plugin_Abstract::routerStartup",
        "url": "yaf-plugin-abstract.routerstartup.php",
        "description": "RouterStartup hook"
    },
    {
        "name": "Yaf_Registry::get",
        "url": "yaf-registry.get.php",
        "description": "Retrieve an item from registry"
    },
    {
        "name": "Yaf_Registry::set",
        "url": "yaf-registry.set.php",
        "description": "Add an item into registry"
    },
    {
        "name": "Yaf_Request_Abstract::clearParams",
        "url": "yaf-request-abstract.clearparams.php",
        "description": "Remove all params"
    },
    {
        "name": "Yaf_Request_Abstract::getBaseUri",
        "url": "yaf-request-abstract.getbaseuri.php",
        "description": "The getBaseUri purpose"
    },
    {
        "name": "Yaf_Request_Abstract::getEnv",
        "url": "yaf-request-abstract.getenv.php",
        "description": "Retrieve ENV varialbe"
    },
    {
        "name": "Yaf_Request_Abstract::getLanguage",
        "url": "yaf-request-abstract.getlanguage.php",
        "description": "Retrieve client's preferred language"
    },
    {
        "name": "Yaf_Request_Abstract::getModuleName",
        "url": "yaf-request-abstract.getmodulename.php",
        "description": "The getModuleName purpose"
    },
    {
        "name": "Yaf_Request_Abstract::getParams",
        "url": "yaf-request-abstract.getparams.php",
        "description": "Retrieve all calling parameters"
    },
    {
        "name": "Yaf_Request_Abstract::getServer",
        "url": "yaf-request-abstract.getserver.php",
        "description": "Retrieve SERVER variable"
    },
    {
        "name": "Yaf_Request_Abstract::isDispatched",
        "url": "yaf-request-abstract.isdispatched.php",
        "description": "Determin if the request is dispatched"
    },
    {
        "name": "Yaf_Request_Abstract::isHead",
        "url": "yaf-request-abstract.ishead.php",
        "description": "Determine if request is HEAD request"
    },
    {
        "name": "Yaf_Request_Abstract::isPost",
        "url": "yaf-request-abstract.ispost.php",
        "description": "Determine if request is POST request"
    },
    {
        "name": "Yaf_Request_Abstract::isRouted",
        "url": "yaf-request-abstract.isrouted.php",
        "description": "Determin if request has been routed"
    },
    {
        "name": "Yaf_Request_Abstract::setActionName",
        "url": "yaf-request-abstract.setactionname.php",
        "description": "Set action name"
    },
    {
        "name": "Yaf_Request_Abstract::setControllerName",
        "url": "yaf-request-abstract.setcontrollername.php",
        "description": "Set controller name"
    },
    {
        "name": "Yaf_Request_Abstract::setModuleName",
        "url": "yaf-request-abstract.setmodulename.php",
        "description": "Set module name"
    },
    {
        "name": "Yaf_Request_Abstract::setRequestUri",
        "url": "yaf-request-abstract.setrequesturi.php",
        "description": "The setRequestUri purpose"
    },
    {
        "name": "Yaf_Request_Http::get",
        "url": "yaf-request-http.get.php",
        "description": "Retrieve variable from client"
    },
    {
        "name": "Yaf_Request_Http::getFiles",
        "url": "yaf-request-http.getfiles.php",
        "description": "The getFiles purpose"
    },
    {
        "name": "Yaf_Request_Http::getQuery",
        "url": "yaf-request-http.getquery.php",
        "description": "Fetch a query parameter"
    },
    {
        "name": "Yaf_Request_Http::getRequest",
        "url": "yaf-request-http.getrequest.php",
        "description": "The getRequest purpose"
    },
    {
        "name": "Yaf_Request_Http::__construct",
        "url": "yaf-request-http.construct.php",
        "description": "Constructor of Yaf_Request_Http"
    },
    {
        "name": "Yaf_Request_Simple::getCookie",
        "url": "yaf-request-simple.getcookie.php",
        "description": "The getCookie purpose"
    },
    {
        "name": "Yaf_Request_Simple::getPost",
        "url": "yaf-request-simple.getpost.php",
        "description": "The getPost purpose"
    },
    {
        "name": "Yaf_Request_Simple::getRequest",
        "url": "yaf-request-simple.getrequest.php",
        "description": "The getRequest purpose"
    },
    {
        "name": "Yaf_Request_Simple::__construct",
        "url": "yaf-request-simple.construct.php",
        "description": "Constructor of Yaf_Request_Simple"
    },
    {
        "name": "Yaf_Response_Abstract::clearBody",
        "url": "yaf-response-abstract.clearbody.php",
        "description": "Discard all exists response body"
    },
    {
        "name": "Yaf_Response_Abstract::getBody",
        "url": "yaf-response-abstract.getbody.php",
        "description": "Retrieve a exists content"
    },
    {
        "name": "Yaf_Response_Abstract::prependBody",
        "url": "yaf-response-abstract.prependbody.php",
        "description": "The prependBody purpose"
    },
    {
        "name": "Yaf_Response_Abstract::setAllHeaders",
        "url": "yaf-response-abstract.setallheaders.php",
        "description": "The setAllHeaders purpose"
    },
    {
        "name": "Yaf_Response_Abstract::setHeader",
        "url": "yaf-response-abstract.setheader.php",
        "description": "Set reponse header"
    },
    {
        "name": "Yaf_Response_Abstract::__construct",
        "url": "yaf-response-abstract.construct.php",
        "description": "The __construct purpose"
    },
    {
        "name": "Yaf_Response_Abstract::__toString",
        "url": "yaf-response-abstract.tostring.php",
        "description": "Retrieve all bodys as string"
    },
    {
        "name": "Yaf_Router::addRoute",
        "url": "yaf-router.addroute.php",
        "description": "Add new Route into Router"
    },
    {
        "name": "Yaf_Router::getRoute",
        "url": "yaf-router.getroute.php",
        "description": "Retrieve a route by name"
    },
    {
        "name": "Yaf_Router::route",
        "url": "yaf-router.route.php",
        "description": "The route purpose"
    },
    {
        "name": "Yaf_Route_Interface::assemble",
        "url": "yaf-route-interface.assemble.php",
        "description": "Assemble a request"
    },
    {
        "name": "Yaf_Route_Map::assemble",
        "url": "yaf-route-map.assemble.php",
        "description": "Assemble a url"
    },
    {
        "name": "Yaf_Route_Map::__construct",
        "url": "yaf-route-map.construct.php",
        "description": "The __construct purpose"
    },
    {
        "name": "Yaf_Route_Regex::route",
        "url": "yaf-route-regex.route.php",
        "description": "The route purpose"
    },
    {
        "name": "Yaf_Route_Rewrite::assemble",
        "url": "yaf-route-rewrite.assemble.php",
        "description": "Assemble a url"
    },
    {
        "name": "Yaf_Route_Rewrite::__construct",
        "url": "yaf-route-rewrite.construct.php",
        "description": "Yaf_Route_Rewrite constructor"
    },
    {
        "name": "Yaf_Route_Simple::route",
        "url": "yaf-route-simple.route.php",
        "description": "Route a request"
    },
    {
        "name": "Yaf_Route_Static::assemble",
        "url": "yaf-route-static.assemble.php",
        "description": "Assemble a url"
    },
    {
        "name": "Yaf_Route_Static::route",
        "url": "yaf-route-static.route.php",
        "description": "Route a request"
    },
    {
        "name": "Yaf_Route_Supervar::route",
        "url": "yaf-route-supervar.route.php",
        "description": "The route purpose"
    },
    {
        "name": "Yaf_Session::count",
        "url": "yaf-session.count.php",
        "description": "The count purpose"
    },
    {
        "name": "Yaf_Session::del",
        "url": "yaf-session.del.php",
        "description": "The del purpose"
    },
    {
        "name": "Yaf_Session::has",
        "url": "yaf-session.has.php",
        "description": "The has purpose"
    },
    {
        "name": "Yaf_Session::next",
        "url": "yaf-session.next.php",
        "description": "The next purpose"
    },
    {
        "name": "Yaf_Session::offsetGet",
        "url": "yaf-session.offsetget.php",
        "description": "The offsetGet purpose"
    },
    {
        "name": "Yaf_Session::offsetUnset",
        "url": "yaf-session.offsetunset.php",
        "description": "The offsetUnset purpose"
    },
    {
        "name": "Yaf_Session::start",
        "url": "yaf-session.start.php",
        "description": "The start purpose"
    },
    {
        "name": "Yaf_Session::__construct",
        "url": "yaf-session.construct.php",
        "description": "Constructor of Yaf_Session"
    },
    {
        "name": "Yaf_Session::__isset",
        "url": "yaf-session.isset.php",
        "description": "The __isset purpose"
    },
    {
        "name": "Yaf_Session::__unset",
        "url": "yaf-session.unset.php",
        "description": "The __unset purpose"
    },
    {
        "name": "Yaf_View_Interface::display",
        "url": "yaf-view-interface.display.php",
        "description": "Render and output a template"
    },
    {
        "name": "Yaf_View_Interface::render",
        "url": "yaf-view-interface.render.php",
        "description": "Render a template"
    },
    {
        "name": "Yaf_View_Simple::assign",
        "url": "yaf-view-simple.assign.php",
        "description": "Assign values"
    },
    {
        "name": "Yaf_View_Simple::clear",
        "url": "yaf-view-simple.clear.php",
        "description": "Clear Assigned values"
    },
    {
        "name": "Yaf_View_Simple::eval",
        "url": "yaf-view-simple.eval.php",
        "description": "Render template"
    },
    {
        "name": "Yaf_View_Simple::render",
        "url": "yaf-view-simple.render.php",
        "description": "Render template"
    },
    {
        "name": "Yaf_View_Simple::__construct",
        "url": "yaf-view-simple.construct.php",
        "description": "Constructor of Yaf_View_Simple"
    },
    {
        "name": "Yaf_View_Simple::__isset",
        "url": "yaf-view-simple.isset.php",
        "description": "The __isset purpose"
    },
    {
        "name": "yaml_emit",
        "url": "function.yaml-emit.php",
        "description": "Returns the YAML representation of a value"
    },
    {
        "name": "yaml_parse",
        "url": "function.yaml-parse.php",
        "description": "Parse a YAML stream"
    },
    {
        "name": "yaml_parse_url",
        "url": "function.yaml-parse-url.php",
        "description": "Parse a Yaml stream from a URL"
    },
    {
        "name": "Yar_Client::__call",
        "url": "yar-client.call.php",
        "description": "Call service"
    },
    {
        "name": "Yar_Client_Exception::getType",
        "url": "yar-client-exception.gettype.php",
        "description": "Retrieve exception's type"
    },
    {
        "name": "Yar_Concurrent_Client::loop",
        "url": "yar-concurrent-client.loop.php",
        "description": "Send all calls"
    },
    {
        "name": "Yar_Server::handle",
        "url": "yar-server.handle.php",
        "description": "Start RPC Server"
    },
    {
        "name": "Yar_Server_Exception::getType",
        "url": "yar-server-exception.gettype.php",
        "description": "Retrieve exception's type"
    },
    {
        "name": "yaz_ccl_conf",
        "url": "function.yaz-ccl-conf.php",
        "description": "Configure CCL parser"
    },
    {
        "name": "yaz_close",
        "url": "function.yaz-close.php",
        "description": "Close YAZ connection"
    },
    {
        "name": "yaz_database",
        "url": "function.yaz-database.php",
        "description": "Specifies the databases within a session"
    },
    {
        "name": "yaz_errno",
        "url": "function.yaz-errno.php",
        "description": "Returns error number"
    },
    {
        "name": "yaz_es",
        "url": "function.yaz-es.php",
        "description": "Prepares for an Extended Service Request"
    },
    {
        "name": "yaz_get_option",
        "url": "function.yaz-get-option.php",
        "description": "Returns value of option for connection"
    },
    {
        "name": "yaz_itemorder",
        "url": "function.yaz-itemorder.php",
        "description": "Prepares for Z39.50 Item Order with an ILL-Request package"
    },
    {
        "name": "yaz_range",
        "url": "function.yaz-range.php",
        "description": "Specifies a range of records to retrieve"
    },
    {
        "name": "yaz_scan",
        "url": "function.yaz-scan.php",
        "description": "Prepares for a scan"
    },
    {
        "name": "yaz_schema",
        "url": "function.yaz-schema.php",
        "description": "Specifies schema for retrieval"
    },
    {
        "name": "yaz_set_option",
        "url": "function.yaz-set-option.php",
        "description": "Sets one or more options for connection"
    },
    {
        "name": "yaz_syntax",
        "url": "function.yaz-syntax.php",
        "description": "Specifies the preferred record syntax for retrieval"
    },
    {
        "name": "zend_thread_id",
        "url": "function.zend-thread-id.php",
        "description": "Returns a unique identifier for the current thread"
    },
    {
        "name": "ZipArchive::addEmptyDir",
        "url": "ziparchive.addemptydir.php",
        "description": "Add a new directory"
    },
    {
        "name": "ZipArchive::addFromString",
        "url": "ziparchive.addfromstring.php",
        "description": "Add a file to a ZIP archive using its contents"
    },
    {
        "name": "ZipArchive::addPattern",
        "url": "ziparchive.addpattern.php",
        "description": "Add files from a directory by PCRE pattern"
    },
    {
        "name": "ZipArchive::close",
        "url": "ziparchive.close.php",
        "description": "Close the active archive (opened or newly created)"
    },
    {
        "name": "ZipArchive::deleteIndex",
        "url": "ziparchive.deleteindex.php",
        "description": "Delete an entry in the archive using its index"
    },
    {
        "name": "ZipArchive::extractTo",
        "url": "ziparchive.extractto.php",
        "description": "Extract the archive contents"
    },
    {
        "name": "ZipArchive::getArchiveFlag",
        "url": "ziparchive.getarchiveflag.php",
        "description": "Returns the value of a Zip archive global flag"
    },
    {
        "name": "ZipArchive::getCommentName",
        "url": "ziparchive.getcommentname.php",
        "description": "Returns the comment of an entry using the entry name"
    },
    {
        "name": "ZipArchive::getExternalAttributesName",
        "url": "ziparchive.getexternalattributesname.php",
        "description": "Retrieve the external attributes of an entry defined by its name"
    },
    {
        "name": "ZipArchive::getFromName",
        "url": "ziparchive.getfromname.php",
        "description": "Returns the entry contents using its name"
    },
    {
        "name": "ZipArchive::getStatusString",
        "url": "ziparchive.getstatusstring.php",
        "description": "Returns the status error message, system and\/or zip messages"
    },
    {
        "name": "ZipArchive::getStreamIndex",
        "url": "ziparchive.getstreamindex.php",
        "description": "Get a file handler to the entry defined by its index (read only)"
    },
    {
        "name": "ZipArchive::isCompressionMethodSupported",
        "url": "ziparchive.iscompressionmethoddupported.php",
        "description": "Check if a compression method is supported by libzip"
    },
    {
        "name": "ZipArchive::locateName",
        "url": "ziparchive.locatename.php",
        "description": "Returns the index of the entry in the archive"
    },
    {
        "name": "ZipArchive::registerCancelCallback",
        "url": "ziparchive.registercancelcallback.php",
        "description": "Register a callback to allow cancellation during archive close."
    },
    {
        "name": "ZipArchive::renameIndex",
        "url": "ziparchive.renameindex.php",
        "description": "Renames an entry defined by its index"
    },
    {
        "name": "ZipArchive::replaceFile",
        "url": "ziparchive.replacefile.php",
        "description": "Replace file in ZIP archive with a given path"
    },
    {
        "name": "ZipArchive::setArchiveFlag",
        "url": "ziparchive.setarchiveflag.php",
        "description": "Set a global flag of a ZIP archive"
    },
    {
        "name": "ZipArchive::setCommentName",
        "url": "ziparchive.setcommentname.php",
        "description": "Set the comment of an entry defined by its name"
    },
    {
        "name": "ZipArchive::setCompressionName",
        "url": "ziparchive.setcompressionname.php",
        "description": "Set the compression method of an entry defined by its name"
    },
    {
        "name": "ZipArchive::setEncryptionName",
        "url": "ziparchive.setencryptionname.php",
        "description": "Set the encryption method of an entry defined by its name"
    },
    {
        "name": "ZipArchive::setExternalAttributesName",
        "url": "ziparchive.setexternalattributesname.php",
        "description": "Set the external attributes of an entry defined by its name"
    },
    {
        "name": "ZipArchive::setMtimeName",
        "url": "ziparchive.setmtimename.php",
        "description": "Set the modification time of an entry defined by its name"
    },
    {
        "name": "ZipArchive::statIndex",
        "url": "ziparchive.statindex.php",
        "description": "Get the details of an entry defined by its index"
    },
    {
        "name": "ZipArchive::unchangeAll",
        "url": "ziparchive.unchangeall.php",
        "description": "Undo all changes done in the archive"
    },
    {
        "name": "ZipArchive::unchangeIndex",
        "url": "ziparchive.unchangeindex.php",
        "description": "Revert all changes done to an entry at the given index"
    },
    {
        "name": "Zip context options",
        "url": "context.zip.php",
        "description": "Zip context option listing"
    },
    {
        "name": "zip_entry_close",
        "url": "function.zip-entry-close.php",
        "description": "Close a directory entry"
    },
    {
        "name": "zip_entry_compressionmethod",
        "url": "function.zip-entry-compressionmethod.php",
        "description": "Retrieve the compression method of a directory entry"
    },
    {
        "name": "zip_entry_name",
        "url": "function.zip-entry-name.php",
        "description": "Retrieve the name of a directory entry"
    },
    {
        "name": "zip_entry_read",
        "url": "function.zip-entry-read.php",
        "description": "Read from an open directory entry"
    },
    {
        "name": "zip_read",
        "url": "function.zip-read.php",
        "description": "Read next entry in a ZIP file archive"
    },
    {
        "name": "Zlib context options",
        "url": "context.zlib.php",
        "description": "Zlib context option listing"
    },
    {
        "name": "zlib_encode",
        "url": "function.zlib-encode.php",
        "description": "Compress data with the specified encoding"
    },
    {
        "name": "ZMQ::__construct",
        "url": "zmq.construct.php",
        "description": "ZMQ constructor"
    },
    {
        "name": "ZMQContext::getSocket",
        "url": "zmqcontext.getsocket.php",
        "description": "Create a new socket"
    },
    {
        "name": "ZMQContext::setOpt",
        "url": "zmqcontext.setopt.php",
        "description": "Set a socket option"
    },
    {
        "name": "ZMQDevice::getIdleTimeout",
        "url": "zmqdevice.getidletimeout.php",
        "description": "Get the idle timeout"
    },
    {
        "name": "ZMQDevice::run",
        "url": "zmqdevice.run.php",
        "description": "Run the new device"
    },
    {
        "name": "ZMQDevice::setIdleTimeout",
        "url": "zmqdevice.setidletimeout.php",
        "description": "Set the idle timeout"
    },
    {
        "name": "ZMQDevice::setTimerTimeout",
        "url": "zmqdevice.settimertimeout.php",
        "description": "Set the timer timeout"
    },
    {
        "name": "ZMQPoll::add",
        "url": "zmqpoll.add.php",
        "description": "Add item to the poll set"
    },
    {
        "name": "ZMQPoll::count",
        "url": "zmqpoll.count.php",
        "description": "Count items in the poll set"
    },
    {
        "name": "ZMQPoll::poll",
        "url": "zmqpoll.poll.php",
        "description": "Poll the items"
    },
    {
        "name": "ZMQSocket::bind",
        "url": "zmqsocket.bind.php",
        "description": "Bind the socket"
    },
    {
        "name": "ZMQSocket::disconnect",
        "url": "zmqsocket.disconnect.php",
        "description": "Disconnect a socket"
    },
    {
        "name": "ZMQSocket::getPersistentId",
        "url": "zmqsocket.getpersistentid.php",
        "description": "Get the persistent id"
    },
    {
        "name": "ZMQSocket::getSockOpt",
        "url": "zmqsocket.getsockopt.php",
        "description": "Get socket option"
    },
    {
        "name": "ZMQSocket::recv",
        "url": "zmqsocket.recv.php",
        "description": "Receives a message"
    },
    {
        "name": "ZMQSocket::send",
        "url": "zmqsocket.send.php",
        "description": "Sends a message"
    },
    {
        "name": "ZMQSocket::setSockOpt",
        "url": "zmqsocket.setsockopt.php",
        "description": "Set a socket option"
    },
    {
        "name": "ZMQSocket::__construct",
        "url": "zmqsocket.construct.php",
        "description": "Construct a new ZMQSocket"
    },
    {
        "name": "Zookeeper::close",
        "url": "zookeeper.close.php",
        "description": "Close the zookeeper handle and free up any resources"
    },
    {
        "name": "Zookeeper::create",
        "url": "zookeeper.create.php",
        "description": "Create a node synchronously"
    },
    {
        "name": "Zookeeper::exists",
        "url": "zookeeper.exists.php",
        "description": "Checks the existence of a node in zookeeper synchronously"
    },
    {
        "name": "Zookeeper::getAcl",
        "url": "zookeeper.getacl.php",
        "description": "Gets the acl associated with a node synchronously"
    },
    {
        "name": "Zookeeper::getClientId",
        "url": "zookeeper.getclientid.php",
        "description": "Return the client session id, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE)"
    },
    {
        "name": "Zookeeper::getRecvTimeout",
        "url": "zookeeper.getrecvtimeout.php",
        "description": "Return the timeout for this session, only valid if the connections is currently connected (ie. last watcher state is ZOO_CONNECTED_STATE). This value may change after a server re-connect"
    },
    {
        "name": "Zookeeper::isRecoverable",
        "url": "zookeeper.isrecoverable.php",
        "description": "Checks if the current zookeeper connection state can be recovered"
    },
    {
        "name": "Zookeeper::setAcl",
        "url": "zookeeper.setacl.php",
        "description": "Sets the acl associated with a node synchronously"
    },
    {
        "name": "Zookeeper::setDeterministicConnOrder",
        "url": "zookeeper.setdeterministicconnorder.php",
        "description": "Enable\/disable quorum endpoint order randomization"
    },
    {
        "name": "Zookeeper::setWatcher",
        "url": "zookeeper.setwatcher.php",
        "description": "Set a watcher function"
    },
    {
        "name": "ZookeeperConfig::add",
        "url": "zookeeperconfig.add.php",
        "description": "Add servers to the ensemble"
    },
    {
        "name": "ZookeeperConfig::remove",
        "url": "zookeeperconfig.remove.php",
        "description": "Remove servers from the ensemble"
    },
    {
        "name": "zookeeper_dispatch",
        "url": "function.zookeeper-dispatch.php",
        "description": "Calls callbacks for pending operations"
    },
    {
        "name": "__autoload",
        "url": "function.autoload.php",
        "description": "Attempt to load undefined class"
    }
]